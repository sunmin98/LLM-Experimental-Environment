task_id,text,code,AI_code
1,"Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]","```python
def min_cost_path(cost):
    m = len(cost)
    n = len(cost[0])
    dp = [[0] * n for _ in range(m)]

    dp[0][0] = cost[0][0]
    for i in range(1, m):
        dp[i][0] = dp[i-1][0] + cost[i][0]
    for j in range(1, n):
        dp[0][j] = dp[0][j-1] + cost[0][j]

    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]

    return dp[m-1][n-1]
```"
2,Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","```python
def similar_elements(tuple_list1, tuple_list2):
    set_tuple_list1 = {item for tup in tuple_list1 for item in tup}
    set_tuple_list2 = {item for tup in tuple_list2 for item in tup}
    return list(set_tuple_list1 & set_tuple_list2)
```"
3,Write a python function to identify non-prime numbers.,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result","```python
def non_prime_numbers(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True
    
    return [i for i in range(2, n+1) if not is_prime(i)]
```"
4,Write a function to find the largest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums","```python
import heapq

def find_largest_numbers(num_list):
    if len(num_list) < 3:
        return sorted(num_list, reverse=True)
    else:
        return heapq.nlargest(3, num_list)

# You can use the function like this: 
# print(find_largest_numbers([12,45,7,23,56,89,34]))
```"
5,Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ","```python
def domino_piling(n):
    if n == 1:
        return 1
    elif n == 2:
        return 3
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 3
    for i in range(3, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    return dp[n]
```"
6,Write a python function to check whether the two numbers differ at one bit position only or not.,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)","```python
def differ_by_one_bit(a, b):
    return bin(a ^ b).count('1') == 1
```"
7,Write a function to find all words which are at least 4 characters long in a string by using regex.,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))","```python
import re

def find_words_at_least_4_chars_long(input_string):
    pattern = r'\b\w{4,}\b'
    words = re.findall(pattern, input_string)
    return words
```

You can call the function with a string argument to get the list of words that are at least 4 characters long. For example:
```python
words_list = find_words_at_least_4_chars_long(""This is an example sentence."")
```"
8,Write a function to find squares of individual elements in a list using lambda function.,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums","```python
def find_squares(lst):
    squares = list(map(lambda x: x**2, lst))
    return squares
```"
9,Write a python function to find the minimum number of rotations required to get the same string.,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ","```python
def min_rotations(s):
    t = s + s
    for i in range(1, len(s)):
        if s == t[i:i+len(s)]:
            return i
    return 0
```"
10,Write a function to get the n smallest items from a dataset.,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest","```python
import heapq

def get_n_smallest(dataset, n):
    return heapq.nsmallest(n, dataset)
```"
11,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","```python
def remove_first_last_occurrence(s, c):
    first_index = s.find(c)
    if first_index != -1:
        last_index = len(s) - 1 - s[::-1].find(c)
        if first_index == last_index:
            return s.replace(c, '', 1)
        else:
            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]
    else:
        return s
```"
12,Write a function to sort a given matrix in ascending order according to the sum of its rows.,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","```python
def sort_matrix_by_row_sum(matrix):
    return sorted(matrix, key=sum)
```"
13,Write a function to count the most common words in a dictionary.,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","```python
from collections import Counter

def most_common_words(dictionary):
    words = ' '.join(dictionary.values()).lower().split()
    word_counts = Counter(words)
    max_count = max(word_counts.values())
    most_common = [word for word, count in word_counts.items() if count == max_count]
    return most_common
```"
14,Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","```python
def volume_of_triangular_prism(base_area, height):
    return base_area * height
```"
15,Write a function to split a string at lowercase letters.,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","```python
def split_at_lowercase(s):
    result = []
    current_word = ''
    
    for char in s:
        if char.islower():
            if current_word:
                result.append(current_word)
            current_word = char
        else:
            current_word += char
            
    if current_word:
        result.append(current_word)
        
    return result
```"
16,Write a function to find sequences of lowercase letters joined with an underscore.,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```python
import re

def find_lowercase_sequences(input_string):
    pattern = r'[a-z]+_[a-z_]*[a-z]'
    matches = re.findall(pattern, input_string)
    return matches
```"
17,Write a function to find the perimeter of a square.,"def square_perimeter(a):
  perimeter=4*a
  return perimeter","```python
def find_square_perimeter(side_length):
    if side_length < 0:
        raise ValueError(""Side length must be a non-negative number."")
    perimeter = 4 * side_length
    return perimeter
```"
18,Write a function to remove characters from the first string which are present in the second string.,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","```python
def remove_chars(str1, str2):
    for char in str2:
        str1 = str1.replace(char, '')
    return str1
```"
19,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","```python
def contains_duplicate(nums):
    num_set = set()
    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)
    return False
```"
20,Write a function to check if the given number is woodball or not.,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","```python
def is_woodball(num):
    digits = [int(digit) for digit in str(num)]
    sum_of_digits = sum(digits)
    product_of_digits = 1
    for digit in digits:
        product_of_digits *= digit
    return (product_of_digits % sum_of_digits == 0) and (sum_of_digits != 0)
```"
21,Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","```python
def find_multiples(m, n):
    return [i for i in range(n, m*n+1, n)]
```"
22,Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","```python
def find_first_duplicate(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return num
        seen.add(num)
    return None
```"
23,Write a python function to find the maximum sum of elements of list in a list of lists.,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","```python
def max_sum_sublist(list_of_lists):
    if not list_of_lists:
        return 0
    
    max_sum = float('-inf')
    
    for sublist in list_of_lists:
        current_sum = sum(sublist)
        if current_sum > max_sum:
            max_sum = current_sum
            
    return max_sum
```"
24,Write a function to convert the given binary number to its decimal equivalent.,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","```python
def binary_to_decimal(binary):
    if not set(binary).issubset({'0', '1'}):
        raise ValueError(""Invalid binary number"")
    return int(binary, 2)
```"
25,Write a python function to find the product of non-repeated elements in a given array.,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","```python
def product_of_non_repeated_elements(array):
    count_dict = {}
    for num in array:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    
    product = 1
    for key, value in count_dict.items():
        if value == 1:
            product *= key
            
    return product
```"
26,Write a function to check if the given tuple list has all k elements.,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","```python
def check_tuple_list(tuple_list, k):
    for tup in tuple_list:
        if len(tup) != k:
            return False
    return True
```"
27,Write a python function to remove all digits from a list of strings.,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","```python
def remove_digits_from_strings(lst):
    return [''.join(filter(str.isalpha, s)) for s in lst]
```"
28,Write a python function to find binomial co-efficient.,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","```python
import math

def binomial_coefficient(n, k):
    if k > n - k:
        k = n - k
    result = 1
    for i in range(k):
        result = result * (n - i) / (i + 1)
    return int(result)

# Alternative solution using math library
def binomial_coefficient_math(n, k):
    return math.comb(n, k)
```"
29,Write a python function to find the element occurring odd number of times.,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","```python
def find_odd_occurrence(arr):
    for num in arr:
        if arr.count(num) % 2 != 0:
            return num
```
Alternatively, you can use a dictionary to improve efficiency:

```python
def find_odd_occurrence(arr):
    count_dict = {}
    for num in arr:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    for key, value in count_dict.items():
        if value % 2 != 0:
            return key
```
Or using XOR operator:

```python
def find_odd_occurrence(arr):
    result = 0
    for num in arr:
        result ^= num
    return result
```"
30,Write a python function to count all the substrings starting and ending with same characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","```python
def count_substrings(s):
    n = len(s)
    count = 0
    for i in range(n):
        for j in range(i + 1, n + 1):
            if s[i] == s[j - 1]:
                count += 1
    return count
```"
31,Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","```python
from collections import Counter
import heapq

def topKFrequent(nums):
    count = Counter(nums)
    return heapq.nlargest(5, count.keys(), key=count.get)
```"
32,Write a python function to find the largest prime factor of a given number.,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","```python
def largest_prime_factor(n):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n
```"
33,Write a python function to convert a decimal number to binary number.,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","```python
def decimal_to_binary(n):
    if n == 0:
        return '0'
    binary = ''
    while n > 0:
        binary = str(n % 2) + binary
        n = n // 2
    return binary
```"
34,Write a python function to find the missing number in a sorted array.,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","```python
def find_missing_number(nums):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == mid + nums[0]:
            left = mid + 1
        else:
            right = mid - 1
    return left + nums[0]
```"
35,Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ","```python
def nth_rectangular_number(n):
    def is_rectangular(num):
        i = 1
        while True:
            if num == (i * (i + 1)) // 2 or num == ((8 * num) + 1)**0.5 - 1:
                return True
            elif num < (i * (i + 1)) // 2 and num > ((8 * num) + 1)**0.5 - 1:
                return False
            i += 1

    rectangular_count = 0
    num = 1
    while True:
        if is_rectangular(num):
            rectangular_count += 1
            if rectangular_count == n:
                return num
        num += 1
```"
36,Write a python function to find the nth digit in the proper fraction of two given numbers.,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","```python
def find_nth_digit(numerator, denominator, n):
    decimal = """"
    remainders = {}
    
    while len(decimal) < n:
        numerator *= 10
        remainder = numerator % denominator
        
        if remainder == 0:
            return int(str(numerator // denominator)[n - 1])
        
        if remainder in remainders:
            start = remainders[remainder]
            return int(decimal[start + n % (len(decimal) - start)]))
        
        remainders[remainder] = len(decimal)
        decimal += str(numerator // denominator)
        numerator = remainder
    
    return int(decimal[n - 1])
```"
37,Write a function to sort a given mixed list of integers and strings.,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","```python
def sort_mixed_list(mixed_list):
    ints = sorted([i for i in mixed_list if isinstance(i, int)], reverse=True)
    strs = sorted([s for s in mixed_list if isinstance(s, str)])
    return ints + strs
```"
38,Write a function to find the division of first even and odd number of a given list.,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","```python
def divide_first_even_odd(numbers):
    even_numbers = [num for num in numbers if num % 2 == 0]
    odd_numbers = [num for num in numbers if num % 2 != 0]

    if not even_numbers or not odd_numbers:
        return None

    first_even, first_odd = even_numbers[0], odd_numbers[0]

    if first_even == 0 or first_odd == 0:
        return None

    return first_even / first_odd
```"
39,Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","```python
def can_rearrange(s):
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    max_count = max(char_count.values())
    return len(s) - max_count >= max_count - 1
```"
40,Write a function to find frequency of the elements in a given list of lists using collections module.,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","```python
from collections import Counter

def frequency_of_elements(lists):
    flat_list = [item for sublist in lists for item in sublist]
    freq_dict = dict(Counter(flat_list))
    return freq_dict
```
Let me know if you need any further modifications."
41,Write a function to filter even numbers using lambda function.,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","```python
def filter_even_numbers(numbers):
    return list(filter(lambda x: x % 2 == 0, numbers))
```"
42,Write a python function to find the sum of repeated elements in a given array.,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","```python
def sum_of_repeated_elements(arr):
    freq_dict = {}
    for num in arr:
        if num in freq_dict:
            freq_dict[num] += 1
        else:
            freq_dict[num] = 1
    return sum(num * freq for num, freq in freq_dict.items() if freq > 1)
```"
43,Write a function to find sequences of lowercase letters joined with an underscore using regex.,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","```python
import re

def find_lowercase_sequences(text):
    pattern = r'[a-z_]+'
    sequences = re.findall(pattern, text)
    filtered_sequences = [seq for seq in sequences if '_' in seq]
    return filtered_sequences
```"
44,Write a function that matches a word at the beginning of a string.,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","```python
import re

def match_word_at_beginning(word, string):
    pattern = r'^' + re.escape(word)
    return bool(re.search(pattern, string))
```"
45,Write a function to find the gcd of the given array elements.,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","```python
import math

def find_gcd(arr):
    def gcd(a, b):
        while b != 0:
            a, b = b, a % b
        return abs(a)

    result = arr[0]
    for num in arr[1:]:
        result = gcd(result, num)
    return result
```"
46,Write a python function to determine whether all the numbers are different from each other are not.,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","```python
def all_numbers_different(*args):
    return len(args) == len(set(args))
```

Alternatively:

```python
def all_numbers_different(numbers):
    return len(numbers) == len(set(numbers))
```"
47,Write a python function to find the last digit when factorial of a divides factorial of b.,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","```python
def last_digit_factorial_division(a, b):
    def factorial(n):
        if n == 0:
            return 1
        else:
            return n * factorial(n-1)

    def last_digit(n):
        return n % 10

    a_fact = factorial(a)
    b_fact = factorial(b)

    division_result = b_fact // a_fact

    return last_digit(division_result)
```"
48,Write a python function to set all odd bits of a given number.,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","```python
def set_odd_bits(n):
    mask = 0xAAAAAAAA
    return n | mask
```

Alternatively, you can also use a loop to set odd bits:

```python
def set_odd_bits(n):
    result = n
    i = 1
    while i <= n:
        result |= i
        i <<= 2
    return result
```"
49,Write a function to extract every first or specified element from a given two-dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","```python
def extract_elements(matrix, index=0):
    if matrix:
        try:
            return [row[index] for row in matrix]
        except IndexError:
            raise ValueError(""Index out of range"")
    else:
        return []
```"
50,Write a function to find the list with minimum length using lambda function.,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","```python
find_min_length_list = lambda lists: min(lists, key=len)
```

You can use this function by passing a list of lists as an argument:

```python
lists_of_lists = [[1, 2, 3], [4], [5, 6]]
min_length_list = find_min_length_list(lists_of_lists)
```"
51,Write a function to print check if the triangle is equilateral or not.,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","```python
def check_equilateral(a, b, c):
    if a == b == c:
        return True
    else:
        return False
```

or 

```python
def check_equilateral(a, b, c):
    return a == b == c
```"
52,Write a function to caluclate area of a parallelogram.,"def parallelogram_area(b,h):
  area=b*h
  return area","```python
def calculate_parallelogram_area(base, height):
    return base * height
```"
53,Write a python function to check whether the first and last characters of a given string are equal or not.,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","```python
def check_first_last_characters(s):
    if len(s) > 0:
        return s[0] == s[-1]
    else:
        return False
```"
54,Write a function to sort the given array by using counting sort.,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","```python
def counting_sort(array):
    size = len(array)
    output = [0] * size
    count = [0] * 10

    for i in range(0, size):
        index = array[i]
        count[index] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = size - 1
    while i >= 0:
        index = array[i]
        output[count[index] - 1] = array[i]
        count[index] -= 1
        i -= 1

    for i in range(0, size):
        array[i] = output[i]

    return array
```"
55,Write a function to find t-nth term of geometric series.,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","```python
def nth_term_geometric_series(a, r, n):
    if abs(r) >= 1:
        raise ValueError(""Common ratio 'r' must be between -1 and 1"")
    return a * (r ** (n - 1))
```"
56,Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","```python
def is_one_less_than_twice_reverse(n):
    reversed_n = int(str(abs(n))[::-1])
    if n < 0:
        return -n == 2 * reversed_n - 1
    else:
        return n == 2 * reversed_n - 1
```"
57,Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","```python
def largest_number(digits):
    digits = list(map(str, digits))
    digits.sort(key=lambda x: x*3, reverse=True)
    result = ''.join(digits).lstrip('0')
    return int(result) if result else 0
```"
58,Write a python function to check whether the given two integers have opposite sign or not.,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","```python
def check_opposite_sign(a: int, b: int) -> bool:
    """"""
    Checks whether two integers have opposite signs.
    
    Args:
        a (int): The first integer.
        b (int): The second integer.
    
    Returns:
        bool: True if the integers have opposite signs, False otherwise.
    """"""
    return (a >= 0 and b < 0) or (a < 0 and b >= 0)
```"
59,Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","```python
def nth_octagonal_number(n):
    return n * (3 * n - 2)
```"
60,Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max","```python
def max_len_diff(arr):
    n = len(arr)
    if n < 2:
        return n

    dp = [1] * n
    for i in range(1, n):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
```"
61,Write a python function to count number of substrings with the sum of digits equal to their length.,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","```python
def count_substrings(s):
    def digit_sum(n):
        return sum(int(digit) for digit in str(n))

    count = 0
    n = len(s)
    for i in range(n):
        for j in range(i + 1, n + 1):
            substring_length = j - i
            if digit_sum(substring_length) == substring_length:
                count += 1
    return count
```"
62,Write a python function to find smallest number in a list.,"def smallest_num(xs):
  return min(xs)
","```python
def find_smallest_number(num_list):
    if len(num_list) == 0:
        raise ValueError(""List cannot be empty"")
    return min(num_list)
```"
63,Write a function to find the maximum difference between available pairs in the given tuple list.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","```python
def max_difference(tuple_list):
    differences = []
    for i in range(len(tuple_list)):
        for j in range(i + 1, len(tuple_list)):
            difference = abs(max(tuple_list[i]) - min(tuple_list[j]))
            differences.append(difference)
            difference = abs(min(tuple_list[i]) - max(tuple_list[j]))
            differences.append(difference)
    return max(differences)
```"
64,Write a function to sort a list of tuples using lambda.,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","```python
def sort_tuple_list(tuple_list):
    return sorted(tuple_list, key=lambda x: (x[0], x[1]))
```"
65,Write a function of recursion list sum.,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","```python
def recursive_list_sum(lst):
    if len(lst) == 1:
        return lst[0]
    else:
        return lst[0] + recursive_list_sum(lst[1:])
```"
66,Write a python function to count positive numbers in a list.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ","```python
def count_positive_numbers(num_list):
    return sum(1 for num in num_list if isinstance(num, (int, float)) and num > 0)
```

Let me know if you'd like me to adjust the formatting or add anything else!"
67,Write a function to find the number of ways to partition a set of bell numbers.,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ","```python
def count_partitions(n):
    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    bell[0][0] = 1

    for i in range(1, n + 1):
        bell[i][0] = bell[i - 1][i - 1]
        for j in range(1, i + 1):
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]

    return sum(bell[n])
```"
68,Write a python function to check whether the given array is monotonic or not.,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","```python
def is_monotonic(arr):
    increasing = decreasing = True
    
    for i in range(len(arr) - 1):
        if arr[i] > arr[i + 1]:
            increasing = False
        elif arr[i] < arr[i + 1]:
            decreasing = False
            
    return increasing or decreasing
```"
69,Write a function to check whether a list contains the given sublist or not.,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set","```python
def is_sublist(main_list, sub_list):
    len_sub_list = len(sub_list)
    for i in range(len(main_list) - len_sub_list + 1):
        if main_list[i:i+len_sub_list] == sub_list:
            return True
    return False
```"
70,Write a function to find whether all the given tuples have equal length or not.,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","```python
def all_tuples_equal_length(tuples_list):
    if len(set(map(len, tuples_list))) == 1:
        return True
    else:
        return False
```"
71,Write a function to sort a list of elements using comb sort.,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","```python
def comb_sort(arr):
    def get_next_gap(gap):
        gap = (gap * 10) // 13
        if gap < 1:
            return 1
        return gap

    n = len(arr)
    gap = n
    swapped = True

    while gap != 1 or swapped:
        gap = get_next_gap(gap)
        swapped = False

        for i in range(0, n - gap):
            j = i + gap
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
                swapped = True

    return arr
```"
72,Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","```python
def is_difference_of_squares(n):
    if n < 0:
        return False
    sqrt = int(n**0.5)
    for i in range(sqrt + 1):
        j = (n + i * i) ** 0.5
        if j == int(j):
            return True
    return False
```"
73,Write a function to split the given string with multiple delimiters by using regex.,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","```python
import re

def split_string_with_multiple_delimiters(input_str):
    delimiters = ["","", "";"", "":"", ""-"", ""_""]
    pattern = ""|"".join(map(re.escape, delimiters))
    return re.split(pattern, input_str)
```"
74,Write a function to check whether it follows the sequence given in the patterns array.,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","```python
def check_sequence(text, patterns):
    for pattern in patterns:
        sequence = [char for char in text if char in pattern]
        if sequence != sorted(set(sequence)):
            return False
    return True
```

Please note that the function `check_sequence` assumes that the input parameters `text` and `patterns` are of type string. It also considers each character in the pattern as a distinct element for the purpose of this problem.

If you want to treat repeating characters in patterns as the same element, here is another version:

```python
def check_sequence(text, patterns):
    for pattern in patterns:
        sequence = [char for char in text if char in set(pattern)]
        if len(set(sequence)) != len(set(pattern)):
            return False
    return True
```

This function will ignore duplicate characters in the `patterns`."
75,Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","```python
def find_divisible_tuples(tuples_list, k):
    return [t for t in tuples_list if all(i % k == 0 for i in t)]
```"
76,Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","```python
def count_squares(length, width):
    if length < 1 or width < 1:
        raise ValueError(""Length and width must be positive integers"")
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    side_length = gcd(length, width)
    num_squares = (length // side_length) * (width // side_length)
    return num_squares
```"
77,Write a python function to find the difference between sum of even and odd digits.,"def is_Diff(n): 
    return (n % 11 == 0) ","```python
def difference_even_odd_digits(n):
    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)
    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)
    return abs(even_sum - odd_sum)
```"
78,Write a python function to find number of integers with odd number of set bits.,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","```python
def count_odd_set_bits():
    def count_set_bits(n):
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count

    max_value = int(2 ** 32 - 1)
    count = 0
    for i in range(max_value + 1):
        if count_set_bits(i) % 2 != 0:
            count += 1
    return count
```"
79,Write a python function to check whether the length of the word is odd or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False","```python
def is_word_length_odd(word):
    return len(word) % 2 != 0
```

Alternatively, you can also write it as:

```python
def is_word_length_odd(word):
    return bool(len(word) & 1)
```"
80,Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","```python
def nth_tetrahedral_number(n):
    """"""
    Calculate the nth tetrahedral number.
    
    A tetrahedral number can be represented as Tn = (n*(n+1)*(n+2))/6 for any positive integer n.

    Parameters:
    n (int): The position of the tetrahedral number to calculate.

    Returns:
    int: The nth tetrahedral number.
    """"""
    return (n * (n + 1) * (n + 2)) // 6
```"
81,Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","```python
def zip_tuples(tuple1, tuple2):
    return list(zip(tuple1, tuple2))
```"
82,Write a function to find the volume of a sphere.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","```python
import math

def sphere_volume(radius):
    if radius < 0:
        raise ValueError(""Radius cannot be negative"")
    return (4/3) * math.pi * (radius ** 3)
```"
83,Write a python function to find the character made by adding all the characters of the given string.,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)","```python
def add_characters(s):
    total = 0
    for char in s:
        if char.isalpha():
            if char.isupper():
                total += ord(char) - 64
            else:
                total += ord(char) - 96
    return chr(total)
```

This function works by iterating over each character in the string. If the character is a letter (checked using `isalpha()`), it calculates its corresponding numerical value (A=1, B=2, ..., Z=26 for uppercase letters and a=1, b=2, ..., z=26 for lowercase letters) and adds this to a running total. The function then returns the character represented by this total value using the `chr` function.

However, note that since you're adding up all these values, unless your string is very short or contains mostly non-alphabetical characters, the result will probably be outside the range of printable ASCII characters and so won't correspond to any visible character."
84,Write a function to find the n-th number in newman conway sequence.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","```python
def newman_conway(n):
    sequence = [0, 1]
    while len(sequence) < n + 2:
        next_value = sequence[-1] + sequence[sequence[-1]]
        sequence.append(next_value)
    return sequence[n]
```"
85,Write a function to find the surface area of a sphere.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","```python
import math

def surface_area_of_sphere(radius):
    if radius < 0:
        raise ValueError(""Radius cannot be negative"")
    return 4 * math.pi * (radius ** 2)
```"
86,Write a function to find nth centered hexagonal number.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","```python
def nth_centered_hexagonal(n):
    if n <= 0:
        raise ValueError(""Input must be a positive integer."")
    return (3 * n**2 - 3 * n + 1)
```"
87,Write a function to merge three dictionaries into a single expression.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","```python
def merge_dictionaries(dict1, dict2, dict3):
    merged_dict = {**dict1, **dict2, **dict3}
    for key in merged_dict:
        if isinstance(merged_dict[key], list):
            merged_dict[key] = sorted(list(set(merged_dict[key])))
    return merged_dict
```"
88,Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","```python
def get_frequency(lst):
    frequency = {}
    for element in lst:
        if element in frequency:
            frequency[element] += 1
        else:
            frequency[element] = 1
    return frequency
```"
89,Write a function to find the closest smaller number than n.,"def closest_num(N):
  return (N - 1)","```python
def find_closest_smaller(nums, n):
    nums.sort()
    for num in reversed(nums):
        if num < n:
            return num
    return None
```"
90,Write a python function to find the length of the longest word.,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","```python
def find_longest_word_length(sentence):
    words = sentence.split()
    return max(len(word) for word in words)
```"
91,Write a function to check if a substring is present in a given list of string values.,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","```python
def check_substring(strings, substring):
    return any(substring in string for string in strings)
```
or 
```python
def check_substring(strings, substring):
    for string in strings:
        if substring in string:
            return True
    return False
```"
92,Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","```python
def is_undulating(n):
    n = str(abs(n))
    if len(n) < 3:
        return False
    for i in range(len(n)-2):
        if (int(n[i]) > int(n[i+1]) and int(n[i+1]) < int(n[i+2])) or (int(n[i]) < int(n[i+1]) and int(n[i+1]) > int(n[i+2])):
            pass
        else:
            return False
    return True
```"
93,Write a function to calculate the value of 'a' to the power 'b'.,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","```python
def calculate_power(base, exponent):
    if base == 0:
        if exponent > 0:
            return 0
        elif exponent < 0:
            raise ZeroDivisionError(""Cannot divide by zero"")
    if exponent == 0:
        return 1
    if exponent < 0:
        return 1 / calculate_power(base, -exponent)
    half_exponent = calculate_power(base, exponent // 2)
    if exponent % 2 == 0:
        return half_exponent * half_exponent
    else:
        return base * half_exponent * half_exponent
```"
94,Write a function to extract the index minimum value record from the given tuples.,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","```python
def extract_min_index_record(records):
    if not records:
        return None
    
    min_val = float('inf')
    min_idx = -1
    
    for idx, rec in enumerate(records):
        val = rec[0]
        
        if val < min_val:
            min_val = val
            min_idx = idx
            
    return records[min_idx] if min_idx != -1 else None
```"
95,Write a python function to find the minimum length of sublist.,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","```python
def min_length_sublist(lst):
    if len(lst) == 0:
        return None
    return min(len(sublist) for sublist in lst)
```"
96,Write a python function to find the number of divisors of a given integer.,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","```python
def count_divisors(n):
    count = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            if n // i == i:
                count += 1
            else:
                count += 2
    return count
```"
97,Write a function to find frequency count of list of lists.,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","```python
from collections import Counter

def find_frequency_count(list_of_lists):
    flattened_list = [item for sublist in list_of_lists for item in sublist]
    frequency_count = dict(Counter(flattened_list))
    return frequency_count
```

Alternatively, you can use the `itertools.chain` function to flatten the list of lists:

```python
from collections import Counter
import itertools

def find_frequency_count(list_of_lists):
    flattened_list = list(itertools.chain(*list_of_lists))
    frequency_count = dict(Counter(flattened_list))
    return frequency_count
```

Or, you can use a dictionary comprehension with the `collections.Counter` object:

```python
from collections import Counter

def find_frequency_count(list_of_lists):
    flattened_list = [item for sublist in list_of_lists for item in sublist]
    frequency_count = {k: v for k, v in Counter(flattened_list).items()}
    return frequency_count
```

However, the first version is likely to be the most efficient and readable."
98,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","```python
def multiply_divide_list(numbers):
    if len(numbers) == 0:
        raise ValueError(""List cannot be empty"")
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
```"
99,Write a function to convert the given decimal number to its binary equivalent.,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","```python
def decimal_to_binary(n):
    if n == 0:
        return '0'
    binary = ''
    while n > 0:
        remainder = n % 2
        binary = str(remainder) + binary
        n = n // 2
    return binary
```"
100,Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","```python
def next_smallest_palindrome(n):
    n += 1
    while True:
        if str(n) == str(n)[::-1]:
            return n
        n += 1
```"
101,Write a function to find the kth element in the given array.,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","```python
def find_kth_element(array, k):
    if k < 1 or k > len(array):
        raise ValueError(""k is out of range"")
    return array[k - 1]
```"
102,Write a function to convert snake case string to camel case string.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","```python
def snake_to_camel(snake_case_str):
    components = snake_case_str.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
```"
103,"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","```python
def eulerian_number(n, m):
    def factorial(x):
        if x == 0:
            return 1
        else:
            return x * factorial(x - 1)
            
    result = 0
    for k in range(m + 1):
        result += ((-1) ** (m - k)) * (factorial(m) / (factorial(k) * factorial(m - k))) * (n ** k)
    return int(result)
```"
104,Write a function to sort each sublist of strings in a given list of lists using lambda function.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
","```python
def sort_sublists(lst):
    return list(map(lambda x: sorted(x), lst))
```

Alternatively, you can use a list comprehension:

```python
def sort_sublists(lst):
    return [sorted(sublist) for sublist in lst]
```"
105,Write a python function to count true booleans in the given list.,"def count(lst):   
    return sum(lst) ","```python
def count_true_booleans(bool_list):
    return sum(1 for bool_val in bool_list if bool_val)
```"
106,Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","```python
def add_list_to_tuple(given_list, given_tuple):
    result = tuple(list(given_tuple) + given_list)
    return result
```"
107,Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","```python
def count_hexadecimal_numbers(start, end):
    count = 0
    for num in range(start, end + 1):
        if all(c in '0123456789ABCDEFabcdef' for c in hex(num)[2:]):
            count += 1
    return count
```"
108,Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","```python
import heapq

def merge_sorted_iterators(*iterables):
    heap = []
    for i, it in enumerate(iterables):
        try:
            val = next(it)
            heapq.heappush(heap, (val, i))
        except StopIteration:
            pass
    
    while heap:
        val, i = heapq.heappop(heap)
        yield val
        try:
            val = next(iterables[i])
            heapq.heappush(heap, (val, i))
        except StopIteration:
            pass
```"
109,Write a python function to find the count of rotations of a binary string with odd value.,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","```python
def count_rotations(s):
    n = len(s)
    if n % 2 == 0:
        return -1
    
    rotations = [s[i:] + s[:i] for i in range(n)]
    
    count = sum(1 for r in rotations if int(r, 2) % 2 != 0)
    
    return count
```"
110,Write a function to extract the ranges that are missing from the given list with the given start range and end range values.,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","```python
def find_missing_ranges(given_list, start_range, end_range):
    if given_list:
        missing_ranges = []
        
        if start_range < min(given_list):
            missing_ranges.append((start_range, min(given_list) - 1))
            
        for i in range(len(given_list) - 1):
            if given_list[i] + 1 < given_list[i+1]:
                missing_ranges.append((given_list[i] + 1, given_list[i+1] - 1))
                
        if max(given_list) < end_range:
            missing_ranges.append((max(given_list) + 1, end_range))
            
        return missing_ranges
    else:
        return [(start_range, end_range)]
```"
111,Write a function to find common elements in given nested lists. * list item * list item * list item * list item,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","```python
def find_common_elements(*lists):
    flat_lists = [item for sublist in lists for item in sublist]
    common_elements = set(flat_lists[0])
    for lst in flat_lists[1:]:
        common_elements &= set(lst)
    return list(common_elements)
```"
112,Write a python function to find the perimeter of a cylinder.,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ","```python
import math

def cylinder_perimeter(radius, height):
    circumference = 2 * math.pi * radius
    perimeter = 2 * (circumference + height)
    return perimeter
```"
113,Write a function to check if a string represents an integer or not.,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","```python
def represents_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
```"
114,Write a function to assign frequency to each tuple in the given tuple list.,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ","```python
def assign_frequency(tuple_list):
    frequency_dict = {}
    for tup in tuple_list:
        if tup in frequency_dict:
            frequency_dict[tup] += 1
        else:
            frequency_dict[tup] = 1
    return frequency_dict
```"
115,Write a function to check whether all dictionaries in a list are empty or not.,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit","```python
def all_dictionaries_empty(dict_list):
    """"""
    Checks whether all dictionaries in a list are empty.

    Args:
        dict_list (list): A list of dictionaries.

    Returns:
        bool: True if all dictionaries in the list are empty, False otherwise.
    """"""
    return all(not d for d in dict_list)
```"
116,Write a function to convert a given tuple of positive integers into an integer.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result","```python
def convert_tuple_to_int(tup):
    if len(tup) == 1:
        return tup[0]
    else:
        return int(''.join(map(str, tup)))
```"
117,Write a function to convert all possible convertible elements in the list to float.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ","```python
def convert_to_float(lst):
    result = []
    for elem in lst:
        try:
            result.append(float(elem))
        except ValueError:
            result.append(elem)
    return result
```"
118,[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst","```
def convert_string_to_list(input_string):
    return [char for char in input_string]
```"
119,Write a python function to find the element that appears only once in a sorted array.,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)","```python
def find_single_element(nums):
    if len(nums) == 1:
        return nums[0]
    result = 0
    for num in nums:
        result ^= num
    return result
```"
120,Write a function to find the maximum product from the pairs of tuples within a given list.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max","```python
def max_product_from_pairs(tuple_list):
    if len(tuple_list) < 2:
        raise ValueError(""List must contain at least two tuples"")
    
    max_product = float('-inf')
    for i in range(len(tuple_list)):
        for j in range(i + 1, len(tuple_list)):
            pair_product = tuple_list[i][0] * tuple_list[j][1]
            if pair_product > max_product:
                max_product = pair_product
                
    return max_product
```"
121,Write a function to find the triplet with sum of the given array,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)","```python
def find_triplet(arr, target_sum):
    arr.sort()
    triplets = []
    
    for i in range(len(arr) - 2):
        if i > 0 and arr[i] == arr[i - 1]:
            continue
        
        left, right = i + 1, len(arr) - 1
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            
            if current_sum == target_sum:
                triplets.append([arr[i], arr[left], arr[right]])
                left += 1
                right -= 1
                
                while left < right and arr[left] == arr[left - 1]:
                    left += 1
                    
                while left < right and arr[right] == arr[right + 1]:
                    right -= 1
                    
            elif current_sum < target_sum:
                left += 1
                
            else:
                right -= 1
                
    return triplets
```"
122,Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","```python
def is_smart_number(n):
    i = 1
    while True:
        if ((i * i) + (n - 1)) % n == 0:
            return True
        elif ((i * i) + (n - 1)) % n != 0 and i > n:
            return False
        else:
            i += 1

def nth_smart_number(n):
    count = 0
    i = 2
    while True:
        if is_smart_number(i):
            count += 1
            if count == n:
                return i
        i += 1
```"
123,Write a function to sum all amicable numbers from 1 to a specified number.,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)","```python
def sum_amicable_numbers(n):
    def proper_divisors(num):
        divisors = set()
        for i in range(1, num):
            if num % i == 0:
                divisors.add(i)
        return divisors

    def sum_of_proper_divisors(num):
        return sum(proper_divisors(num))

    amicable_pairs = set()

    for a in range(1, n + 1):
        b = sum_of_proper_divisors(a)

        if a != b and a < n and b < n:
            if sum_of_proper_divisors(b) == a:
                pair = tuple(sorted((a, b)))
                amicable_pairs.add(pair)

    return sum(sum(pair) for pair in amicable_pairs)
```"
124,Write a function to get the angle of a complex number.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle","```python
import math
def get_angle(complex_number):
    return math.atan2(complex_number.imag, complex_number.real)
```"
125,Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0","```python
def max_difference(s):
    max_diff = 0
    count_1 = s.count('1')
    count_0 = len(s) - count_1
    
    for i in range(len(s)):
        if s[i] == '1':
            count_1 -= 1
        else:
            count_0 -= 1
        max_diff = max(max_diff, abs(count_1 - count_0))
    
    return max_diff
```"
126,Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum","```python
def sum_of_common_divisors(num1, num2):
    def get_divisors(n):
        divisors = set()
        for i in range(1, int(n ** 0.5) + 1):
            if n % i == 0:
                divisors.add(i)
                divisors.add(n // i)
        return divisors

    common_divisors = get_divisors(num1) & get_divisors(num2)
    return sum(common_divisors)
```"
127,Write a function to multiply two integers without using the * operator in python.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)","```python
def multiply(a, b):
    result = 0
    for _ in range(abs(b)):
        result += abs(a)
    if (a < 0 and b < 0) or (a > 0 and b > 0):
        return result
    else:
        return -result
```"
128,Write a function to shortlist words that are longer than n from a given list of words.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	","```python
def shortlist_words(words, n):
    return [word for word in words if len(word) > n]
```"
129,Write a function to calculate magic square.,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True","```python
def is_magic_square(square):
    if len(set(len(row) for row in square)) != 1:
        return False

    expected_sum = sum(square[0])
    for i in range(len(square)):
        row_sum = sum(square[i])
        column_sum = sum([row[i] for row in square])
        diagonal_sum1 = sum([square[j][j] for j in range(len(square))])
        diagonal_sum2 = sum([square[j][len(square) - 1 - j] for j in range(len(square))])

        if row_sum != expected_sum or column_sum != expected_sum:
            return False
        if i == 0 and (diagonal_sum1 != expected_sum or diagonal_sum2 != expected_sum):
            return False

    return True


def generate_magic_squares(n):
    def is_valid(board, row, col, num):
        for x in range(row):
            if board[x][col] == num:
                return False
        for y in range(col):
            if board[row][y] == num:
                return False
        return True

    def generate_magic_square_util(n, target_sum, current_sum=0, current_row=0):
        if current_sum > target_sum or (current_row * n) + current_sum > target_sum:
            return []

        if current_row == n:
            return [[1] * n]

        for i in range(1, n ** 2 + 1):
            result = generate_magic_square_util(n, target_sum, current_sum + i, current_row)
            if len(result) > 0:
                last_row = result[-1]
                last_row.append(i)
                return [last_row] + result[:-1]

        return []

    magic_squares = []
    for num in range(1, n ** 2 + 1):
        square = generate_magic_square_util(n, num * n, current_sum=0, current_row=0)
        if len(square) > 0 and is_magic_square(square):
            magic_squares.append(square)

    return magic_squares
```"
130,Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result","```python
def max_frequency_item(lst):
    frequency = {}
    for item in lst:
        if item in frequency:
            frequency[item] += 1
        else:
            frequency[item] = 1
    max_freq = max(frequency.values())
    return [item for item, freq in frequency.items() if freq == max_freq]
```"
131,Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","```python
def reverse_vowels(s):
    s = list(s)
    vowels = 'aeiouAEIOU'
    left, right = 0, len(s) - 1
    
    while left < right:
        if s[left] not in vowels:
            left += 1
        elif s[right] not in vowels:
            right -= 1
        else:
            s[left], s[right] = s[right], s[left]
            left, right = left + 1, right - 1
    
    return ''.join(s)
```"
132,Write a function to convert tuple to a string.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str","```python
def tuple_to_string(tup):
    if isinstance(tup, tuple):
        return str(tup)
    else:
        raise ValueError(""Input must be a tuple"")
```"
133,Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","```python
sum_of_negative_numbers = lambda numbers: sum(num for num in numbers if num < 0)
```"
134,Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ","```python
def check_last_element(arr, p):
    for _ in range(p):
        if len(arr) > 1:
            arr = [arr[-1]] + arr[:-2] + [arr[-2]]
        elif len(arr) == 1:
            continue
    return ""even"" if arr[-1] % 2 == 0 else ""odd""
```"
135,Write a function to find the nth hexagonal number.,"def hexagonal_num(n): 
	return n*(2*n - 1) ","```python
def nth_hexagonal_number(n):
    return n * (2 * n - 1)
```"
136,Write a function to calculate electricity bill.,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total","```python
def calculate_electricity_bill(units_consumed):
    if units_consumed <= 100:
        return units_consumed * 0.20
    elif units_consumed > 100 and units_consumed <= 300:
        fixed_charge = 100 * 0.20
        remaining_units = units_consumed - 100
        variable_charge = remaining_units * 0.25
        return fixed_charge + variable_charge
    else:
        fixed_charge = 100 * 0.20
        variable_charge_1 = 200 * 0.25
        remaining_units = units_consumed - 300
        variable_charge_2 = remaining_units * 0.30
        return fixed_charge + variable_charge_1 + variable_charge_2
```"
137,Write a function to find the ration of zeroes in an array of integers.,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","```python
def find_zero_ratio(array):
    if len(array) == 0:
        raise ZeroDivisionError(""Cannot calculate ratio for an empty array"")
    total_zeros = sum(1 for num in array if num == 0)
    return total_zeros / len(array)
```"
138,Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True","```python
def is_sum_of_powers_of_two(n):
    i = 0
    while n > 0:
        if n % 2 == 1:
            n //= 2
        else:
            return False
        i += 1
    return True
```

Alternatively, a more concise version can be written as:

```python
def is_sum_of_powers_of_two(n):
    while n > 0 and n % 2 != 0:
        n //= 2
    return n == 0
```"
139,Write a function to find the circumference of a circle.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","```python
import math

def find_circumference(radius):
    if radius < 0:
        raise ValueError(""Radius cannot be negative"")
    return 2 * math.pi * radius
```"
140,Write a function to extract elements that occur singly in the given tuple list.,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ","```python
def extract_single_elements(tuple_list):
    single_occurrence_dict = {}
    for tup in tuple_list:
        for element in tup:
            if element not in single_occurrence_dict:
                single_occurrence_dict[element] = 1
            else:
                single_occurrence_dict[element] += 1

    return [element for element, count in single_occurrence_dict.items() if count == 1]
```"
141,Write a function to sort a list of elements using pancake sort.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums","```python
def pancake_sort(arr):
    n = len(arr)
    while n > 1:
        max_index = arr.index(max(arr[:n]))
        if max_index == n - 1:
            n -= 1
            continue
        elif max_index != 0:
            arr[:max_index + 1] = arr[:max_index + 1][::-1]
        arr[:n] = arr[:n][::-1]
        n -= 1
    return arr
```"
142,Write a function to count the same pair in three given lists.,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result","```python
def count_common_pairs(list1, list2, list3):
    common_elements = set(list1) & set(list2) & set(list3)
    pair_counts = {}
    
    for element in common_elements:
        count_list1 = list1.count(element)
        count_list2 = list2.count(element)
        count_list3 = list3.count(element)
        
        min_count = min(count_list1, count_list2, count_list3)
        if element not in pair_counts or pair_counts[element] < min_count:
            pair_counts[element] = min_count
    
    return sum(pair_counts.values())
```"
143,Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ","```python
def count_lists_in_tuple(tup):
    return sum(isinstance(item, list) for item in tup)
```"
144,Write a python function to find the sum of absolute differences in all pairs of the given array.,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum","```python
def sum_of_absolute_differences(arr):
    n = len(arr)
    total_sum = 0
    for i in range(n-1):
        for j in range(i+1, n):
            total_sum += abs(arr[i] - arr[j])
    return total_sum * 2
```"
145,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ","```python
def max_difference(array):
    if len(array) < 2:
        return None
    return max(array) - min(array)
```"
146,Write a function to find the ascii value of total characters in a string.,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])","```python
def ascii_value(s):
    return sum(ord(c) for c in s)
```"
147,Write a function to find the maximum total path sum in the given triangle.,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]","```python
def maximumTotalPathSum(triangle):
    n = len(triangle)
    dp = [[0]*n for _ in range(n)]
    dp[0][0] = triangle[0][0]
    for i in range(1, n):
        dp[i][0] = dp[i-1][0] + triangle[i][0]
        dp[i][-1] = dp[i-1][-1] + triangle[i][-1]
        for j in range(1, len(triangle[i])-1):
            dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]
    return max(dp[-1])
```"
148,Write a function to divide a number into two parts such that the sum of digits is maximum.,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ","```python
def max_digit_sum(num):
    num_str = str(num)
    max_sum = 0
    res = [0, 0]
    
    for i in range(1, len(num_str)):
        a = int(num_str[:i])
        b = int(num_str[i:])
        digit_sum_a = sum(int(digit) for digit in str(a))
        digit_sum_b = sum(int(digit) for digit in str(b))
        
        if digit_sum_a + digit_sum_b > max_sum:
            max_sum = digit_sum_a + digit_sum_b
            res = [a, b]
            
    return res
```"
149,Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result","```python
def longest_subsequence(arr):
    n = len(arr)
    dp = [[0 for _ in range(2)] for _ in range(n)]

    max_length = 1

    for i in range(1, n):
        if arr[i] - arr[i-1] == 1:
            dp[i][0] = dp[i-1][0] + 1
        elif arr[i] - arr[i-1] == -1:
            dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + 1

        max_length = max(max_length, dp[i][0], dp[i][1])

    return max_length
```"
150,Write a python function to find whether the given number is present in the infinite sequence or not.,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False","```python
import math

def is_in_sequence(n):
    if n < 0:
        return False
    sqrt = math.sqrt(8 * n + 1)
    return sqrt == int(sqrt) or (5 + sqrt) % 4 == 0
```"
151,Write a python function to check whether the given number is co-prime or not.,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1","```python
def is_coprime(a, b):
    def gcd(x, y):
        while(y):
            x, y = y, x % y
        return x

    if gcd(a, b) == 1:
        return True
    else:
        return False
```

Alternatively, you can also use the math.gcd function from Python's standard library to make it more concise:

```python
import math

def is_coprime(a, b):
    return math.gcd(a, b) == 1
```"
152,Write a function to sort the given array by using merge sort.,"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
","```python
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]
    
    return merge(merge_sort(left_half), merge_sort(right_half))


def merge(left, right):
    merged = []
    left_index = 0
    right_index = 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1
    
    merged.extend(left[left_index:])
    merged.extend(right[right_index:])

    return merged
```"
153,Write a function to find the vertex of a parabola.,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex","```python
def find_vertex(a, b, c):
    h = -b / (2 * a)
    k = a * h**2 + b * h + c
    return (h, k)
```

Please let me know if I can assist further with anything else."
154,Write a function to extract every specified element from a given two dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result","```python
def extract_elements(matrix, step):
    return [row[i] for i in range(0, len(matrix[0]), step) for row in matrix]
```"
155,Write a python function to toggle all even bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","```python
def toggle_even_bits(n):
    mask = 0xAAAAAAAA
    return n ^ mask
```"
156,Write a function to convert a tuple of string values to a tuple of integer values.,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result","```python
def convert_to_int(tuple_str):
    try:
        return tuple(int(i) for i in tuple_str)
    except ValueError:
        raise TypeError(""The input tuple contains non-integer string values."")
```

You can use this function like this:

`convert_to_int((""1"", ""2"", ""3""))`  # Returns: (1, 2, 3)"
157,Write a function to reflect the run-length encoding from a list.,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]","```python
def reflect_run_length_encoding(encoded_list):
    decoded_list = []
    for i in range(len(encoded_list)):
        if i % 2 == 0:
            value = encoded_list[i]
        else:
            count = int(encoded_list[i])
            decoded_list.extend([value] * count)
    return decoded_list
```"
158,Write a python function to find k number of operations required to make all elements equal.,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ","```python
def min_operations(nums):
    nums.sort()
    median = nums[len(nums) // 2]
    operations = sum(abs(num - median) for num in nums)
    return operations
```

Alternatively, to handle cases where `k` is not necessarily the median and can be any number:

```python
def min_operations(nums, k):
    operations = sum(abs(num - k) for num in nums)
    return operations
```"
159,Write a function to print the season for the given month and day.,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season","```python
def get_season(month, day):
    if (month == 12 and day >= 21) or (month < 3):
        return ""Winter""
    elif (month < 6) or (month == 6 and day <= 20):
        return ""Spring""
    elif (month < 9) or (month == 9 and day <= 22):
        return ""Summer""
    else:
        return ""Autumn""
```"
160,Write a function to find x and y that satisfies ax + by = n.,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ","```python
def find_x_y(a, b, n):
    for x in range(n + 1):
        y = (n - a * x) / b
        if y == int(y):
            return x, int(y)
```

Please note that this function might not work correctly for all inputs because it does not handle cases where 'a' and 'b' do not have a common divisor with 'n'. It simply tries values of 'x' from 0 to 'n', calculates the corresponding 'y', and returns as soon as it finds integer values. For a more robust solution, you might need to use a different approach, such as using the extended Euclidean algorithm or checking for existence of solutions before trying to find them."
161,Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","```python
def remove_elements(list1, list2):
    for element in list2:
        while element in list1:
            list1.remove(element)
    return list1
```"
162,Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","```python
def sum_positive_integers(n):
    total = 0
    i = 0
    while n - 2 * i > 0:
        total += n - 2 * i
        i += 1
    return total
```"
163,Write a function to calculate the area of a regular polygon.,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area","```python
import math

def calculate_polygon_area(n_sides, side_length):
    return (n_sides * side_length**2) / (4 * math.tan(math.pi/n_sides))
```"
164,Write a python function to check whether the sum of divisors are same or not.,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ","```python
def are_sum_of_divisors_same(num1, num2):
    def sum_of_divisors(n):
        return sum(i for i in range(1, n + 1) if n % i == 0)
    
    return sum_of_divisors(num1) == sum_of_divisors(num2)
```"
165,Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ","```python
def count_alphabet_position(string):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    counts = {char: 0 for char in alphabet}
    for i, char in enumerate(string.lower()):
        if char.isalpha():
            position = ord(char) - ord('a')
            counts[alphabet[position]] += 1
    return counts
```"
166,Write a python function to count the pairs with xor as an even number.,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ","```python
def count_even_xor_pairs(arr):
    n = len(arr)
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if (arr[i] ^ arr[j]) % 2 == 0:
                count += 1
    return count
```"
167,Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","```python
def smallest_power_of_two(n):
    i = 1
    while i < n:
        i <<= 1
    return i
```"
168,Write a python function to find the frequency of a number in a given array.,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ","```python
def find_frequency(array, num):
    frequency = array.count(num)
    return frequency
```

Or using dictionary for better performance when dealing with large arrays:

```python
def find_frequency(array, num):
    frequency_dict = {}
    for i in array:
        if i in frequency_dict:
            frequency_dict[i] += 1
        else:
            frequency_dict[i] = 1
    return frequency_dict.get(num, 0)
```

Or using collections module:

```python
from collections import Counter

def find_frequency(array, num):
    counter = Counter(array)
    return counter.get(num, 0)
```"
169,Write a function to calculate the nth pell number.,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ","```python
def nth_pell_number(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, 2 * b + a
        return b
```"
170,Write a function to find sum of the numbers in a list between the indices of a specified range.,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ","```python
def sum_between_indices(lst, start_idx, end_idx):
    if not isinstance(lst, list) or not all(isinstance(x, (int, float)) for x in lst):
        raise TypeError(""Input must be a list of numbers"")
    
    if not (isinstance(start_idx, int) and isinstance(end_idx, int)):
        raise TypeError(""Start and end indices must be integers"")

    if start_idx < 0 or end_idx >= len(lst) or start_idx > end_idx:
        raise ValueError(""Invalid index range"")

    return sum(lst[start_idx + 1:end_idx])
```"
171,Write a function to find the perimeter of a pentagon.,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter","```python
import math

def pentagon_perimeter(side_length):
    if side_length <= 0:
        raise ValueError(""Side length must be a positive number"")
    return 5 * side_length
```
No, I apologize, but this is not correct since the function does not correctly calculate the perimeter of any given pentagon. A regular pentagon's perimeter can indeed be calculated by multiplying its side length by five; however, an irregular pentagon's perimeter cannot be accurately found without knowing the lengths of all five sides.

Here's a more accurate and useful function that takes into account all possible types of pentagons:

```python
def pentagon_perimeter(*sides):
    if len(sides) != 5:
        raise ValueError(""A pentagon must have exactly 5 sides"")
    if any(side <= 0 for side in sides):
        raise ValueError(""All side lengths must be positive numbers"")
    return sum(sides)
```"
172,Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count","```python
def find_std_occurrence(s):
    return s.count('std')
```

However, since you mentioned that there are supposed to be nested lists in your original request, I'll provide a revised version of the function that takes into account the actual task of finding occurrences of 'std' in strings within nested lists:

```python
def find_std_occurrence(nested_list):
    count = 0
    for item in nested_list:
        if isinstance(item, list):
            count += find_std_occurrence(item)
        elif isinstance(item, str):
            count += item.count('std')
    return count
```"
173,Write a function to remove everything except alphanumeric characters from a string.,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))","```python
def remove_non_alphanumeric(input_string):
    return ''.join(char for char in input_string if char.isalnum())
```"
174,Write a function to group a sequence of key-value pairs into a dictionary of lists.,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result","```python
def group_key_value_pairs(pairs):
    result = {}
    for key, value in pairs:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result
```"
175,Write a function to verify validity of a string of parentheses.,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0","```python
def is_valid_parentheses(s):
    stack = []
    mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if not stack or mapping[char] != stack.pop():
                return False
                
    return not stack
```"
176,Write a function to find the perimeter of a triangle.,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","```python
def calculate_triangle_perimeter(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        raise ValueError(""The sides cannot form a triangle"")
    return a + b + c
```"
177,Write a python function to find two distinct numbers such that their lcm lies within the given range.,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ","```python
import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def find_numbers(r1, r2):
    for i in range(1, r2+1):
        for j in range(i+1, r2+1):
            lcm = (i*j)//math.gcd(i,j)
            if r1 <= lcm <= r2:
                return [i, j]
```"
178,Write a function to search some literals strings in a string.,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')","```python
def search_literals(main_string, literals):
    return {literal: literal in main_string for literal in literals}
```"
179,Write a function to find if the given number is a keith number or not.,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ","```python
def is_keith_number(n):
    digits = [int(d) for d in str(n)]
    sequence = digits[:]
    while True:
        next_num = sum(sequence[-len(digits):])
        if next_num == n:
            return True
        elif next_num > n or len(str(next_num)) != len(str(n)):
            return False
        sequence.append(next_num)
```"
180,Write a function to calculate distance between two points using latitude and longitude.,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist","```python
import math

def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371  # Radius of the Earth in kilometers
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(math.radians(lat1)) \
        * math.cos(math.radians(lat2)) * math.sin(dlon / 2) * math.sin(dlon / 2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c
```"
181,Write a function to find the longest common prefix in the given set of strings.,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ","```python
def longest_common_prefix(strs):
    if not strs:
        return """"
    
    shortest_str = min(strs, key=len)
    
    for i, char in enumerate(shortest_str):
        for other in strs:
            if other[i] != char:
                return shortest_str[:i]
    
    return shortest_str
```"
182,"Write a function to find uppercase, lowercase, special character and numeric values using regex.","import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","```python
import re

def count_characters(s):
    uppercase = len(re.findall(r'[A-Z]', s))
    lowercase = len(re.findall(r'[a-z]', s))
    special_char = len(re.findall(r'[^A-Za-z0-9]', s))
    numeric = len(re.findall(r'\d', s))
    return {
        ""uppercase"": uppercase,
        ""lowercase"": lowercase,
        ""special_char"": special_char,
        ""numeric"": numeric
    }
```"
183,Write a function to count all the distinct pairs having a difference of k in any array.,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count","```python
def count_pairs_with_difference_k(arr, k):
    freq_map = {}
    count = 0
    
    for num in arr:
        if num not in freq_map:
            freq_map[num] = 1
        else:
            freq_map[num] += 1
            
    for num in arr:
        diff = num - k
        if diff != num and diff in freq_map:
            count += freq_map[diff]
    
    return count // 2
```"
184,Write a function to find all the values in a list that are greater than a specified number.,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum","```python
def find_greater_values(lst, num):
    """"""
    Returns a list of values from the input list that are greater than the specified number.
    
    Args:
        lst (list): The input list to search for greater values.
        num (int or float): The number against which the comparison is made.
    
    Returns:
        list: A list of values greater than the specified number.
    """"""
    return [value for value in lst if value > num]
```"
185,Write a function to find the focus of a parabola.,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus","```python
def find_parabola_focus(a):
    if a == 0:
        raise ValueError(""Parabola must be in the form y = ax^2"")
    p = 1 / (4 * abs(a))
    return (0, -p) if a > 0 else (0, p)
```"
186,Write a function to search some literals strings in a string by using regex.,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')","```python
import re

def search_literals(text, literals):
    results = []
    for literal in literals:
        pattern = re.compile(re.escape(literal))
        matches = pattern.findall(text)
        if matches:
            results.append((literal, matches))
    return results
```

This function uses a regular expression to escape any special characters in the literal strings, ensuring they are treated as literal strings during the search. It then compiles this escaped string into a regex pattern and uses it to find all occurrences of the literal string within the provided text.

It iterates over each literal string, performing the search and appending the results (including the original literal string) to the `results` list if any matches are found.

Finally, it returns the `results` list containing all literal strings that were found in the text along with their respective matches."
187,Write a function to find the longest common subsequence for the given two sequences.,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","```python
def longest_common_subsequence(seq1, seq2):
    m = len(seq1)
    n = len(seq2)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if seq1[i - 1] == seq2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    lcs = []
    i, j = m, n

    while i > 0 and j > 0:
        if seq1[i - 1] == seq2[j - 1]:
            lcs.append(seq1[i - 1])
            i -= 1
            j -= 1
        elif dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1

    return """".join(reversed(lcs))
```"
188,Write a python function to check whether the given number can be represented by product of two squares or not.,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;","```python
def is_product_of_two_squares(n):
    def is_square(num):
        root = int(num ** 0.5)
        return root * root == num

    i = 1
    while i * i <= n:
        if is_square(n // (i * i)):
            return True
        i += 1
    return False
```"
189,Write a python function to find the first missing positive number.,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)","```python
def first_missing_positive(nums):
    if not nums:
        return 1
    
    n = len(nums)
    
    for i in range(n):
        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:
            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
    
    for i in range(n):
        if nums[i] != i + 1:
            return i + 1
    
    return n + 1
```"
190,Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","```python
def count_integral_coordinates(x1, y1, x2, y2):
    total_points = 0
    for i in range(min(x1, x2), max(x1, x2) + 1):
        for j in range(min(y1, y2), max(y1, y2) + 1):
            if ((x1 - i)**2 + (y1 - j)**2 <= (max(abs(x1-x2), abs(y1-y2)))**2 and 
                (x2 - i)**2 + (y2 - j)**2 <= (max(abs(x1-x2), abs(y1-y2)))**2):
                total_points += 1
    return total_points
```"
191,Write a function to check whether the given month name contains 30 days or not.,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False","```python
def has_thirty_days(month_name):
    thirty_one_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']
    thirty_days = ['April', 'June', 'September', 'November']

    if month_name in thirty_one_days:
        return False
    elif month_name in thirty_days or month_name == 'February':
        return True
```"
192,Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","```python
import re

def check_string(s):
    has_letter = bool(re.search(r""[a-zA-Z]"", s))
    has_number = bool(re.search(r""\d"", s))
    return has_letter and has_number
```"
193,Write a function to remove the duplicates from the given tuple.,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ","```python
def remove_duplicates(tup):
    return tuple(set(tup))
```

Or using dict to maintain order in python 3.7+

```python
def remove_duplicates(tup):
    return tuple(dict.fromkeys(tup))
```"
194,Write a python function to convert octal number to decimal number.,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ","```python
def octal_to_decimal(octal_num):
    decimal_num = 0
    power = 0
    for digit in str(octal_num)[::-1]:
        decimal_num += int(digit) * (8 ** power)
        power += 1
    return decimal_num
```"
195,Write a python function to find the first position of an element in a sorted array.,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res","```python
def find_first_position(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left if left < len(arr) and arr[left] == target else -1
```"
196,Write a function to remove all the tuples with length k.,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ","```python
def remove_tuples_with_length_k(tuples_list, k):
    """"""
    Removes all tuples with length k from a given list of tuples.
    
    Args:
        tuples_list (list): The list of tuples to process.
        k (int): The tuple length to be removed.

    Returns:
        list: A new list containing the filtered tuples.
    """"""
    return [t for t in tuples_list if len(t) != k]
```"
197,Write a function to perform the exponentiation of the given two tuples.,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
","```python
def tuple_exponentiation(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""Tuples must be of equal length"")

    result = []
    for i in range(len(tuple1)):
        try:
            float(tuple1[i])
            float(tuple2[i])
        except ValueError:
            raise ValueError(""Tuple elements must be numbers"")
        
        result.append(pow(float(tuple1[i]), float(tuple2[i])))
    
    return tuple(result)
```"
198,Write a function to find the largest triangle that can be inscribed in an ellipse.,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ","```python
import math

def largest_triangle_in_ellipse(a, b):
    """"""
    This function calculates the area of the largest triangle that can be inscribed in an ellipse.

    Args:
        a (float): The semi-major axis of the ellipse.
        b (float): The semi-minor axis of the ellipse.

    Returns:
        float: The area of the largest triangle that can be inscribed in the ellipse.
    """"""
    return 0.5 * a * b * math.sin(math.pi / 3)
```"
199,Write a python function to find highest power of 2 less than or equal to given number.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ","```python
def highest_power_of_2(n):
    i = 1
    while (i << 1) <= n:
        i <<= 1
    return i
```"
200,Write a function to find all index positions of the maximum values in a given list.,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result","```python
def find_max_indices(lst):
    max_val = max(lst)
    return [i for i, x in enumerate(lst) if x == max_val]
```"
201,Write a python function to check whether the elements in a list are same or not.,"def chkList(lst): 
    return len(set(lst)) == 1","```python
def check_same_elements(lst):
    return len(set(lst)) == 1 if lst else True
```"
202,Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","```python
def remove_even_characters(input_string):
    return ''.join([input_string[i] for i in range(len(input_string)) if (i + 1) % 2 != 0])
```"
203,Write a python function to find the hamming distance between given two integers.,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ","```python
def hamming_distance(x: int, y: int) -> int:
    xor_result = x ^ y
    binary_string = bin(xor_result)[2:]
    return sum(1 for bit in binary_string if bit == '1')
```"
204,Write a python function to count the occurrence of a given character in a string.,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ","```python
def count_char(string, char):
    return string.count(char)
```

or 

```python
def count_char(string, char):
    return sum(1 for c in string if c == char)
```"
205,Write a function to find the inversions of tuple elements in the given tuple list.,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ","```python
def find_inversions(tuple_list):
    def merge_sort(arr):
        if len(arr) <= 1:
            return arr, 0
        mid = len(arr) // 2
        left, a = merge_sort(arr[:mid])
        right, b = merge_sort(arr[mid:])
        result, c = merge(left, right)
        return result, (a + b + c)

    def merge(left, right):
        result = []
        i, j = 0, 0
        inversions = 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                result.append(left[i])
                i += 1
            else:
                result.append(right[j])
                inversions += (len(left) - i)
                j += 1
        result += left[i:]
        result += right[j:]
        return result, inversions

    return merge_sort(tuple_list)[1]
```"
206,Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","```python
def adjacent_element_concatenation(tuples_list):
    result = []
    for tup in tuples_list:
        new_tup = ()
        for i in range(len(tup)):
            if i < len(tup) - 1:
                new_tup += (tup[i] + str(tup[i+1]),)
            elif i == len(tup) - 1 and len(tup) > 1:
                new_tup += (str(tup[i]) + tup[0],)
        result.append(new_tup)
    return result
```"
207,Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]","```python
def longest_repeating_subsequences(s1, s2):
    m = len(s1)
    n = len(s2)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]

def lrs(s):
    n = len(s)
    return longest_repeating_subsequences(s, s[::-1])
```"
208,Write a function to check the given decimal with a precision of 2 by using regex.,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)","```python
import re

def check_decimal_precision(number):
    pattern = r'^\d+(\.\d{1,2})?$'
    return bool(re.match(pattern, str(number)))
```"
209,Write a function to delete the smallest element from the given heap and then insert a new item.,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap","```python
def delete_and_insert(heap, item):
    if heap:
        smallest = min(heap)
        heap.remove(smallest)
        heap.append(item)
        heap.sort()
    else:
        heap.append(item)
    return heap
```"
210,"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)","```python
import re

def check_string(s):
    pattern = r'^[a-zA-Z0-9]+$'
    if re.match(pattern, s):
        return True
    else:
        return False
```

Alternatively, you can also use the following function which does exactly the same thing but in a more concise way:

```python
import re

def check_string(s):
    pattern = r'^[a-zA-Z0-9]+$'
    return bool(re.match(pattern, s))
```"
211,Write a python function to count numbers whose oth and nth bits are set.,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ","```python
def count_numbers_with_oth_and_nth_bits_set(n):
    def check_bit(num, pos):
        return (num >> pos) & 1
    
    count = 0
    for i in range(2**n):
        if check_bit(i, 0) and check_bit(i, n-1):
            count += 1
    return count
```"
212,Write a python function to find the sum of fourth power of n natural numbers.,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum","```python
def sum_of_fourth_power(n):
    return sum(i**4 for i in range(1, n+1))
```"
213,Write a function to perform the concatenation of two string tuples.,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def concat_string_tuples(tuple1, tuple2):
    """"""
    Concatenates two string tuples.

    Args:
        tuple1 (tuple): The first string tuple.
        tuple2 (tuple): The second string tuple.

    Returns:
        str: A concatenated string of the input tuples.
    """"""
    return ''.join([item for sublist in [list(tuple1), list(tuple2)] for item in sublist])
```"
214,Write a function to convert radians to degrees.,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree","```python
import math

def radians_to_degrees(radians):
    """"""
    Convert radians to degrees.

    Parameters:
    radians (float): The angle in radians.

    Returns:
    float: The converted angle in degrees.
    """"""
    if not isinstance(radians, (int, float)):
        raise TypeError(""Input must be a number"")
    return math.degrees(radians)
```"
215,Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","```python
def decode_run_length(encoded_list):
    decoded_list = []
    for i in range(0, len(encoded_list), 2):
        char = encoded_list[i]
        count = encoded_list[i + 1]
        decoded_list.extend([char] * count)
    return decoded_list
```"
216,Write a function to check if a nested list is a subset of another nested list.,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ","```python
def is_nested_subset(subset, superset):
    if not isinstance(subset, list) or not isinstance(superset, list):
        raise TypeError(""Both inputs must be lists"")
    
    def flatten(nested_list):
        flat_list = []
        for item in nested_list:
            if isinstance(item, list):
                flat_list.extend(flatten(item))
            else:
                flat_list.append(item)
        return flat_list
    
    subset_flat = flatten(subset)
    superset_flat = flatten(superset)
    
    return set(subset_flat).issubset(set(superset_flat))
```"
217,Write a python function to find the first repeated character in a given string.,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'","```python
def first_repeated_char(s):
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
            if char_count[char] == 2:
                return char
        else:
            char_count[char] = 1
    return None
```"
218,Write a python function to find the minimum operations required to make two numbers equal.,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1","```python
import math

def min_operations(a, b):
    if a == 0 or b == 0:
        return max(a, b)
    gcd = math.gcd(a, b)
    lcm = (a * b) // gcd
    return lcm - max(a, b)
```

Note: This code uses the mathematical property that the least common multiple of two numbers is equal to their product divided by their greatest common divisor. The minimum number of operations required to make the numbers equal is then calculated as the LCM minus the larger of the two numbers."
219,Write a function to extract maximum and minimum k elements in the given tuple.,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ","```python
def extract_max_min_k_elements(input_tuple, k):
    if len(input_tuple) < k:
        raise ValueError(""Input tuple length should be greater than or equal to k"")

    sorted_list = sorted(list(input_tuple))
    max_k_elements = sorted_list[-k:]
    min_k_elements = sorted_list[:k]
    
    return max_k_elements, min_k_elements
```"
220,"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))","```python
def replace_chars(s, n):
    replacements = {' ': ':', ',': ':', '.': ':'}
    s_list = list(s)
    count = 0
    for i in range(len(s)):
        if s[i] in replacements and count < n:
            s_list[i] = replacements[s[i]]
            count += 1
    return ''.join(s_list)
```"
221,Write a python function to find the first even number in a given list of numbers.,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","```python
def find_first_even(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num
    return None
```"
222,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ","```python
def check_tuple_type(input_tuple):
    if len(set(type(x) for x in input_tuple)) == 1:
        return True
    else:
        return False
```"
223,Write a function to check for majority element in the given sorted array.,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1","```python
def is_majority_element(arr):
    n = len(arr)
    for i in range(0, n - 1, 2):
        if arr[i] == arr[i + 1]:
            return True
    return False
```

You can call this function with a sorted array as an argument to check if there is a majority element (an element that appears more than once)."
224,Write a python function to count set bits of a given number.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ","```python
def count_set_bits(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count
```

Alternatively, you can use the built-in `bin()` function to convert the number to binary and then count the set bits:

```python
def count_set_bits(n):
    return bin(n).count('1')
```"
225,Write a python function to find the minimum element in a sorted and rotated array.,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ","```python
def find_min_element(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = (left + right) // 2
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid
    return nums[left]
```"
226,Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result","```python
def remove_odd_index_chars(s):
    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])
```"
227,Write a function to find minimum of three numbers.,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ","```python
def find_minimum(a, b, c):
    return min(min(a, b), c)
```

Alternatively,

```python
def find_minimum(a, b, c):
    if a <= b and a <= c:
        return a
    elif b <= a and b <= c:
        return b
    else:
        return c
```"
228,Write a python function to check whether all the bits are unset in the given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False","```python
def check_bits(num, start, end):
    mask = ((1 << (end + 1)) - 1) ^ ((1 << start) - 1)
    return not num & mask
```

Please note that the above function assumes that the range is inclusive and 0-indexed. The function `check_bits` takes three parameters: the number to check (`num`), the starting bit position (`start`), and the ending bit position (`end`). It calculates a bitmask using bitwise operations, then checks whether any bits in the specified range are set by performing a bitwise AND operation with the input number. If no bits are set, it returns `True`; otherwise, it returns `False`."
229,Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr","```python
def rearrange_array(arr):
    negative = [x for x in arr if x < 0]
    positive = [x for x in arr if x >= 0]
    return negative + positive
```"
230,Write a function to replace blank spaces with any character in a string.,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2","```python
def replace_blank_spaces(input_string, replacement_character):
    return input_string.replace(' ', replacement_character)
```

You can call this function with your desired string and character to replace blank spaces as follows:
```python
result = replace_blank_spaces(""Hello World"", ""*"")
```"
231,Write a function to find the maximum sum in the given right triangle of numbers.,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))","```python
def max_sum_path(triangle):
    rows = len(triangle)
    for i in range(rows - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])
    return triangle[0][0]
```"
232,Write a function to get the n largest items from a dataset.,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest","```python
import heapq

def get_n_largest(dataset, n):
    if not isinstance(n, int) or n < 0:
        raise ValueError(""n must be a non-negative integer"")
    
    return heapq.nlargest(n, dataset)
```"
233,Write a function to find the lateral surface area of a cylinder.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface","```python
import math

def lateral_surface_area_cylinder(radius, height):
    return 2 * math.pi * radius * height
```"
234,Write a function to find the volume of a cube.,"def volume_cube(l):
  volume = l * l * l
  return volume","```python
def calculate_cube_volume(side_length):
    if side_length < 0:
        raise ValueError(""Side length cannot be negative"")
    return round(side_length ** 3, 2)
```"
235,Write a python function to set all even bits of a given number.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ","```python
def set_even_bits(n):
    result = 0
    i = 1
    while n:
        if i % 2 == 0:
            result |= (n & 1) << i - 1
        else:
            result |= 1 << i - 1
        n >>= 1
        i += 1
    return result | ((~0) >> (i.bit_length() - 1))
```"
236,Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;","```python
def count_equilateral_triangles(n):
    if n < 1:
        return 0
    elif n == 1:
        return 1
    else:
        count = 1
        for i in range(2, n+1):
            count += (i * (i-1)) // 2
        return count
```"
237,Write a function to check the occurrences of records which occur similar times in the given tuples.,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ","```python
def check_occurrences(tuples_list):
    occurrences_dict = {}
    for tup in tuples_list:
        if tup in occurrences_dict:
            occurrences_dict[tup] += 1
        else:
            occurrences_dict[tup] = 1
    
    max_count = max(occurrences_dict.values())
    
    similar_tups = [tup for tup, count in occurrences_dict.items() if count == max_count]
    
    return similar_tups
```"
238,Write a python function to count number of non-empty substrings of a given string.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ","```python
def count_non_empty_substrings(s):
    n = len(s)
    total_count = 0
    
    for i in range(n):
        for j in range(i + 1, n + 1):
            substring = s[i:j]
            if substring:
                total_count += 1
                
    return total_count
```"
239,Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]","```python
def count_sequences(n, m):
    dp = [0] * (m + 1)
    for i in range(1, m + 1):
        dp[i] = 1 if n == 1 else sum(dp[max(i // 2, 1):i])
    return sum(dp)
```"
240,Write a function to replace the last element of the list with another list.,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
","```python
def replace_last_element(original_list, replacement_list):
    if len(original_list) > 0:
        original_list[-1:] = replacement_list
    return original_list
```"
241,Write a function to generate a 3d array having each element as '*'.,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d","```python
def generate_3d_array(size):
    return [[[ '*' for _ in range(size)] for _ in range(size)] for _ in range(size)]
```"
242,Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","```python
def count_total_characters(input_string):
    if isinstance(input_string, str) and input_string.strip() != '':
        return sum(len(substring) for substring in input_string.split())
    else:
        raise ValueError(""Input should be a non-empty string."")
```"
243,Write a function to sort the given list based on the occurrence of first element of tuples.,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ","```python
def sort_tuples(lst):
    return sorted(lst, key=lambda x: lst.count(x[0]))
```

Alternatively, you can use a more efficient approach that counts the occurrences of each element in the list once:

```python
from collections import Counter

def sort_tuples(lst):
    count = Counter(t[0] for t in lst)
    return sorted(lst, key=lambda x: count[x[0]])
```"
244,Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","```python
import math

def next_perfect_square(n):
    root = math.isqrt(n)
    while True:
        if (root + 1) ** 2 > n:
            return (root + 1) ** 2
        root += 1
```"
245,Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum","```python
def max_biotonic_sum(arr):
    n = len(arr)
    inc = [x for x in arr]
    dec = [x for x in arr]

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and inc[i] < dec[j] + arr[i]:
                inc[i] = dec[j] + arr[i]
            if arr[i] < arr[j] and dec[i] < inc[j] + arr[i]:
                dec[i] = inc[j] + arr[i]

    return max(max(inc), max(dec))
```"
246,Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","```python
def babylonian_sqrt(n):
    x = n / 2
    while True:
        y = (x + n / x) / 2
        if abs(x - y) < 0.000001:
            return y
        x = y
```"
247,Write a function to find the longest palindromic subsequence in the given string.,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]","```python
def longest_palindromic_subsequence(s):
    n = len(s)
    table = [[0 for x in range(n)]for y in range(n)]
    max_length = 1
    i = 0
    while i < n:
        table[i][i] = True
        i += 1
    start = 0
    i = 0
    while i < n - 1:
        if s[i] == s[i + 1]:
            table[i][i + 1] = True
            start = i
            max_length = 2
        i += 1
    k = 3
    while k <= n:
        i = 0
        while i < (n - k + 1):
            j = i + k - 1
            if s[i] == s[j]:
                table[i][j] = table[i + 1][j - 1]
            else:
                table[i][j] = False
            if table[i][j] and k > max_length:
                start = i
                max_length = k
            i += 1
        k += 1
    return s[start:start + max_length]
```"
248,Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ","```python
def harmonic_sum(n):
    if n < 1:
        raise ValueError(""n must be a positive integer"")
    sum = 0
    for i in range(1, n):
        sum += 1 / i
    return sum
```"
249,Write a function to find the intersection of two arrays using lambda function.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result","```python
intersection = lambda arr1, arr2: list(filter(lambda x: x in arr1, arr2))
```

Or if you want a more readable version with a function definition:

```python
def find_intersection(arr1, arr2):
    return list(filter(lambda x: x in arr1, arr2))
```"
250,Write a python function to count the occcurences of an element in a tuple.,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ","```python
def count_element_in_tuple(tup, element):
    try:
        if isinstance(tup, tuple) and (isinstance(element, int) or isinstance(element, str) or isinstance(element, float)):
            return tup.count(element)
        else:
            raise TypeError(""Input should be a tuple and an integer/string/float."")
    except Exception as e:
        return f""Error occurred: {e}""
```"
251,Write a function to insert an element before each element of a list.,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list","```python
def insert_before_each_element(original_list, element):
    result = []
    for orig_element in original_list:
        result.append(element)
        result.append(orig_element)
    return result
```"
252,Write a python function to convert complex numbers to polar coordinates.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ","```python
import cmath

def complex_to_polar(c):
    r = abs(c)
    phi = cmath.phase(c)
    return r, phi
```"
253,Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","```python
def count_integers(lst):
    return sum(isinstance(i, int) for i in lst)
```"
254,Write a function to find all words starting with 'a' or 'e' in a given string.,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list","```python
def find_words(s):
    words = s.split()
    result = [word for word in words if word.lower().startswith(('a', 'e'))]
    return result
```"
255,Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
","```python
import itertools

def generate_colour_combinations(num_colours):
    colours = ['red', 'green', 'blue']
    return list(itertools.combinations_with_replacement(colours, num_colours))
```"
256,Write a python function to count the number of prime numbers less than a given non-negative number.,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr","```python
def count_primes(n):
    if n < 2:
        return 0
    
    sieve = [True] * (n + 1)
    sieve[0:2] = [False, False]
    
    for current_prime in range(2, int(n ** 0.5) + 1):
        if sieve[current_prime]:
            sieve[current_prime*2::current_prime] = [False] * len(sieve[current_prime*2::current_prime])
    
    return sum(sieve)
```"
257,Write a function to swap two numbers.,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)","```python
def swap_numbers(a, b):
    a, b = b, a
    return a, b
```"
258,Write a function to find number of odd elements in the given list using lambda function.,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd","```python
def count_odd_elements(lst):
    odd_counter = list(filter(lambda x: (x % 2 != 0), lst))
    return len(odd_counter)
```"
259,Write a function to maximize the given two tuples.,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def maximize_tuples(tuple1, tuple2):
    max_tuple = ()
    if len(tuple1) != len(tuple2):
        raise ValueError(""Both tuples must be of the same length."")
    
    for i in range(len(tuple1)):
        max_val = max(tuple1[i], tuple2[i])
        max_tuple += (max_val,)
    
    return max_tuple
```"
260,Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","```python
def nth_newman_shanks_williams(n):
    primes = []
    i = 5
    while len(primes) < n:
        if all(i % p != 0 for p in range(2, int(i**0.5) + 1)):
            s = ((i - 1) & (~i)).bit_length() - 1
            d = (i - 1) >> s
            a = pow(d, (d * i + 1) // (i - 1), i)
            if pow(a, d, i) == 1 and pow(a, 2**s * d, i) != 1:
                primes.append(i)
        i += 2
    return primes[-1]
```"
261,Write a function to perform mathematical division operation across the given tuples.,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def divide_tuples(*tuples):
    if len(set(len(t) for t in tuples)) != 1:
        raise ValueError(""All tuples must be of the same length"")
    
    result = []
    for i in range(len(tuples[0])):
        try:
            result.append(tuple(x[i] / y[i] for x, y in zip(tuples[::2], tuples[1::2])))
        except ZeroDivisionError:
            raise ValueError(""Cannot divide by zero"")
        
    return tuple(result)
```"
262,Write a function to split a given list into two parts where the length of the first part of the list is given.,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]","```python
def split_list(input_list, first_part_length):
    if input_list is None or first_part_length < 0 or first_part_length > len(input_list):
        raise ValueError(""Invalid input"")
    
    first_part = input_list[:first_part_length]
    second_part = input_list[first_part_length:]
    
    return [first_part, second_part]
```"
263,Write a function to merge two dictionaries.,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d","```python
def merge_dicts(dict1, dict2):
    return {**dict1, **dict2}
```"
264,Write a function to calculate a dog's age in dog's years.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age","```python
def calculate_dog_age(human_years):
    if human_years <= 2:
        dog_years = human_years * 10.5
    else:
        dog_years = 21 + (human_years - 2) * 4
    return dog_years
```"
265,Write a function to split a list for every nth element.,"def list_split(S, step):
    return [S[i::step] for i in range(step)]","```python
def split_list(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]
```"
266,Write a function to find the lateral surface area of a cube.,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA","```python
def lateral_surface_area_cube(edge_length):
    """"""
    Calculate the lateral surface area of a cube.

    Parameters:
    edge_length (float): The length of an edge of the cube.

    Returns:
    float: The lateral surface area of the cube.
    """"""
    return 4 * (edge_length ** 2)
```"
267,Write a python function to find the sum of squares of first n odd natural numbers.,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ","```python
def sum_of_squares_odd_numbers(n):
    return sum(i**2 for i in range(1, 2*n, 2))
```"
268,Write a function to find the n'th star number.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ","```python
def find_star_number(n):
    i = 1
    while True:
        star_num = i * (6 * i - 12) + 3
        if star_num == n or star_num > n:
            return n
        i += 1
```"
269,Write a function to find the ascii value of a character.,"def ascii_value(k):
  ch=k
  return ord(ch)","```python
def find_ascii_value(char):
    if len(char) != 1:
        raise ValueError(""Input must be a single character"")
    return ord(char)
```"
270,Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","```python
def sum_even_at_even_position(numbers):
    return sum(num for index, num in enumerate(numbers) if index % 2 == 0 and num % 2 == 0)
```"
271,Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","```python
def sum_of_fifth_power(n):
    return sum(i**5 for i in range(2, 2*n+1, 2))
```"
272,Write a function to perfom the rear element extraction from list of tuples records.,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ","```python
def extract_rear_element(records):
    return [record[-1] for record in records]
```"
273,Write a function to substract the contents of one tuple with corresponding index of other tuple.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ","```python
def subtract_tuples(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""Both tuples must be of equal length"")
    
    result = []
    for i in range(len(tuple1)):
        if isinstance(tuple1[i], (int, float)) and isinstance(tuple2[i], (int, float)):
            result.append(tuple1[i] - tuple2[i])
        else:
            raise TypeError(""All elements in both tuples must be numbers"")
    
    return tuple(result)
```"
274,Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","```python
import math

def sum_even_index_binomial_coefficients(n):
    total = 0
    for k in range(0, n+1, 2):
        coefficient = math.comb(n, k)
        total += coefficient
    return total
```"
275,Write a python function to find the position of the last removed element from the given array.,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1","```python
def find_last_removed_position(arr):
    stack = []
    for i in range(len(arr)):
        while stack and arr[stack[-1]] > arr[i]:
            stack.pop()
        if not stack:
            last_removed_position = -1
        else:
            last_removed_position = stack[-1]
        stack.append(i)
    return last_removed_position + 1 if last_removed_position != -1 else len(arr)
```"
276,Write a function to find the volume of a cylinder.,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume","```python
def calculate_cylinder_volume(radius, height):
    import math
    return math.pi * (radius ** 2) * height
```"
277,Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","```python
def filter_dict_by_value(dictionary, value):
    return {key: val for key, val in dictionary.items() if val == value}
```

Alternatively, you can also use a lambda function to achieve the same result:

```python
filter_dict_by_value = lambda dictionary, value: {key: val for key, val in dictionary.items() if val == value}
```"
278,Write a function to find the element count that occurs before the record in the given tuple.,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ","```python
def find_element_count_before_record(input_tuple):
    if not isinstance(input_tuple, tuple):
        raise ValueError(""Input must be a tuple"")

    record = input_tuple[-1]
    count_dict = {}

    for i in range(len(input_tuple) - 1):
        element = input_tuple[i]
        count_dict[element] = count_dict.get(element, 0) + 1

    return sum(count for element, count in count_dict.items() if element < record)
```"
279,Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ","```python
def nth_decagonal_number(n):
    return 4 * n**2 - 3 * n + 1
```"
280,Write a function to search an element in the given array by using sequential search.,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos","```python
def sequential_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1
```"
281,Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True","```python
def check_unique_elements(input_list):
    if len(input_list) == len(set(input_list)):
        return True
    else:
        return False
```"
282,Write a function to substaract two lists using map and lambda function.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)","```python
def subtract_lists(list1, list2):
    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))
```"
283,Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True","```python
def check_digit_frequencies(num):
    digit_freq = {}
    for digit in str(num):
        if digit in digit_freq:
            digit_freq[digit] += 1
        else:
            digit_freq[digit] = 1
    return all(int(digit) >= freq for digit, freq in digit_freq.items())
```"
284,Write a function to check whether all items of a list are equal to a given string.,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","```python
def check_list_items(lst, target_str):
    return all(item == target_str for item in lst)
```"
285,Write a function that matches a string that has an a followed by two to three 'b'.,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```python
import re

def match_a_followed_by_b(s):
    pattern = r""a(b{2,3})""
    if re.search(pattern, s):
        return True
    else:
        return False
```"
286,Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far","```python
def maxSum(arr, k):
    n = len(arr)
    if n == 0:
        return 0
    elif k == 1:
        return kadane_algorithm(arr)

    total_sum = sum(arr)
    max_ending_here = kadane_algorithm(arr * (k // 2 + 1))[:n]
    max_wrap = total_sum * (k - 1) + max_ending_here

    return max(max_ending_here, max_wrap)


def kadane_algorithm(arr):
    max_so_far = arr[0]
    max_ending_here = arr[0]

    for num in arr[1:]:
        max_ending_here = max(num, max_ending_here + num)
        max_so_far = max(max_so_far, max_ending_here)

    return max_so_far
```"
287,Write a python function to find the sum of squares of first n even natural numbers.,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)","```python
def sum_of_squares(n):
    return sum(i**2 for i in range(2, n*2+1, 2))
```"
288,Write a function to count array elements having modular inverse under given prime number p equal to itself.,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element","```python
def count_modular_inverse(arr, p):
    def extended_euclidean(a, b):
        if a == 0:
            return b, 0, 1
        gcd, x, y = extended_euclidean(b % a, a)
        return gcd, y - (b // a) * x, x

    count = 0
    for num in arr:
        gcd, inverse, _ = extended_euclidean(num, p)
        if gcd == 1 and inverse % p == num:
            count += 1
    return count
```"
289,Write a python function to calculate the number of odd days in a given year.,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ","```python
def count_odd_days(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return 1 + (365 - 366) % 7
            else:
                return 2 + (365 - 365) % 7
        else:
            return 1 + (365 - 366) % 7
    else:
        return 2 + (365 - 365) % 7
```"
290,Write a function to find the list of lists with maximum length.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)","```python
def find_max_length_list(lists):
    if not lists:
        return []
    
    max_len = 0
    max_lists = []
    
    for lst in lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_lists = [lst]
        elif len(lst) == max_len:
            max_lists.append(lst)
    
    return max_lists
```"
291,Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]","```python
def count_ways(n, k):
    if n == 0:
        return 0
    if n == 1:
        return k
    same = [0] * (n + 1)
    diff = [0] * (n + 1)
    total = [0] * (n + 1)
    same[2] = k
    diff[1] = k
    diff[2] = k * (k - 1)
    total[1] = k
    total[2] = k + (k * (k - 1))
    for i in range(3, n + 1):
        same[i] = diff[i - 1]
        diff[i] = total[i - 1] - same[i - 1]
        total[i] = total[i - 1] + diff[i]
    return total[n]
```"
292,Write a python function to find quotient of two numbers.,"def find(n,m):  
    q = n//m 
    return (q)","```python
def find_quotient(dividend, divisor):
    if divisor == 0:
        raise ZeroDivisionError(""Cannot divide by zero"")
    return dividend / divisor
```

Is there anything else I can help you with?"
293,Write a function to find the third side of a right angled triangle.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s","```python
import math

def find_third_side(a=None, b=None, c=None):
    if a is None:
        return math.sqrt(b**2 + c**2)
    elif b is None:
        return math.sqrt(a**2 - c**2) if a > c else ""Invalid input: Hypotenuse cannot be smaller than the other side""
    elif c is None:
        return math.sqrt(a**2 - b**2) if a > b else ""Invalid input: Hypotenuse cannot be smaller than the other side""
```"
294,Write a function to find the maximum value in a given heterogeneous list.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)","```python
def find_max_value(heterogeneous_list):
    max_val = None
    for item in heterogeneous_list:
        if isinstance(item, (int, float)):
            if max_val is None or item > max_val:
                max_val = item
    return max_val
```"
295,Write a function to return the sum of all divisors of a number.,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)","```python
def sum_of_divisors(n):
    sum = 0
    for i in range(1, n + 1):
        if n % i == 0:
            sum += i
    return sum
```"
296,Write a python function to count inversions in an array.,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ","```python
def count_inversions(arr):
    if len(arr) == 1:
        return arr, 0
    else:
        middle = len(arr)//2
        left, a = count_inversions(arr[:middle])
        right, b = count_inversions(arr[middle:])
        result, c = merge_count(left, right)
        return result, (a + b + c)

def merge_count(a, b):
    result = []
    count = 0
    i, j = 0, 0
    left_len = len(a)
    while i < left_len and j < len(b):
        if a[i] <= b[j]:
            result.append(a[i])
            i += 1
        else:
            result.append(b[j])
            count += left_len - i
            j += 1
    result += a[i:]
    result += b[j:]
    return result, count
```"
297,Write a function to flatten a given nested list structure.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ","```python
def flatten(nested_list):
    flat_list = []
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list
```"
298,Write a function to find the nested list elements which are present in another list.,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result","```python
def find_common_elements(nested_list, other_list):
    flat_list = [item for sublist in nested_list for item in sublist]
    return list(set(flat_list) & set(other_list))
```"
299,Write a function to calculate the maximum aggregate from the list of tuples.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])","```python
def max_aggregate(tuples_list):
    if not tuples_list:
        return 0
    max_sum = sum(max(pair) for pair in tuples_list)
    min_sum = sum(min(pair) for pair in tuples_list)
    return max_sum - min_sum
```"
300,Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ","```python
import math


def count_binary_sequences(n):
    total_ways = 0
    for i in range(n+1):
        x = math.comb(2*n, n)
        y = math.comb(n, i) ** 2
        z = ((-1)**i)
        total_ways += (x * y * z)

    return abs(total_ways / (n + 1))
```"
301,Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0","```python
def dict_depth(dictionary):
    if not isinstance(dictionary, dict) or len(dictionary) == 0:
        return 1
    elif all(not isinstance(value, dict) for value in dictionary.values()):
        return 2
    else:
        return 1 + max(dict_depth(value) for value in dictionary.values() if isinstance(value, dict))
```"
302,Write a python function to find the most significant bit number which is also a set bit.,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)","```python
def find_most_significant_bit(n):
    if n == 0:
        return None
    count = -1
    while n != 0:
        n >>= 1
        count += 1
    return count
```"
303,Write a python function to check whether the count of inversion of two types are same or not.,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True","```python
def check_inversion_count(arr):
    inversion_count = [0, 0]
    
    def merge_sort(low, high):
        if low < high:
            mid = (low + high) // 2
            merge_sort(low, mid)
            merge_sort(mid + 1, high)
            
            left_index = low
            right_index = mid + 1
            
            while left_index <= mid and right_index <= high:
                if arr[left_index] <= arr[right_index]:
                    left_index += 1
                else:
                    inversion_count[0] += mid - left_index + 1
                    right_index += 1
            
            while left_index <= mid:
                inversion_count[1] += 1
                left_index += 1
                
            left_index = low
            right_index = mid + 1
            
            while left_index <= high and right_index <= high:
                if arr[right_index] <= arr[left_index]:
                    inversion_count[1] += high - right_index + 1
                    left_index += 1
                else:
                    right_index += 1
                    
            while right_index <= high:
                inversion_count[0] += 1
                right_index += 1
                
    merge_sort(0, len(arr) - 1)
    
    return inversion_count[0] == inversion_count[1]
```"
304,Write a python function to find element at a given index after number of rotations.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ","```python
def find_element_after_rotation(arr, n, index):
    actual_index = (index - n) % len(arr)
    if actual_index < 0:
        actual_index += len(arr)
    return arr[actual_index]
```
```python
def find_element_after_rotation(arr, rotations, index):
    effective_rotations = rotations % len(arr)
    adjusted_index = (index + effective_rotations) % len(arr)
    return arr[adjusted_index]
```

**Choose one of the above two functions. Both are doing the same job but in different ways. The first function subtracts the rotation count from the index, and the second function adds the rotation count to the index. Then both apply the modulo operation with array length to get the effective index after rotations.**"
305,Write a function to match two words from a list of words starting with letter 'p'.,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","```python
def match_words(word_list):
    p_word_list = [word for word in word_list if word.lower().startswith('p')]
    matched_pairs = [(p_word_list[i], p_word_list[j]) 
                    for i in range(len(p_word_list)) 
                    for j in range(i + 1, len(p_word_list))]
    return matched_pairs
```"
306,"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]","```python
def max_increasing_subsequence_sum(arr, i, k):
    n = len(arr)
    max_sum = [0] * n
    for j in range(n):
        if j < i:
            max_sum[j] = arr[j]
        elif j == i:
            max_sum[j] = arr[j]
        else:
            curr_max_sum = arr[j]
            for l in range(j):
                if arr[l] < arr[j]:
                    curr_max_sum = max(curr_max_sum, max_sum[l] + arr[j])
            max_sum[j] = curr_max_sum
    return max(max_sum[:i+1], default=0) + arr[k]
```"
307,Write a function to get a colon of a tuple.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","```python
def get_colon(tup):
    return tup[1]
```

Alternatively,

```python
def get_colon(tup):
    for item in tup:
        if ':' in str(item):
            return item
    return None
```"
308,Write a function to find the specified number of largest products from two given lists.,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result","```python
def find_largest_products(list1, list2, n):
    products = [x * y for x in list1 for y in list2]
    return sorted(products, reverse=True)[:n]
```

You can use this function by passing two lists and the number of largest products you want to get. For example: `find_largest_products([1, 2, 3], [4, 5, 6], 3)`."
309,Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","```python
def find_maximum(a, b):
    if a > b:
        return a
    else:
        return b
```

Alternatively:

```python
def find_maximum(a, b):
    return max(a, b)
```"
310,Write a function to convert a given string to a tuple.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","```python
def string_to_tuple(input_string):
    return tuple(input_string)
```"
311,Write a python function to set the left most unset bit.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ","```python
def set_left_most_unset_bit(n):
    if n == 0:
        return 1
    i = 0
    while (n & (1 << i)) != 0:
        i += 1
    return n | (1 << i)
```"
312,Write a function to find the volume of a cone.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume","```python
import math

def cone_volume(radius, height):
    return (1/3) * math.pi * radius**2 * height
```"
313,Write a python function to print positive numbers in a list.,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ","```python
def print_positive_numbers(num_list):
    for num in num_list:
        if num > 0:
            yield num
```
Please note that this function uses a generator to yield positive numbers instead of printing them directly or returning a list of positive numbers, allowing the caller to decide how to use the yielded values."
314,Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","```python
def max_sum(grid):
    n = len(grid[0])
    dp = [[0]*n for _ in range(2)]
    
    dp[0][0] = grid[0][0]
    dp[1][0] = grid[1][0]
    
    for i in range(1, n):
        for j in range(2):
            if j == 0:
                dp[j][i] = max(dp[1][i-1], dp[0][i-1]) + grid[j][i]
            else:
                dp[j][i] = max(dp[0][i-1], dp[1][i-1]) + grid[j][i]
                
    return max(dp[0][-1], dp[1][-1])
```"
315,Write a python function to find the first maximum length of even word.,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ","```python
def max_even_length(s):
    words = s.split()
    even_words = [word for word in words if len(word) % 2 == 0]
    if not even_words:
        return -1
    max_len_word = max(even_words, key=len)
    return len(max_len_word)
```"
316,Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","```python
def find_last_occurrence(arr, target):
    left, right = 0, len(arr) - 1
    result = -1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            result = mid
            left = mid + 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
            
    return result
```"
317,Write a function to reflect the modified run-length encoding from a list.,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]","```python
def reflect_modified_run_length_encoding(lst):
    result = []
    for i in range(len(lst)):
        if i % 2 == 0:
            result.append((lst[i], lst[i+1]))
    return result
```

**Note**: This function assumes that the input list `lst` has an even length. If the length is odd, the last element will be ignored."
318,Write a python function to find the maximum volume of a cuboid with given sum of sides.,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ","```python
def max_volume(s):
    # Calculate x + y + z = s => 2x + 2y + 2z = 2s => x + y + z = s
    # Volume = xyz
    # By AM-GM inequality, (x+y+z)/3 >= (xyz)**(1/3)
    # So, max_volume is when x=y=z=s/3
    return (s / 3) ** 3
```"
319,Write a function to find all five characters long word in the given string by using regex.,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))","```python
import re

def find_five_char_words(input_string):
    pattern = r'\b\w{5}\b'
    matches = re.findall(pattern, input_string)
    return [match for match in matches if len(match) == 5]
```"
320,Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares","```python
def sum_of_squares_difference(n):
    squared_sum = (n * (n + 1) // 2) ** 2
    sum_of_squared = n * (n + 1) * (2 * n + 1) // 6
    return abs(squared_sum - sum_of_squared)
```"
321,Write a function to find the demlo number for the given number.,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	","```python
def demlo_number(num):
    if num < 10:
        return num
    sum_of_digits = sum(int(digit) for digit in str(num))
    return sum_of_digits
```

Alternatively, you can also use the following function which uses recursion:

```python
def demlo_number(num):
    if num < 10:
        return num
    else:
        return demlo_number(sum(int(digit) for digit in str(num)))
```"
322,Write a function to find all index positions of the minimum values in a given list.,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result","```python
def find_min_indices(lst):
    min_val = min(lst)
    return [i for i, x in enumerate(lst) if x == min_val]
```

```python
# Alternative solution using numpy
import numpy as np

def find_min_indices(lst):
    return np.where(np.array(lst) == np.min(lst))[0].tolist()
```"
323,Write a function to re-arrange the given array in alternating positive and negative items.,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr","```python
def rearrange_alternating(arr):
    pos = [x for x in arr if x >= 0]
    neg = [x for x in arr if x < 0]

    result = []
    while len(pos) > 0 and len(neg) > 0:
        result.append(pos.pop(0))
        result.append(neg.pop(0))

    result += pos
    result += neg

    return result
```"
324,Write a function to extract the sum of alternate chains of tuples.,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ","```python
def sum_alternate_chains(chains):
    result = 0
    for i in range(0, len(chains), 2):
        for num in chains[i]:
            result += num
    return result
```"
325,Write a python function to find the minimum number of squares whose sum is equal to a given number.,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;","```python
def min_squares(n):
    dp = [float('inf')] * (n + 1)
    dp[0] = 0
    for i in range(1, n + 1):
        j = 1
        while j * j <= i:
            dp[i] = min(dp[i], dp[i - j * j] + 1)
            j += 1
    return dp[n]
```"
326,Write a function to get the word with most number of occurrences in the given strings list.,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ","```python
def most_frequent_word(strings):
    words = ' '.join(strings).split()
    word_freq = {}
    for word in words:
        if word.lower() in word_freq:
            word_freq[word.lower()] += 1
        else:
            word_freq[word.lower()] = 1
    max_count = max(word_freq.values())
    most_frequent_words = [word for word, count in word_freq.items() if count == max_count]
    return most_frequent_words[0] if len(most_frequent_words) > 0 else None
```"
327,Write a function to print check if the triangle is isosceles or not.,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False","```python
def is_isosceles_triangle(a, b, c):
    if a == b or b == c or a == c:
        return True
    return False
```"
328,Write a function to rotate a given list by specified number of items to the left direction.,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result","```python
def rotate_list(input_list, num_positions):
    if len(input_list) == 0:
        return input_list
    effective_positions = num_positions % len(input_list)
    return input_list[effective_positions:] + input_list[:effective_positions]
```"
329,Write a python function to count negative numbers in a list.,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ","```python
def count_negative_numbers(lst):
    return sum(1 for num in lst if isinstance(num, (int, float)) and num < 0)
```"
330,"Write a function to find all three, four, five characters long words in the given string by using regex.","import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))","```python
import re

def find_words(input_string):
    pattern = r'\b\w{3}\b|\b\w{4}\b|\b\w{5}\b'
    words = re.findall(pattern, input_string)
    return [word for word in words if len(word) >= 3 and len(word) <= 5]
```"
331,Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","```python
def count_unset_bits(n):
    binary = bin(n)[2:]
    return binary.count('0')
```"
332,Write a function to count character frequency of a given string.,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict","```python
def count_char_frequency(string):
    frequency = {}
    for char in string:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1
    return frequency
```"
333,Write a python function to sort a list according to the second element in sublist.,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ","```python
def sort_by_second_element(lst):
    return sorted(lst, key=lambda x: x[1])
```"
334,Write a python function to check whether the triangle is valid or not if sides are given.,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ","```python
def is_valid_triangle(a, b, c):
    sides = sorted([a, b, c])
    if a <= 0 or b <= 0 or c <= 0:
        return False
    elif sides[2] < (sides[1] + sides[0]):
        return True
    else:
        return False
```"
335,Write a function to find the sum of arithmetic progression.,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total","```python
def sum_of_arithmetic_progression(a1, d, n):
    an = a1 + (n - 1) * d
    sum_ap = (n / 2) * (a1 + an)
    return sum_ap
```

Alternatively:

```python
def sum_of_arithmetic_progression(a1, d, n):
    return (n / 2) * (2*a1 + (n - 1)*d)
```"
336,Write a function to check whether the given month name contains 28 days or not.,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False","```python
def check_days_in_month(month_name):
    month_names = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"",
                   ""July"", ""August"", ""September"", ""October"", ""November"", ""December""]
    if month_name in month_names:
        return True
    else:
        return False
```"
337,"Write a function that matches a word at the end of a string, with optional punctuation.","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","```
import re

def match_word_at_end(string, word):
    pattern = r'\b' + re.escape(word) + r'[^\w\s]*$'
    return bool(re.search(pattern, string))
```"
338,Write a python function to count the number of substrings with same first and last characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","```python
def count_substrings_with_same_first_and_last_characters(s):
    n = len(s)
    count = 0
    for length in range(1, n + 1):
        for i in range(n - length + 1):
            substring = s[i:i+length]
            if substring[0] == substring[-1]:
                count += 1
    return count
```"
339,Write a python function to find the maximum occuring divisor in an interval.,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2","```python
def max_occuring_divisor(left, right):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    def all_gcds(n):
        divisors = []
        for i in range(1, int(n**0.5) + 1):
            if n % i == 0:
                divisors.append(i)
                if i != n // i:
                    divisors.append(n // i)
        return divisors

    max_divisor = None
    max_count = 0
    for num in range(left, right + 1):
        divisors = all_gcds(num)
        divisor_counts = {}
        for d in divisors:
            if d not in divisor_counts:
                divisor_counts[d] = 0
            divisor_counts[d] += 1
        max_local_divisor = None
        max_local_count = 0
        for divisor, count in divisor_counts.items():
            if count > max_local_count:
                max_local_divisor = divisor
                max_local_count = count
        if max_local_count > max_count:
            max_count = max_local_count
            max_divisor = max_local_divisor

    return max_divisor
```"
340,Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","```python
def sum_of_three_lowest(numbers):
    if len(numbers) < 3:
        raise ValueError(""The list must have at least three positive numbers"")
    
    positive_numbers = [num for num in numbers if num > 0]
    if len(positive_numbers) < 3:
        raise ValueError(""The list must have at least three positive numbers"")
    
    return sum(sorted(set(positive_numbers))[:3])
```"
341,Write a function to convert the given set into ordered tuples.,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)","```python
def convert_set_to_ordered_tuples(given_set):
    """"""
    This function takes a given set as input, 
    sorts its elements in ascending order, 
    then converts them into ordered tuples.
    
    Args:
        given_set (set): A set containing unsorted elements.

    Returns:
        tuple: An ordered tuple containing sorted elements from the input set.
    """"""

def convert_set_to_ordered_tuples(given_set):
    return tuple(sorted(given_set))
```"
342,Write a function to find the smallest range that includes at-least one element from each of the given arrays.,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])","```python
def smallest_range(arrays):
    import heapq
    pq = [(row[0], i, 0) for i, row in enumerate(arrays)]
    heapq.heapify(pq)
    low, high = min(row[0] for row in arrays), max(row[0] for row in arrays)
    while True:
        num, array_index, element_index = heapq.heappop(pq)
        if high - num < high - low:
            low, high = num, high
        elif high - num == high - low and num < low:
            low = num
        if element_index + 1 == len(arrays[array_index]):
            return (low, high)
        heapq.heappush(pq, (arrays[array_index][element_index + 1], array_index, element_index + 1))
```"
343,Write a function to calculate the number of digits and letters in a string.,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)","```python
def count_digits_and_letters(input_string):
    digits = sum(c.isdigit() for c in input_string)
    letters = sum(c.isalpha() for c in input_string)
    return {""digits"": digits, ""letters"": letters}
```"
344,Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","```python
def count_odd_factors(a, b):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    count = 0
    for num in range(a, b+1):
        factors_count = 0
        for j in range(1, num+1):
            if num % j == 0 and is_prime(j):
                factors_count += 1
        if factors_count % 2 != 0:
            count += 1
    return count
```"
345,Write a function to find the difference between two consecutive numbers in a given list.,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result","```python
def find_consecutive_diff(numbers):
    if len(numbers) < 2:
        return None
    diff_list = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]
    return diff_list
```

Alternatively, using NumPy:

```python
import numpy as np

def find_consecutive_diff(numbers):
    if len(numbers) < 2:
        return None
    numbers_array = np.array(numbers)
    diff_list = np.diff(numbers_array).tolist()
    return diff_list
```"
346,"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","```python
def entringer_number(n, k):
    def stirling_second_kind(n, k):
        if n == 0:
            return int(k == 0)
        elif k > n or k < 1:
            return 0
        else:
            result = 0
            for i in range(1, n + 1):
                sign = (-1)**(k + i)
                term = (i**n) * stirling_second_kind(i - 1, k - 1)
                result += sign * term
            return int(result / math.factorial(k))

    import math

    def binomial_coefficient(n, k):
        return math.comb(n, k)

    return sum((-1)**k * binomial_coefficient(n + 1, k) * (k**n) for k in range(0, n + 2))
```"
347,Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6","```python
def count_squares(width, height):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    side_length = gcd(width, height)
    num_squares = (width // side_length) * (height // side_length)
    
    return num_squares
```"
348,Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ","```python
def count_sequences(values, length):
    if length == 0:
        return 1
    
    total_count = 0
    for value in values:
        new_values = [v - value for v in values]
        new_values.append(0)
        total_count += count_sequences(new_values, length - 1)

    return total_count
```"
349,Write a python function to check whether the given string is a binary string or not.,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ","```python
def is_binary_string(s):
    try:
        int(s, 2)
        return True
    except ValueError:
        return False
```

Alternatively, you can also use a regular expression to achieve this:

```python
import re
def is_binary_string(s):
    return bool(re.match('^[01]+$', s))
```
or using set

```python
def is_binary_string(s):
    return set(s) <= {'0', '1'}
```"
350,Write a python function to minimize the length of the string by removing occurrence of only one character.,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ","```python
def min_length_string(s):
    freq = {}
    for char in s:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    
    max_freq = max(freq.values())
    
    for key, value in freq.items():
        if value == max_freq:
            return s.replace(key, '', 1)
```"
351,Write a python function to find the first element occurring k times in a given array.,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1","```python
def first_element_occuring_k_times(arr, k):
    count_dict = {}
    for num in arr:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
        if count_dict[num] == k:
            return num
    return None
```"
352,Write a python function to check whether all the characters in a given string are unique.,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;","```python
def has_unique_chars(s):
    return len(set(s)) == len(s)
```

or 

```python
def has_unique_chars(s):
    char_set = set()
    for char in s:
        if char in char_set:
            return False
        char_set.add(char)
    return True
```"
353,Write a function to remove a specified column from a given nested list.,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1","```python
def remove_column(nested_list, column_index):
    return [row[:column_index] + row[column_index+1:] for row in nested_list]
```"
354,Write a function to find t-nth term of arithemetic progression.,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn","```python
def nth_term_arithmetic_progression(a, d, n):
    return a + (n - 1) * d
```

```python
def nth_term_arithmetic_progression(a, d, n):
    if n == 0:
        raise ValueError(""Term number should be greater than zero"")
    elif n == 1:
        return a
    else:
        return a + (n - 1) * d
```"
355,Write a python function to count the number of rectangles in a circle of radius r.,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ","```python
import math

def count_rectangles_in_circle(r):
    if r < 0:
        raise ValueError(""Radius cannot be negative"")
    
    rectangles = set()
    for x in range(-r, r+1):
        for y in range(-r, r+1):
            distance = math.sqrt(x**2 + y**2)
            if distance <= r:
                rectangles.add((x, y))
                
    count = 0
    for x1, y1 in rectangles:
        for x2, y2 in rectangles:
            if x1 < x2 and y1 < y2:
                rectangle_area = (x2 - x1) * (y2 - y1)
                if rectangle_area > 0:
                    count += 1
                    
    return count
```"
356,Write a function to find the third angle of a triangle using two angles.,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
","```python
def find_third_angle(angle1, angle2):
    """"""
    This function calculates the third angle of a triangle given two angles.

    Args:
        angle1 (float): The first angle in degrees.
        angle2 (float): The second angle in degrees.

    Returns:
        float: The third angle in degrees.
    """"""

def find_third_angle(angle1, angle2):
    return 180 - (angle1 + angle2)
```"
357,Write a function to find the maximum element of all the given tuple records.,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ","```python
def max_tuple_element(tuple_list):
    return max(max(record) for record in tuple_list)
```"
358,Write a function to find modulo division of two lists using map and lambda function.,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)","```python
def modulo_division(list1, list2):
    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))
```"
359,Write a python function to check whether one root of the quadratic equation is twice of the other or not.,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ","```python
def check_roots(a, b, c):
    d = (b**2 - 4*a*c)**0.5
    root1 = (-b + d) / (2 * a)
    root2 = (-b - d) / (2 * a)
    return abs(root1 - 2*root2) < 1e-9 or abs(2*root1 - root2) < 1e-9
```"
360,Write a function to find the n’th carol number.,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2","```python
def carol(n):
    if n == 0:
        return ""Carol Number sequence starts from index 1""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, (4*b) + a
        return b
```"
361,Write a function to remove empty lists from a given list of lists.,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty","```python
def remove_empty_lists(list_of_lists):
    """"""
    Removes empty lists from a given list of lists.

    Args:
        list_of_lists (list): A list containing other lists as elements.

    Returns:
        list: The input list with all empty sublists removed.
    """"""
    return [sublist for sublist in list_of_lists if sublist]
```"
362,Write a python function to find the item with maximum occurrences in a given list.,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","```python
def max_occurrences(lst):
    counts = {}
    for item in lst:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1
    max_item = max(counts, key=counts.get)
    return {max_item: counts[max_item]}
```"
363,Write a function to add the k elements to each element in the tuple.,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ","```python
def add_k_to_tuple_elements(tup, k):
    return tuple(i + k for i in tup)
```"
364,Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","```python
def minFlips(s):
    n = len(s)
    group1, group2 = 0, 0
    
    for i in range(n):
        if i % 2 == 0:
            group1 += s[i] != '0'
            group2 += s[i] != '1'
        else:
            group1 += s[i] != '1'
            group2 += s[i] != '0'

    return min(group1, group2)
```"
365,Write a python function to count the number of digits of a given number.,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count","```python
def count_digits(n):
    if n == 0:
        return 1
    return len(str(abs(n)))
```"
366,Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","```python
def adjacent_elements_product(lst):
    if len(lst) < 2:
        raise ValueError(""List must contain at least two elements"")
    max_product = float('-inf')
    for i in range(len(lst) - 1):
        product = lst[i] * lst[i + 1]
        max_product = max(max_product, product)
    return max_product
```"
367,Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","```python
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def is_balanced(root):
    def check(root):
        if root is None:
            return 0
        left = check(root.left)
        right = check(root.right)
        if left == -1 or right == -1 or abs(left - right) > 1:
            return -1
        return 1 + max(left, right)

    return check(root) != -1
```"
368,Write a function to repeat the given tuple n times.,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ","```python
def repeat_tuple(n, tup):
    return tuple(tup) * n
```
No, here is a more general version that can handle any type of input:

```python
def repeat_element(n, element):
    return (element,) * n
```"
369,Write a function to find the lateral surface area of cuboid,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA","```python
def lateral_surface_area_cuboid(length, width, height):
    """"""
    Calculate the lateral surface area of a cuboid.

    Parameters:
    length (float): The length of the cuboid.
    width (float): The width of the cuboid.
    height (float): The height of the cuboid.

    Returns:
    float: The lateral surface area of the cuboid.
    """"""
    return 2 * ((length * height) + (width * height))
```"
370,Write a function to sort a tuple by its float element.,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort","```python
def sort_tuple_by_float(tup):
    return tuple(sorted(tup, key=lambda x: float(x[1])))
```"
371,Write a function to find the smallest missing element in a sorted array.,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","```python
def find_smallest_missing_element(arr):
    if len(arr) == 0:
        return 1
    
    arr_set = set(arr)
    
    for i in range(1, max(arr_set) + 2):
        if i not in arr_set:
            return i
    
    return None
```"
372,Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","```python
import heapq

def heap_sort(lst):
    heapq.heapify(lst)
    return [heapq.heappop(lst) for _ in range(len(lst))]
```"
373,Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","```python
def find_cuboid_volume(length, width, height):
    """"""
    Calculate the volume of a cuboid.

    Parameters:
    length (float): The length of the cuboid.
    width (float): The width of the cuboid.
    height (float): The height of the cuboid.

    Returns:
    float: The volume of the cuboid.
    """"""
    return length * width * height
```"
374,Write a function to print all permutations of a given string including duplicates.,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list","```python
def all_permutations(s):
    if len(s) == 1:
        return [s]
    result = []
    for i in range(len(s)):
        m = s[i]
        remaining_string = s[:i] + s[i+1:]
        for p in all_permutations(remaining_string):
            result.append(m + p)
    return result
```"
375,Write a function to round the given number to the nearest multiple of a specific number.,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)","```python
def round_to_nearest_multiple(num, multiple):
    if num < 0:
        remainder = -num % multiple
        result = -((-num - remainder) // multiple * multiple)
    else:
        remainder = num % multiple
        result = (num + multiple - remainder) // multiple * multiple
    return result
```"
376,Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)","```python
def remove_duplicates(input_tuple, custom_value):
    seen = set()
    result_list = []
    
    for element in input_tuple:
        if element not in seen:
            seen.add(element)
            result_list.append(element)
        else:
            result_list.append(custom_value)
            
    return tuple(result_list)
```"
377,Write a python function to remove all occurrences of a character in a given string.,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ","```python
def remove_char(string, char):
    return string.replace(char, '')
```

Alternatively, you can also use a list comprehension with the `join()` method to achieve this:

```python
def remove_char(string, char):
    return ''.join([c for c in string if c != char])
```"
378,Write a python function to shift last element to first position in the given list.,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list","```python
def shift_last_to_first(lst):
    if len(lst) > 1:
        last_element = lst.pop()
        lst.insert(0, last_element)
    return lst
```"
379,Write a function to find the surface area of a cuboid.,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA","```python
def surface_area_of_cuboid(length, width, height):
    return 2 * (length * width + length * height + width * height)
```"
380,Write a function to generate a two-dimensional array.,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
","```python
def generate_2d_array(rows, cols):
    return [[0 for _ in range(cols)] for _ in range(rows)]
```"
381,Write a function to sort a list of lists by a given index of the inner list.,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result","```python
def sort_list_of_lists(list_of_lists, index):
    try:
        return sorted(list_of_lists, key=lambda x: (x[index], len(x)))
    except IndexError as e:
        raise ValueError(""Invalid index"") from e
```
This function takes a list of lists and an index as input. It attempts to sort the list of lists based on the specified index. If the index is out of range for any inner list, it raises a `ValueError`."
382,Write a function to find the number of rotations in a circularly sorted array.,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1","```python
def count_rotations(arr):
    if len(arr) == 0:
        return 0
    
    min_val = min(arr)
    
    for i in range(len(arr)):
        if arr[i] == min_val:
            return i % len(arr)

    return 0
```"
383,Write a python function to toggle all odd bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","```python
def toggle_odd_bits(n):
    mask = 0xAAAAAAAA
    return n ^ mask
```"
384,Write a python function to find the frequency of the smallest value in a given array.,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","```python
def smallest_frequency(arr):
    if len(arr) == 0:
        return None
    min_val = min(arr)
    return arr.count(min_val)
```"
385,Write a function to find the n'th perrin number using recursion.,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)","```python
def perrin(n):
    if n == 0:
        return 3
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        a, b, c = 3, 0, 2
        for _ in range(3, n + 1):
            a, b, c = b, c, c + a
        return c
```"
386,Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","```python
def min_swaps_for_bracket_balancing(s):
    stack = []
    swaps = 0
    for i in s:
        if i == '(':
            stack.append(i)
        elif i == ')':
            if not stack or stack[-1] != '(':
                while stack and stack[-1] != '(':
                    stack.pop()
                if not stack:
                    continue
                swaps += 1
            stack.pop()
    return swaps + len(stack) // 2
```"
387,Write a python function to check whether the hexadecimal number is even or odd.,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ","```python
def check_hexadecimal_parity(hex_number):
    try:
        decimal = int(hex_number, 16)
        if decimal % 2 == 0:
            return ""Even""
        else:
            return ""Odd""
    except ValueError:
        return ""Invalid hexadecimal number""
```"
388,Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","```python
def highest_power_of_two(n):
    if n <= 0:
        return None
    power = 1
    while (power << 1) <= n:
        power <<= 1
    return power
```"
389,Write a function to find the n'th lucas number.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ","```python
def lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
```"
390,Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","```python
def insert_string_at_beginning(lst, string):
    return [string + item for item in lst]
```"
391,Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result","```python
def lists_to_nested_dict(*lists):
    if len(lists) < 2:
        raise ValueError(""At least two lists are required"")

    result = {}
    for i in range(len(lists[0])):
        current = result
        for j, lst in enumerate(lists[:-1]):
            key = lst[i]
            if key not in current:
                current[key] = {}
            current = current[key]
        current[lists[-1][i]] = None

    return result
```"
392,"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]","```python
def max_sum(n):
    if n < 6:
        return n
    return max((max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5)), n)
```"
393,Write a function to find the list with maximum length using lambda function.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)","```python
find_max_length_list = lambda *lists: max(lists, key=lambda list: len(list))
```"
394,Write a function to check if given tuple is distinct or not.,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ","```python
def is_distinct(tup):
    return len(tup) == len(set(tup))
```"
395,Write a python function to find the first non-repeated character in a given string.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None","```python
def first_non_repeated_char(s):
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    for char in s:
        if char_count[char] == 1:
            return char
    return None
```"
396,Write a function to check whether the given string starts and ends with the same character or not using regex.,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ","```python
import re

def check_string(s):
    pattern = r'^(.).*\1$'
    if re.match(pattern, s):
        return True
    else:
        return False
```"
397,Write a function to find the median of three specific numbers.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median","```python
def find_median(a, b, c):
    numbers = sorted([a, b, c])
    if len(numbers) % 2 == 0:
        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2
    else:
        median = numbers[len(numbers)//2]
    return median
```"
398,Write a function to compute the sum of digits of each number of a given list.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","```python
def sum_of_digits(lst):
    return [sum(int(digit) for digit in str(num)) for num in lst]
```"
399,Write a function to perform the mathematical bitwise xor operation across the given tuples.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def bitwise_xor_tuples(*tuples):
    result = 0
    for tup in tuples:
        result ^= tup[0]
    return result
```"
400,Write a function to extract the frequency of unique tuples in the given list order irrespective.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)","```python
from collections import Counter

def frequency_of_tuples(lst):
    """"""
    Returns a dictionary with unique tuples from the input list as keys and their frequencies as values.
    
    :param lst: A list of tuples
    :return: A dictionary where keys are unique tuples and values are their frequencies
    """"""
    return dict(Counter(tuple(sorted(i)) for i in lst))
```"
401,Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def add_tuples(t1, t2):
    if len(t1) != len(t2):
        raise ValueError(""Both tuples must have the same length"")
    
    result = []
    for i in range(len(t1)):
        if not isinstance(t1[i], tuple) or not isinstance(t2[i], tuple):
            raise TypeError(""All elements of both tuples must be tuples themselves"")
        
        inner_result = []
        if len(t1[i]) != len(t2[i]):
            raise ValueError(""Inner tuples at index {} have different lengths"".format(i))
        
        for j in range(len(t1[i])):
            if not (isinstance(t1[i][j], int) and isinstance(t2[i][j], int)):
                raise TypeError(""All inner elements must be integers"")
            
            inner_result.append(t1[i][j] + t2[i][j])
        
        result.append(tuple(inner_result))
    
    return tuple(result)
```"
402,Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","```python
import math

def power(x, y, p):
    res = 1
    x = x % p
    if (x == 0):
        return 0
    while (y > 0):
        if ((y & 1) == 1):
            res = (res * x) % p
        y = y >> 1
        x = (x * x) % p
    return res

def modInverse(n, p):
    return power(n, p - 2, p)

def nCrModPFermat(n, r, p):
    if (n < r):
        return 0
    if (r == 0):
        return 1
    fac = [0 for i in range(n + 1)]
    fac[0] = 1
    for i in range(1, n + 1):
        fac[i] = (fac[i - 1] * i) % p
    return (fac[n] * modInverse(fac[r], p) % p *
            modInverse(fac[n - r], p) % p)
```"
403,Write a function to check if a url is valid or not using regex.,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False","```python
import re

def is_valid_url(url):
    pattern = r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$'
    if re.match(pattern, url):
        return True
    else:
        return False
```"
404,Write a python function to find the minimum of two numbers.,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ","```python
def find_min(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2
```"
405,Write a function to check whether an element exists within a tuple.,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False","```python
def check_element_in_tuple(element, tup):
    return element in tup
```"
406,Write a python function to find the parity of a given number.,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ","```python
def find_parity(n):
    parity = 0
    while n:
        parity ^= n & 1
        n >>= 1
    return 'even' if not parity else 'odd'
```"
407,Write a function to create the next bigger number by rearranging the digits of a given number.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False","```python
def next_bigger(n):
    digits = [int(d) for d in str(n)]
    i = len(digits) - 2
    while i >= 0 and digits[i] >= digits[i + 1]:
        i -= 1
    if i < 0:
        return None
    j = len(digits) - 1
    while digits[j] <= digits[i]:
        j -= 1
    digits[i], digits[j] = digits[j], digits[i]
    left, right = digits[:i + 1], digits[i + 1:]
    right.sort()
    return int(''.join(map(str, left + right)))
```"
408,Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs","```python
def k_pairs(arr1, arr2, k):
    if k == 0:
        return []
    
    if len(arr1) < len(arr2):
        shorter = sorted(arr1)
        longer = sorted(arr2)
    else:
        shorter = sorted(arr2)
        longer = sorted(arr1)

    pairs = []
    i, j = 0, 0
    while i < len(shorter) and j < len(longer) and len(pairs) < k:
        if shorter[i] + longer[j] <= 0:
            pairs.append((shorter[i], longer[j]))
            i += 1
        else:
            j += 1

    return pairs[:k]
```"
409,Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min","```python
def min_product(lst):
    if len(lst) < 2:
        raise ValueError(""The list must contain at least two tuples."")

    return min(a * b for (a, _), (_, b) in zip(lst, lst[1:]))
```"
410,Write a function to find the minimum value in a given heterogeneous list.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val","```python
def find_min_value(lst):
    try:
        min_val = None
        for item in lst:
            if isinstance(item, (int, float)):
                if min_val is None or item < min_val:
                    min_val = item
        return min_val
    except Exception as e:
        raise Exception(""An error occurred: "" + str(e))
```"
411,Write a function to convert the given snake case string to camel case string by using regex.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))","```python
import re

def snake_to_camel(snake_case_string):
    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), snake_case_string)
```"
412,Write a python function to remove odd numbers from a given list.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l","```python
def remove_odd_numbers(num_list):
    return [num for num in num_list if num % 2 == 0]
```"
413,Write a function to extract the nth element from a given list of tuples.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result","```python
def extract_nth_element(tuples_list, n):
    if n < 1:
        raise ValueError(""n must be a positive integer"")
    try:
        return tuples_list[n-1]
    except IndexError:
        raise IndexError(""Index out of range for the given list of tuples"")
```"
414,Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","```python
def value_exists(sequence, value):
    try:
        iter(sequence)
    except TypeError:
        raise ValueError(""Input sequence must be iterable"")

    return value in sequence
```"
415,Write a python function to find a pair with highest product from a given array of integers.,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ","```python
def highest_product_pair(arr):
    if len(arr) < 2:
        raise ValueError(""Array must have at least two elements"")
    
    max1 = max2 = float('-inf')
    min1 = min2 = float('inf')

    for num in arr:
        if num > max1:
            max2 = max1
            max1 = num
        elif num < max1 and num > max2:
            max2 = num
        
        if num < min1:
            min2 = min1
            min1 = num
        elif num > min1 and num < min2:
            min2 = num
    
    return max(max1 * max2, min1 * min2)
```"
416,Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]","```python
def max_sum(n):
    if n < 4:
        return n
    elif n % 3 == 0:
        return (n // 3) * 3
    elif n % 3 == 1:
        return max(max_sum(n - 2), max_sum((n - 2) // 3 + ((n - 2) % 3))) + 1
    else:
        return max(max_sum((n - 1) // 3 * 3 + (n - 1) % 3), max_sum((n - 4) // 3 * 3 + (n - 4) % 3)) + 2
```"
417,Write a function to find common first element in given list of tuple.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ","```python
def common_first_element(tuple_list):
    if not tuple_list:
        return None
    first_elements = [t[0] for t in tuple_list]
    from collections import Counter
    counter = Counter(first_elements)
    max_count = max(counter.values())
    common_elements = [k for k, v in counter.items() if v == max_count]
    return common_elements[0]
```"
418,Write a python function to find the sublist having maximum length.,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList","```python
def find_max_length_sublist(lst):
    max_len = 0
    max_sublst = None
    
    for i in range(len(lst)):
        for j in range(i + 1, len(lst) + 1):
            sublst = lst[i:j]
            
            if len(sublst) > max_len:
                max_len = len(sublst)
                max_sublst = sublst
                
    return max_sublst
```"
419,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum","```python
def round_and_multiply(num_list):
    rounded_nums = [round(num) for num in num_list]
    total_sum = sum(rounded_nums)
    result = total_sum * len(num_list)
    return result
```"
420,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum","```python
def cube_sum_of_first_n_even_numbers(n):
    return sum(i**3 for i in range(2, 2*n+1, 2))
```"
421,Write a function to concatenate each element of tuple by the delimiter.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ","```python
def concatenate_tuple_by_delimiter(tuple_to_concatenate, delimiter):
    """"""
    Concatenates each element of a tuple by a specified delimiter.

    Args:
        tuple_to_concatenate (tuple): A tuple containing elements to be concatenated.
        delimiter (str): The delimiter used for concatenation.

    Returns:
        str: A string where all elements from the input tuple are concatenated with the delimiter in between.
    """"""
    return delimiter.join(map(str, tuple_to_concatenate))
```"
422,Write a python function to find the average of cubes of first n natural numbers.,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ","```python
def average_of_cubes(n):
    total = sum(i**3 for i in range(1, n+1))
    return total / n
```"
423,Write a function to solve gold mine problem.,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ","```python
def max_gold(mine):
    rows = len(mine)
    cols = len(mine[0])
    dp = [[0 for _ in range(cols)] for _ in range(rows)]
    
    # Fill the first row of dp table
    for j in range(cols - 1, -1, -1):
        for i in range(rows):
            if j == cols - 1:
                dp[i][j] = mine[i][j]
            else:
                dp[i][j] = max(dp[(i + 1) % rows][(j + 1)] if (i + 1) < rows else float('-inf'),
                              dp[(i - 1 + rows) % rows][(j + 1)] if (i - 1 + rows) >= 0 else float('-inf'),
                              dp[i][(j + 1)]) + mine[i][j]
    
    # Find the maximum value in the first column
    return max(dp[i][0] for i in range(rows))
```"
424,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ","```python
def extract_rear_index_elements(tuple_of_strings):
    if len(tuple_of_strings) == 0:
        raise IndexError(""tuple is empty"")
    
    result = []
    for string in tuple_of_strings:
        if len(string) > 1:
            rear_index_element = next((char for char in string[::-1] if not char.isdigit()), None)
            if rear_index_element:
                result.append(rear_index_element)
            else:
                result.append(""No rear index element found"")
        elif len(string) == 1 and string.isalpha():
            result.append(string)
        else:
            result.append(""No rear index element found"")

    return tuple(result)
```"
425,Write a function to count the number of sublists containing a particular element.,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr","```python
def count_sublists_with_element(main_list, target):
    count = 0
    for sublist in main_list:
        if isinstance(sublist, list) and target in sublist:
            count += 1
    return count
```
I can modify the function according to your needs."
426,Write a function to filter odd numbers using lambda function.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums","```python
def filter_odd_numbers(numbers):
    return list(filter(lambda x: x % 2 != 0, numbers))
```"
427,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","```python
import re

def convert_date_format(date_str):
    pattern = r""(\d{4})-(\d{2})-(\d{2})""
    replacement = r""\3-\2-\1""
    return re.sub(pattern, replacement, date_str)
```"
428,Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","```python
def shell_sort(arr):
    n = len(arr)
    gap = n // 2
    
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
                
            arr[j] = temp
        gap //= 2
        
    return arr
```"
429,Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def extract_elements(tup1, tup2):
    elementwise = tuple(map(lambda x: (x[0], x[1]), zip(tup1, tup2)))
    tuples_ = tuple(zip(tup1, tup2))
    return elementwise, tuples_
```"
430,Write a function to find the directrix of a parabola.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix","```python
def find_directrix(a):
    if a < 0:
        return -1 / (4 * abs(a))
    elif a > 0:
        return 1 / (4 * a)
    else:
        raise ValueError(""Coefficient 'a' cannot be zero"")
```"
431,Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result","```python
def has_common_element(list1, list2):
    return len(set(list1) & set(list2)) > 0
```

or 

```python
def has_common_element(list1, list2):
    return any(element in list2 for element in list1)
```"
432,Write a function to find the median of a trapezium.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median","```python
def trapezium_median(base1, base2):
    if base1 <= 0 or base2 <= 0:
        raise ValueError(""Both bases must be positive"")
    median = (base1 + base2) / 2
    return median
```

Note: The above function assumes that the two bases are the only required inputs to calculate the median of a trapezium."
433,Write a function to check whether the entered number is greater than the elements of the given array.,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')","```python
def is_greater_than_array(num, array):
    for element in array:
        if num <= element:
            return False
    return True
```
def check_number_in_array(num, array):
    return all(num > element for element in array)
```"
434,Write a function that matches a string that has an a followed by one or more b's.,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
","```
import re

def match_ab(s):
    pattern = r""a(b+)""
    if re.search(pattern, s):
        return True
    else:
        return False
```"
435,Write a python function to find the last digit of a given number.,"def last_Digit(n) :
    return (n % 10) ","```python
def last_digit(num):
    num_str = str(abs(num))
    if len(num_str) == 1:
        return int(num_str)
    else:
        return int(num_str[-1])
```"
436,Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","```python
def print_negative_numbers(lst):
    for num in lst:
        if isinstance(num, (int, float)) and num < 0:
            print(num)
```

This function takes a list as input and prints each negative number it encounters within the list."
437,Write a function to remove odd characters in a string.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2","```python
def remove_odd_chars(s):
    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])
```"
438,Write a function to count bidirectional tuple pairs.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ","```python
def count_bidirectional_tuple_pairs(pairs):
    pair_counts = {}
    for pair in pairs:
        if (pair[1], pair[0]) in pairs:
            key = tuple(sorted(pair))
            pair_counts[key] = pair_counts.get(key, 0) + 1
    return len(pair_counts)
```"
439,Write a function to convert a list of multiple integers into a single integer.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","```python
def convert_list_to_integer(lst):
    lst.sort()
    num_str = ''.join(map(str, lst))
    return int(num_str)
```"
440,Write a function to find all adverbs and their positions in a given sentence.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","```python
import re
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

def find_adverbs(sentence):
    lemmatizer = WordNetLemmatizer()
    adverb_positions = {}
    words = sentence.split()
    
    for i, word in enumerate(words):
        word_net_pos_tag = get_wordnet_pos_tag(word)
        
        if 'r' in word_net_pos_tag:
            base_form = lemmatizer.lemmatize(word, pos=word_net_pos_tag)
            
            if base_form.endswith('ly'):
                adverb_positions[word] = i
                
    return adverb_positions


def get_wordnet_pos_tag(word):
    from nltk import pos_tag
    tag = pos_tag([word])[0][1]
    
    if tag.startswith('J'):
        return 'a'
    elif tag.startswith('V'):
        return 'v'
    elif tag.startswith('N'):
        return 'n'
    elif tag.startswith('R'):
        return 'r'
    else:
        return ''
```"
441,Write a function to find the surface area of a cube.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea","```python
def surface_area_of_cube(side_length):
    if side_length <= 0:
        raise ValueError(""Side length must be a positive number"")
    return 6 * (side_length ** 2)
```"
442,Write a function to find the ration of positive numbers in an array of integers.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","```python
def positive_ratio(numbers):
    total_count = len(numbers)
    if total_count == 0:
        raise ValueError(""Input list is empty"")
    
    positive_count = sum(1 for num in numbers if num > 0)
    
    return positive_count / total_count
```"
443,Write a python function to find the largest negative number from the given list.,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max","```python
def find_largest_negative(numbers):
    negative_numbers = [num for num in numbers if num < 0]
    return max(negative_numbers) if negative_numbers else None
```"
444,Write a function to trim each tuple by k in the given tuple list.,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ","```python
def trim_tuples(tuple_list, k):
    """"""
    Trim each tuple in the given list by k.

    Args:
        tuple_list (list): List of tuples to be trimmed.
        k (int): Number of elements to remove from the start and end of each tuple.

    Returns:
        list: List of trimmed tuples.
    """"""
    return [t[k:-k] for t in tuple_list]
```"
445,Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def index_wise_multiplication(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""Both tuples must have the same length"")
    
    result = []
    for i in range(len(tuple1)):
        result.append(tuple1[i] * tuple2[i])
    
    return tuple(result)
```"
446,Write a python function to count the occurence of all elements of list in a tuple.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ","```python
def count_list_elements_in_tuple(lst, tup):
    element_counts = {}
    for element in lst:
        if isinstance(element, (list, tuple)):
            for sub_element in element:
                element_counts[sub_element] = element_counts.get(sub_element, 0) + tup.count(sub_element)
        else:
            element_counts[element] = element_counts.get(element, 0) + tup.count(element)
    return element_counts
```"
447,Write a function to find cubes of individual elements in a list using lambda function.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums","```python
def find_cubes(lst):
    return list(map(lambda x: x**3, lst))
```"
448,Write a function to calculate the sum of perrin numbers.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum","```python
def sum_of_perrin_numbers(n):
    if n < 0:
        raise ValueError(""Input must be a non-negative integer"")
    elif n == 0:
        return 0
    perrin_sequence = [3, 0, 2]
    for i in range(3, n + 1):
        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])
    return sum(perrin_sequence[:n + 1])
```"
449,Write a python function to check whether the triangle is valid or not if 3 points are given.,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ","```python
import math

def is_valid_triangle(point1, point2, point3):
    def distance(pointA, pointB):
        return math.sqrt((pointA[0] - pointB[0])**2 + (pointA[1] - pointB[1])**2)

    a = distance(point2, point3)
    b = distance(point1, point3)
    c = distance(point1, point2)

    if a + b > c and a + c > b and b + c > a:
        return True
    else:
        return False
```"
450,Write a function to extract specified size of strings from a give list of string values.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result","```python
def extract_strings(lst, size):
    return [string for string in lst if len(string) == size]
```"
451,Write a function to remove all whitespaces from the given string using regex.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))","```python
import re

def remove_whitespaces(input_string):
    return re.sub(r'\s+', '', input_string)
```"
452,Write a function that gives loss amount if the given amount has loss else return none.,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None","```python
def calculate_loss(amount):
    if amount < 0:
        return abs(amount)
    else:
        return None
```"
453,Write a python function to find the sum of even factors of a number.,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ","```python
def sum_of_even_factors(n):
    def is_factor(num, factor):
        if num % factor == 0:
            return True
        else:
            return False

    even_sum = 0
    for i in range(2, n+1):
        if is_factor(n, i) and i % 2 == 0:
            even_sum += i

    return even_sum
```"
454,Write a function that matches a word containing 'z'.,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```
import re
def match_word_with_z(word):
    pattern = r'\w*z\w*'
    if re.fullmatch(pattern, word):
        return True
    return False
```"
455,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","```python
def has_31_days(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False
```"
456,Write a function to reverse strings in a given list of string values.,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result","```python
def reverse_strings(string_list):
    return [s[::-1] for s in string_list]
```"
457,Write a python function to find the sublist having minimum length.,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList","```python
def find_min_length_sublist(main_list):
    if not main_list:
        return None
    
    min_length = float('inf')
    result = []
    
    for sub_list in main_list:
        if isinstance(sub_list, list) and len(sub_list) < min_length:
            min_length = len(sub_list)
            result = [sub_list]
        elif isinstance(sub_list, list) and len(sub_list) == min_length:
            result.append(sub_list)
    
    return result
```"
458,Write a function to find the area of a rectangle.,"def rectangle_area(l,b):
  area=l*b
  return area","```python
def calculate_rectangle_area(length: float, width: float) -> float:
    if length <= 0 or width <= 0:
        raise ValueError(""Length and Width must be positive numbers."")
    area = length * width
    return round(area, 2)
```"
459,Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","```python
import re

def remove_uppercase_substrings(input_string):
    return re.sub('[A-Z]+', '', input_string)
```

This function takes an input string and uses a regular expression to find all uppercase substrings. The `re.sub` function then replaces these substrings with an empty string, effectively removing them from the original string."
460,Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","```python
def get_first_elements(sublists):
    return [sublist[0] for sublist in sublists]
```"
461,Write a python function to count the upper case characters in a given string.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr","```python
def count_upper_case_characters(input_string):
    return sum(1 for char in input_string if char.isupper())
```"
462,Write a function to find all possible combinations of the elements of a given list.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result","```python
import itertools

def find_combinations(input_list):
    result = []
    for r in range(len(input_list) + 1):
        combinations_object = itertools.combinations(input_list, r)
        combinations_list = list(combinations_object)
        result.extend(combinations_list)
    return result
```"
463,Write a function to find the maximum product subarray of the given array.,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far","```python
def maxProductSubarray(nums):
    if not nums:
        return 0
    
    max_product = min_product = result = nums[0]
    
    for i in range(1, len(nums)):
        if nums[i] < 0:
            max_product, min_product = min_product, max_product
            
        max_product = max(nums[i], max_product * nums[i])
        min_product = min(nums[i], min_product * nums[i])
        
        result = max(result, max_product)
    
    return result
```"
464,Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result","```python
def check_same_values(dictionary):
    values = dictionary.values()
    return len(set(values)) == 1
```"
465,Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","```python
def drop_empty_items(dictionary):
    return {key: value for key, value in dictionary.items() if value}
```

```python
# Alternative implementation using dict comprehension with conditional expression
def drop_empty_items_alt(dictionary):
    return {key: value for key, value in dictionary.items() if value or isinstance(value, (str, list, tuple))}
```
Note that the second function (`drop_empty_items_alt`) treats empty strings, lists, and tuples as non-empty items. If you want to treat them as empty, use the first function."
466,Write a function to find the peak element in the given array.,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ","```python
def findPeakElement(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = (left + right) // 2
        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1
    return left
```"
467,Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","```python
def decimal_to_octal(n):
    if n == 0:
        return '0'
    result = ''
    while n > 0:
        remainder = n % 8
        n = n // 8
        result = str(remainder) + result
    return result
```"
468,Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)","```python
def max_product_increasing_subsequence(arr):
    n = len(arr)
    max_product = [arr[i] for i in range(n)]
    min_product = [arr[i] for i in range(n)]

    for i in range(1, n):
        if arr[i] > 0:
            max_product[i] = max(max_product[i], max_product[i-1] * arr[i])
            min_product[i] = min(min_product[i], min_product[i-1] * arr[i])
        else:
            max_product[i] = max(max_product[i], min_product[i-1] * arr[i])
            min_product[i] = min(min_product[i], max_product[i-1] * arr[i])

    return max(max_product)
```"
469,Write a function to find the maximum profit earned from a maximum of k stock transactions,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]","```python
def maxProfit(prices, k):
    n = len(prices)
    dp = [[[0 for _ in range(2)] for _ in range(k+1)] for _ in range(n)]
    
    for i in range(1, n):
        for j in range(1, min(i//2 + 1, k)+1):
            dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
            dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])
            
    return dp[n-1][k][0]
```"
470,Write a function to find the pairwise addition of the elements of the given tuples.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","```python
def pairwise_addition(tup1, tup2):
    return tuple(a + b for a, b in zip(tup1, tup2))
```

You can use this function like this:

`pairwise_addition((1, 2, 3), (4, 5, 6))`"
471,Write a python function to find remainder of array multiplication divided by n.,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ","```python
def find_remainder(arr, n):
    remainder = 1
    for num in arr:
        remainder = (remainder * num) % n
    return remainder
```"
472,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ","```python
def are_consecutive(nums):
    nums = sorted(set(nums))
    return all(b - a == 1 for a, b in zip(nums, nums[1:]))
```"
473,Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","```python
def tuple_intersection(tuple_list):
    if not tuple_list:
        return ()
    
    intersection = set(tuple_list[0])
    
    for tup in tuple_list[1:]:
        intersection &= set(tup)
        
    return tuple(sorted(intersection))
```"
474,Write a function to replace characters in a string.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2","```python
def replace_chars(input_str, old_char, new_char):
    if len(old_char) != 1:
        raise ValueError(""Old character must be a single character"")
    
    return input_str.replace(old_char, new_char)
```"
475,Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","```python
def sort_counter_by_value(counter):
    return dict(sorted(counter.items(), key=lambda item: item[1]))
```"
476,Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","```python
def sum_of_largest_and_smallest(arr):
    if len(arr) < 1:
        return None
    largest = max(arr)
    smallest = min(arr)
    return largest + smallest
```"
477,Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())","```python
def convert_to_lower_case(input_string):
    return input_string.lower()
```"
478,Write a function to remove lowercase substrings from a given string.,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result","```python
def remove_lowercase_substrings(s):
    result = ''
    for char in s:
        if char.isupper():
            result += char
        elif not any(c.islower() for c in result):
            result = ''
        else:
            break
    return result
```"
479,Write a python function to find the first digit of a given number.,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ","```python
def first_digit(n):
    n = abs(n)
    while n >= 10:
        n //= 10
    return n
```"
480,Write a python function to find the maximum occurring character in a given string.,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch","```python
def max_occurring_char(s):
    s = ''.join(e for e in s if e.isalnum()).lower()
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    return max(char_count, key=char_count.get)
```"
481,Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","```python
def is_subset_sum(nums, target):
    n = len(nums)
    dp = [[False] * (target + 1) for _ in range(n + 1)]

    for i in range(n + 1):
        dp[i][0] = True

    for i in range(1, n + 1):
        for j in range(1, target + 1):
            if nums[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]

    return dp[n][target]
```"
482,Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ","```python
import re

def find_sequences(s):
    return re.findall(r'[A-Z][a-z]+', s)
```"
483,Write a python function to find the first natural number whose factorial is divisible by x.,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ","```python
def find_n(x):
    def factorial(n):
        if n == 0:
            return 1
        else:
            return n * factorial(n-1)
    
    n = 1
    while True:
        fact = factorial(n)
        if fact % x == 0:
            return n
        n += 1
```"
484,Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","```python
def remove_matching_tuples(tuple1, tuple2):
    list1 = list(tuple1)
    for element in tuple2:
        if element in list1:
            list1.remove(element)
    return tuple(list1)

# or 

def remove_matching_tuples(tuple1, tuple2):
    set2 = set(tuple2)
    return tuple(i for i in tuple1 if i not in set2)
```"
485,Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","```python
def largest_palindromic_number(arr):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]
    
    palindromes = [num for num in arr if is_palindrome(num)]
    return max(palindromes) if palindromes else None
```"
486,Write a function to compute binomial probability for the given number.,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ","```python
from math import comb

def binomial_probability(n, k, p):
    return comb(n, k) * (p ** k) * ((1 - p) ** (n - k))
```

Note: You need to pass the number of trials (n), number of successes (k), and probability of success (p) as arguments to this function. The result is the binomial probability for the given parameters."
487,Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup","```python
def sort_tuples(tuples_list):
    return sorted(tuples_list, key=lambda x: x[-1])
```"
488,Write a function to find the area of a pentagon.,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","```python
import math

def pentagon_area(side_length):
    area = (math.sqrt(25 + 10 * math.sqrt(5)) / 4) * side_length ** 2
    return round(area, 2)
```

Alternatively, you can use a more simplified formula for the area of a regular pentagon:

```python
import math

def pentagon_area(side_length):
    n = 5
    area = (n * side_length ** 2) / (4 * math.tan(math.pi/n))
    return round(area, 2)
```"
489,Write a python function to find the frequency of the largest value in a given array.,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","```python
def find_frequency_of_largest(arr):
    if len(arr) == 0:
        return 0
    max_val = max(arr)
    return arr.count(max_val)
```"
490,Write a function to extract all the pairs which are symmetric in the given tuple list.,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ","```python
def symmetric_pairs(tuple_list):
    pairs = []
    for pair in tuple_list:
        if (pair[1], pair[0]) in tuple_list and pair not in pairs and (pair[1], pair[0]) != pair:
            pairs.append(pair)
    return pairs
```"
491,Write a function to find the sum of geometric progression series.,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total","```python
def sum_of_geometric_progression(a, r, n):
    if abs(r) < 1:
        return a * (1 - r ** n) / (1 - r)
    elif abs(r) > 1:
        return a * ((r ** n) - 1) / (r - 1)
    else:
        return a * n
```"
492,Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","```python
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (high + low) // 2
        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid
    return -1
```"
493,"Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons","```python
import math

def hexagon_grid(size):
    result = []
    for i in range(-size, size + 1):
        row = []
        for j in range(-size, size + 1):
            x_offset = (j % 2) * 0.5
            x = i + x_offset
            y = math.sqrt(3) / 2 * j
            points = [
                (x - 0.5, y + math.sqrt(3) / 6),
                (x + 0.25, y + math.sqrt(3) / 3),
                (x + 0.75, y + math.sqrt(3) / 3),
                (x + 1, y),
                (x + 0.75, y - math.sqrt(3) / 3),
                (x + 0.25, y - math.sqrt(3) / 3)
            ]
            row.append(points)
        result.append(row)
    return result
```"
494,Write a function to convert the given binary tuple to integer.,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ","```python
def binary_to_integer(binary_tuple):
    binary_string = ''.join(map(str, binary_tuple))
    if set(binary_string).issubset({'0', '1'}):
        return int(binary_string, 2)
    raise ValueError(""Invalid binary string"")
```"
495,Write a function to remove lowercase substrings from a given string by using regex.,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)","```python
import re

def remove_lowercase_substrings(input_string):
    """"""
    This function removes all lowercase substrings from a given string.

    Args:
        input_string (str): The input string to process.

    Returns:
        str: The processed string with all lowercase substrings removed.
    """"""
    return re.sub('[a-z]+', '', input_string)
```"
496,Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums","```python
import heapq

def find_smallest_integer(num_list):
    if not num_list:
        return None
    
    smallest = heapq.nsmallest(1, num_list)[0]
    
    return smallest
```"
497,Write a function to find the surface area of a cone.,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","```python
import math

def cone_surface_area(radius, height):
    slant_height = math.sqrt(radius**2 + height**2)
    base_area = math.pi * radius ** 2
    lateral_surface_area = math.pi * radius * slant_height
    return base_area + lateral_surface_area
```

This code defines a function that calculates the surface area of a cone. It takes two parameters: the radius and height of the cone. The surface area is calculated by adding the area of the circular base to the lateral (side) surface area, using the Pythagorean theorem to find the slant height."
498,Write a python function to find gcd of two positive integers.,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd","```python
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a
```

This function implements the Euclidean algorithm for finding the greatest common divisor of two integers. The `while` loop continues until the remainder is zero, at which point `a` contains the GCD."
499,Write a function to find the diameter of a circle.,"def diameter_circle(r):
  diameter=2*r
  return diameter","```python
def find_diameter(radius):
    if radius < 0:
        raise ValueError(""Radius cannot be negative"")
    return 2 * radius
```"
500,Write a function to concatenate all elements of the given list into a string.,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ","```python
def concat_list_elements(input_list):
    return ''.join(map(str, input_list))
```

Please note that this function converts each element of the list into a string before joining them together, so it can handle lists containing elements of different data types (e.g., integers, floats, strings)."
501,Write a python function to find common divisor between two numbers in a given pair.,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result","```python
def find_common_divisor(num1, num2):
    if num1 < num2:
        num1, num2 = num2, num1
    for i in range(num2, 0, -1):
        if num1 % i == 0 and num2 % i == 0:
            return i
```"
502,Write a python function to find remainder of two numbers.,"def find(n,m):
  r = n%m
  return (r)","```python
def find_remainder(dividend, divisor):
    if divisor == 0:
        raise ZeroDivisionError(""Divisor cannot be zero"")
    return dividend % divisor
```"
503,Write a function to add consecutive numbers of a given list.,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result","```python
def add_consecutive_numbers(num_list):
    result = []
    total_sum = 0
    for i in range(len(num_list)):
        if i < len(num_list) - 1:
            if num_list[i] + 1 == num_list[i+1]:
                total_sum += num_list[i]
            else:
                total_sum += num_list[i]
                result.append(total_sum)
                total_sum = 0
        else:
            total_sum += num_list[i]
            result.append(total_sum)
    return result
```"
504,Write a python function to find the cube sum of first n natural numbers.,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum","```python
def cube_sum(n):
    return sum(i**3 for i in range(1, n+1))
```

This function takes an integer `n` as input and returns the sum of the cubes of the first `n` natural numbers. The expression `i**3` calculates the cube of each number, and `sum(...)` adds up these values."
505,Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","```python
def move_zeroes(arr):
    left = 0
    for right in range(len(arr)):
        if arr[right] != 0:
            arr[left], arr[right] = arr[right], arr[left]
            left += 1
    return arr
```"
506,"Write a function to calculate the permutation coefficient of given p(n, k).","def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ","```python
import math

def permutation_coefficient(n, k):
    if k > n:
        raise ValueError(""k cannot be greater than n"")
    return math.factorial(n) // math.factorial(n - k)
```"
507,Write a function to remove specific words from a given list.,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ","```python
def remove_words(word_list, words_to_remove):
    """"""
    Removes specific words from a given list.

    Args:
        word_list (list): The original list of words.
        words_to_remove (list): A list of words to be removed.

    Returns:
        list: The updated list with the specified words removed.
    """"""
    return [word for word in word_list if word not in words_to_remove]
```"
508,Write a function to check if the common elements between two given lists are in the same order or not.,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2","```python
def check_common_elements_order(list1, list2):
    common_elements = set(list1) & set(list2)
    if not common_elements:
        return True
    
    index_list1 = [list1.index(element) for element in common_elements]
    index_list2 = [list2.index(element) for element in common_elements]
    
    return index_list1 == sorted(index_list1) and index_list2 == sorted(index_list2)
```"
509,Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","```python
def average_of_odd_numbers(n):
    odd_numbers = [i for i in range(1, n+1) if i % 2 != 0]
    return sum(odd_numbers) / len(odd_numbers)
```"
510,Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]","```python
def numberOfSubsequences(arr, k):
    res = 0
    for i in range(len(arr)):
        prod = arr[i]
        if prod < k:
            res += 1
        for j in range(i + 1, len(arr)):
            prod *= arr[j]
            if prod >= k:
                break
            res += 1
    return res
```"
511,Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum","```python
def min_sum_of_factors(n):
    factors = set()
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            factors.add(i)
            factors.add(n // i)
    return sum(factors)
```

Please note that this function returns the sum of all factors (not necessarily prime), not just the prime factors. If you want to find the minimum sum of prime factors, you would need a different approach."
512,Write a function to count the element frequency in the mixed nested tuple.,"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ","```python
def count_element_frequency(nested_tuple):
    frequency_dict = {}
    
    def recursive_count(element):
        if isinstance(element, (list, tuple)):
            for item in element:
                recursive_count(item)
        elif isinstance(element, dict):
            for key, value in element.items():
                recursive_count(key)
                recursive_count(value)
        else:
            frequency_dict[element] = frequency_dict.get(element, 0) + 1
    
    recursive_count(nested_tuple)
    
    return frequency_dict
```"
513,Write a function to convert tuple into list by adding the given string after every element.,"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ","```python
def convert_tuple_to_list(input_tuple, string):
    result = []
    for element in input_tuple:
        if isinstance(element, tuple):
            result.append(convert_tuple_to_list(element, string))
        else:
            result.append(str(element) + string)
    return result
```"
514,Write a function to find the summation of tuple elements in the given tuple list.,"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ","```python
def summation_of_tuple_elements(tuple_list):
    return [sum(t) for t in tuple_list]
```"
515,Write a function to check if there is a subset with sum divisible by m.,"def modular_sum(arr, n, m): 
	if (n > m): 
		return True
	DP = [False for i in range(m)] 
	for i in range(n): 
		if (DP[0]): 
			return True
		temp = [False for i in range(m)] 
		for j in range(m): 
			if (DP[j] == True): 
				if (DP[(j + arr[i]) % m] == False): 
					temp[(j + arr[i]) % m] = True
		for j in range(m): 
			if (temp[j]): 
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]","```python
def is_subset_sum_divisible(nums, m):
    n = len(nums)
    dp = [[False] * (m + 1) for _ in range(n + 1)]
    
    for i in range(n + 1):
        dp[i][0] = True
    
    for i in range(1, n + 1):
        for j in range(m + 1):
            dp[i][j] |= dp[i - 1][j]
            if nums[i - 1] <= j:
                dp[i][j] |= dp[i - 1][j - nums[i - 1]]
    
    return dp[n][m]
```"
516,Write a function to sort a list of elements using radix sort.,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums","```python
def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10
    
    for i in range(n):
        index = arr[i] // exp
        count[index % 10] += 1
    
    for i in range(1, 10):
        count[i] += count[i - 1]
    
    for i in range(n-1, -1, -1):
        index = arr[i] // exp
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
    
    for i in range(n):
        arr[i] = output[i]


def radix_sort(arr):
    max_val = max(arr)
    exp = 1
    
    while max_val // exp > 0:
        counting_sort(arr, exp)
        exp *= 10
```"
517,Write a python function to find the largest postive number from the given list.,"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max","```python
def largest_positive_number(lst):
    positive_numbers = [num for num in lst if isinstance(num, (int, float)) and num > 0]
    return max(positive_numbers) if positive_numbers else None
```"
518,Write a function to find the square root of a perfect number.,"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ","```python
import math

def find_square_root_of_perfect_number(n):
    if n < 0:
        raise ValueError(""Input number should be non-negative."")
    elif not isinstance(n, (int, float)):
        raise TypeError(""Input number should be a numeric value."")
    else:
        root = math.sqrt(n)
        return int(root) if root.is_integer() else None
```"
519,Write a function to calculate volume of a tetrahedron.,"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)","```python
import math

def tetrahedron_volume(a):
    return (1/12) * math.sqrt(2) * a**3
```

Alternatively:

```python
import math

def tetrahedron_volume(a):
    height = math.sqrt((2/3)*a**2)
    base_area = (math.sqrt(3)/4)*a**2
    return (1/3) * base_area * height
```"
520,Write a function to find the lcm of the given array elements.,"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ","```python
import math

def find_lcm(arr):
    lcm = arr[0]
    for i in range(1, len(arr)):
        lcm = lcm * arr[i] // math.gcd(lcm, arr[i])
    return lcm
```"
521,Write a function to print check if the triangle is scalene or not.,"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False","```python
def is_scalene(a, b, c):
    sides = [a, b, c]
    sides.sort()
    if sides[0] + sides[1] > sides[2]:
        return len(set(sides)) == 3
    else:
        return False
```"
522,Write a function to find the longest bitonic subsequence for the given array.,"def lbs(arr): 
	n = len(arr) 
	lis = [1 for i in range(n+1)] 
	for i in range(1 , n): 
		for j in range(0 , i): 
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)] 
	for i in reversed(range(n-1)): 
		for j in reversed(range(i-1 ,n)): 
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n): 
		maximum = max((lis[i] + lds[i]-1), maximum) 
	return maximum","```python
def longest_bitonic_subsequence(arr):
    n = len(arr)
    lis = [1] * n
    lds = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1

    for i in range(n - 2, -1, -1):
        for j in range(n - 1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1

    max_length = 0
    for i in range(n):
        max_length = max(max_length, lis[i] + lds[i] - 1)

    return max_length
```"
523,"Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ","```python
check_string = lambda s: len(s) == 8 and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s)
```"
524,Write a function to find the sum of maximum increasing subsequence of the given array.,"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max","```python
def max_increasing_subsequence_sum(arr):
    n = len(arr)
    dp = [[0]*n for _ in range(n)]
    
    for i in range(n):
        dp[i][i] = arr[i]
        
    for length in range(2, n+1):
        for i in range(n-length+1):
            j = i + length - 1
            if arr[j] > arr[i]:
                dp[i][j] = max(dp[i+1][j], arr[i] + dp[i+1][j])
            else:
                dp[i][j] = dp[i+1][j]
                
    return dp[0][n-1]
```"
525,Write a python function to check whether two given lines are parallel or not.,"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]","```python
def are_lines_parallel(line1, line2):
    x1, y1 = line1[0]
    x2, y2 = line1[1]
    x3, y3 = line2[0]
    x4, y4 = line2[1]
    
    slope_line1 = (y2 - y1) / (x2 - x1)
    slope_line2 = (y4 - y3) / (x4 - x3)
    
    return slope_line1 == slope_line2
```"
526,Write a python function to capitalize first and last letters of each word of a given string.,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ","```python
def capitalize_first_last(word):
    if len(word) > 1:
        return word[0].upper() + word[1:-1] + word[-1].upper()
    return word.upper()

def process_string(s):
    words = s.split()
    capitalized_words = [capitalize_first_last(word) for word in words]
    return ' '.join(capitalized_words)
```"
527,Write a function to find all pairs in an integer array whose sum is equal to a given number.,"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","```python
def find_pairs(nums, target):
    if len(nums) <= 1:
        return []
    
    num_set = set()
    pairs = set()
    
    for num in nums:
        complement = target - num
        
        if complement in num_set:
            pair = tuple(sorted((num, complement)))
            pairs.add(pair)
        
        num_set.add(num)
    
    return list(pairs)
```"
528,Write a function to find the list of lists with minimum length.,"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ","```python
def min_length_list(lists):
    return min(lists, key=len)
```"
529,Write a function to find the nth jacobsthal-lucas number.,"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]","```python
def jacobsthal_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, 2 * b + a
        return b
```"
530,Write a function to find the ration of negative numbers in an array of integers.,"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","```python
def ratio_of_negative_numbers(array):
    negative_count = sum(1 for num in array if num < 0)
    total_count = len(array)
    
    if total_count == 0:
        return None
    
    return negative_count / total_count
```"
531,Write a function to find minimum number of coins that make a given value.,"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ","```python
def min_coins(coins, value):
    dp = [float('inf')] * (value + 1)
    dp[0] = 0
    for coin in coins:
        for i in range(coin, value + 1):
            dp[i] = min(dp[i], dp[i - coin] + 1)
    return dp[value] if dp[value] != float('inf') else -1
```"
532,Write a function to check if the two given strings are permutations of each other.,"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True","```python
def are_permutations(str1, str2):
    if sorted(str1) == sorted(str2):
        return True
    else:
        return False
```

Alternatively, you can use Python's built-in Counter class from the collections module:

```python
from collections import Counter

def are_permutations(str1, str2):
    return Counter(str1) == Counter(str2)
```"
533,Write a function to remove particular data type elements from the given tuple.,"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ","```python
def remove_data_type_elements(tup, data_type):
    return tuple(i for i in tup if type(i) != data_type)
```"
534,Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)","```python
def search_pattern(original_string, pattern):
    try:
        index = original_string.index(pattern)
        return {""found"": True, ""location"": index}
    except ValueError:
        return {""found"": False, ""location"": None}
```"
535,Write a function to find the top or bottom surface area of a cylinder.,"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea","```python
import math

def cylinder_surface_area(radius, height):
    side_area = 2 * math.pi * radius * height
    top_bottom_area = 2 * math.pi * (radius ** 2)
    total_surface_area = side_area + top_bottom_area
    
    return {
        'side': side_area,
        'top_bottom': top_bottom_area,
        'total': total_surface_area
    }
```"
536,Write a function to select the nth items of a list.,"def nth_items(list,n):
 return list[::n]","```python
def select_nth_items(lst, n):
    """"""
    Selects every nth item from a given list.

    Args:
        lst (list): The input list.
        n (int): The interval at which items are selected.

    Returns:
        list: A new list containing every nth item from the input list.
    """"""
    return [lst[i] for i in range(n-1, len(lst), n)]
```"
537,Write a python function to find the first repeated word in a given string.,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'","```python
def first_repeated_word(s):
    words = s.split()
    seen = set()
    for word in words:
        if word.lower() in seen:
            return word
        seen.add(word.lower())
    return None
```"
538,Write a python function to convert a given string list to a tuple.,"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","```python
def convert_list_to_tuple(string_list):
    if not isinstance(string_list, list):
        raise ValueError(""Input must be a list"")
    for item in string_list:
        if not isinstance(item, str):
            raise ValueError(""All elements of the list must be strings"")
    return tuple(string_list)
```"
539,Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result","```python
def power_list(base):
    return list(map(lambda x: base ** x, range(len(base))))
```

Alternatively, if you want to raise each number in the list `base` to the power of its index:

```python
def power_list(base):
    return list(map(lambda x, i: x ** i, base, range(len(base))))
```"
540,Write a python function to find the difference between highest and least frequencies in a given array.,"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ","```python
def frequency_difference(arr):
    freq = {}
    for num in arr:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    max_freq = max(freq.values())
    min_freq = min(freq.values())
    return max_freq - min_freq
```"
541,Write a function to find if the given number is abundant or not.,"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False","```python
def is_abundant(n):
    if n < 1:
        return False
    sum_of_divisors = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            if n // i == i:
                sum_of_divisors += i
            else:
                sum_of_divisors += i + n // i
    return sum_of_divisors > 2 * n
```"
542,"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.","import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))","```python
import re

def replace_characters(input_string):
    pattern = r'[,. ]'
    replacement = ':'
    output_string = re.sub(pattern, replacement, input_string)
    return output_string
```

Alternatively:

```python
import re

def replace_characters(input_string):
    return re.sub(r'[,. ]', ':', input_string)
```"
543,Write a function to add two numbers and print number of digits of sum.,"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count","```python
def add_and_count_digits(num1, num2):
    sum = num1 + num2
    count = len(str(abs(sum)))
    return sum, count
```"
544,Write a function to flatten the tuple list to a string.,"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ","```python
def flatten_tuple_list(tuple_list):
    if not tuple_list:
        return """"

    flat_str = """"
    for tup in tuple_list:
        flat_str += """".join(map(str, tup))
    
    return flat_str
```

Alternatively:

```python
def flatten_tuple_list(tuple_list):
    return """".join(char for tup in tuple_list for char in map(str, tup)) if tuple_list else """"
```"
545,Write a python function to toggle only first and last bits of a given number.,"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) ","```python
def toggle_first_last_bits(n):
    num_bits = n.bit_length()
    first_bit_mask = 1 << (num_bits - 1)
    last_bit_mask = 1
    return n ^ (first_bit_mask | last_bit_mask)
```"
546,Write a function to find the last occurrence of a character in a string.,"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1","```python
def find_last_occurrence(string, char):
    for i in range(len(string) - 1, -1, -1):
        if string[i] == char:
            return i
    return None
```"
547,Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.,"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum","```python
def sum_of_hamming_distances(n):
    def hamming_distance(x, y):
        return bin(x ^ y).count('1')

    total_sum = 0
    for i in range(n + 1):
        for j in range(i + 1, n + 1):
            total_sum += hamming_distance(i, j)
    return total_sum
```"
548,Write a function to find the length of the longest increasing subsequence of the given sequence.,"def longest_increasing_subsequence(arr): 
	n = len(arr) 
	longest_increasing_subsequence = [1]*n 
	for i in range (1 , n): 
		for j in range(0 , i): 
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n): 
		maximum = max(maximum , longest_increasing_subsequence[i]) 
	return maximum","```python
def longest_increasing_subsequence(sequence):
    if len(sequence) == 0:
        return 0
    
    lengths = [1] * len(sequence)
    
    for i in range(1, len(sequence)):
        for j in range(i):
            if sequence[i] > sequence[j]:
                lengths[i] = max(lengths[i], lengths[j] + 1)
    
    return max(lengths)
```"
549,Write a python function to find the sum of fifth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ","```python
def sum_of_fifth_power(n):
    return sum(i**5 for i in range(1, 2*n, 2))
```"
550,Write a python function to find the maximum element in a sorted and rotated array.,"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ","```python
def find_max_element(arr):
    low = 0
    high = len(arr) - 1
    while low < high:
        mid = (low + high) // 2
        if arr[mid] > arr[high]:
            high = mid
        else:
            low = mid + 1
    return arr[low]
```"
551,Write a function to extract a specified column from a given nested list.,"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ","```python
def extract_column(nested_list, column_index):
    if not nested_list:
        raise ValueError(""Input list is empty"")
    
    try:
        return [row[column_index] for row in nested_list]
    except IndexError:
        raise ValueError(""Column index out of range"")

# Alternative implementation using map and lambda functions
def extract_column_alt(nested_list, column_index):
    if not nested_list:
        raise ValueError(""Input list is empty"")
    
    try:
        return list(map(lambda x: x[column_index], nested_list))
    except IndexError:
        raise ValueError(""Column index out of range"")
```"
552,Write a python function to check whether a given sequence is linear or not.,"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""","```python
def is_linear(sequence):
    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]
    return len(set(differences)) == 1
```
Please let me know if you need anything else!"
553,Write a function to convert the given tuple to a floating-point number.,"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ","```python
def convert_to_float(input_tuple):
    if len(input_tuple) != 2:
        raise ValueError(""The tuple must have exactly two elements"")
    
    integer_part = input_tuple[0]
    fractional_part = input_tuple[1]

    if not isinstance(integer_part, int) or not isinstance(fractional_part, int):
        raise TypeError(""Both parts of the tuple must be integers"")

    if fractional_part == 0:
        return float(integer_part)
    
    denominator = 10 ** len(str(abs(fractional_part)))
    result = integer_part + (fractional_part / denominator)

    return result
```"
554,Write a python function to find odd numbers from a mixed list.,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li","```python
def find_odd_numbers(mixed_list):
    return [num for num in mixed_list if isinstance(num, int) and num % 2 != 0]
```"
555,Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ","```python
def sum_difference(n):
    sum_cubes = (n * (n + 1) / 2) ** 2
    sum_natural_numbers = n * (n + 1) // 2
    return abs(sum_cubes - sum_natural_numbers)
```"
556,Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ","```python
def count_odd_xor_pairs(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 != 0:
                count += 1
    return count
```

This function takes an array of integers as input and returns the number of pairs with XOR result as an odd number."
557,Write a function to toggle characters case in a string.,"def toggle_string(string):
 string1 = string.swapcase()
 return string1","```python
def toggle_case(input_str):
    result = """"
    for char in input_str:
        if char.isupper():
            result += char.lower()
        elif char.islower():
            result += char.upper()
        else:
            result += char
    return result
```"
558,Write a python function to find the digit distance between two integers.,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))","```python
def digit_distance(num1, num2):
    digits1 = [int(digit) for digit in str(abs(num1))]
    digits2 = [int(digit) for digit in str(abs(num2))]

    max_len = max(len(digits1), len(digits2))
    digits1 += [0] * (max_len - len(digits1))
    digits2 += [0] * (max_len - len(digits2))

    distance = 0
    for i in range(max_len):
        distance += abs(digits1[i] - digits2[i])

    return distance
```"
559,Write a function to find the largest sum of contiguous subarray in the given array.,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far","```python
def max_subarray_sum(arr):
    max_sum = float('-inf')
    current_sum = 0
    
    for num in arr:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    
    return max_sum
```"
560,Write a function to find the union of elements of the given tuples.,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ","```python
def union_of_tuples(*tuples):
    return tuple(set(tup for tup in tuples[0]))
```"
561,"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","```python
def pair_elements(tup):
    if len(tup) == 0:
        return []
    
    result = {}
    for item in tup:
        key = tuple(sorted(item))
        if key not in result:
            result[key] = set()
        result[key].update(set(item))
    
    return [list(value) for value in result.values()]
```"
562,Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ","```python
def max_length_sublist(lst):
    if not lst:
        return 0
    max_len = len(max(lst, key=len))
    for sublst in lst:
        if len(sublst) > max_len:
            max_len = len(sublst)
    return max_len
```

Alternatively, you can use the `map` and `max` functions to make it more concise:

```python
def max_length_sublist(lst):
    return max(map(len, lst)) if lst else 0
```"
563,Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","```python
def extract_quoted_values(s):
    import re
    return re.findall(r'""(.*?)""', s)
```"
564,Write a python function to count unequal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ","```python
def count_unequal_pairs(arr):
    n = len(arr)
    total_pairs = (n * (n - 1)) // 2
    freq_dict = {}
    
    for num in arr:
        if num not in freq_dict:
            freq_dict[num] = 0
        freq_dict[num] += 1
    
    equal_pairs = sum(x * (x - 1) // 2 for x in freq_dict.values())
    
    return total_pairs - equal_pairs
```"
565,Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ","```python
def split_string_into_characters(input_str):
    return list(input_str)
```"
566,Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","```python
def get_sum(n):
    if n == 0:
        return 0
    return n + get_sum(n - 1)
```"
567,Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","```python
def is_sorted(lst):
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))
```
Please note that this function considers a list to be sorted if it's either ascending or non-descending (i.e., duplicate elements are allowed). If you want the function to consider only strictly ascending lists as sorted, replace `<=` with `<`."
568,Write a function to create a list of empty dictionaries.,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list","```python
def create_empty_dicts(n):
    """"""Returns a list of n empty dictionaries.""""""
    return [{} for _ in range(n)]
```"
569,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result","```python
def sort_sublists(list_of_lists):
    return [[item for item in sorted(sublist)] for sublist in list_of_lists]
```"
570,Write a function to remove words from a given list of strings containing a character or string.,"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list","```python
def remove_words_with_char(word_list, char):
    return [word for word in word_list if char not in word]
```

Alternatively, you can use a more general solution that allows removing words containing any string:

```python
def remove_words_with_string(word_list, string):
    return [word for word in word_list if string not in word]
```"
571,Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.,"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]","```python
def max_sum_disjoint_pairs(arr, k):
    arr.sort()
    i, j = 0, len(arr) - 1
    res = []
    while i < j:
        if abs(arr[i] + arr[j]) <= k:
            res.append([arr[i], arr[j]])
            i += 1
            j -= 1
        else:
            j -= 1
    return sum(sum(pair) for pair in res)
```"
572,Write a python function to remove two duplicate numbers from a given number of lists.,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]","```python
def remove_duplicate_numbers(*lists):
    seen = set()
    result = []
    for lst in lists:
        temp_result = []
        for num in lst:
            if num not in seen:
                seen.add(num)
                temp_result.append(num)
        result.append(temp_result)
    return tuple(result)
```"
573,Write a python function to calculate the product of the unique numbers of a given list.,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p","```python
def product_of_unique_numbers(lst):
    unique_nums = set(lst)
    product = 1
    for num in unique_nums:
        product *= num
    return product
```"
574,Write a function to find the surface area of a cylinder.,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea","```python
import math

def cylinder_surface_area(radius, height):
    """"""
    Calculate the surface area of a cylinder.

    Parameters:
    radius (float): The radius of the cylinder's base.
    height (float): The height of the cylinder.

    Returns:
    float: The surface area of the cylinder.
    """"""
    return 2 * math.pi * radius * (radius + height)
```"
575,Write a python function to find nth number in a sequence which is not a multiple of a given number.,"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ","```python
def nth_number_not_multiple(n, multiple):
    count = 0
    num = 1
    while True:
        if num % multiple != 0:
            count += 1
            if count == n:
                return num
        num += 1
```"
576,Write a python function to check whether an array is subarray of another or not.,"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ","```python
def is_subarray(main_array, sub_array):
    main_len = len(main_array)
    sub_len = len(sub_array)

    for i in range(main_len - sub_len + 1):
        if main_array[i:i+sub_len] == sub_array:
            return True
    return False
```"
577,Write a python function to find the last digit in factorial of a given number.,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0","```python
def last_digit_factorial(n):
    if n < 0:
        raise ValueError(""Input must be a non-negative integer."")
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, min(n + 1, 10)):
            result *= i
        if n >= 5:
            return 0
        else:
            return result % 10
```"
578,Write a function to interleave lists of the same length.,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result","```python
def interleave_lists(list1, list2):
    return [x for pair in zip(list1, list2) for x in pair]
```

Alternatively, you can use `itertools.chain` and `zip` to achieve the same result:

```python
import itertools

def interleave_lists(list1, list2):
    return list(itertools.chain(*zip(list1, list2)))
```"
579,Write a function to find the dissimilar elements in the given two tuples.,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ","```python
def dissimilar_elements(tuple1, tuple2):
    return set(tuple1).symmetric_difference(set(tuple2))
```"
580,Write a function to extract the even elements in the nested mixed tuple.,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ","```python
def extract_even_elements(nested_tuple):
    if isinstance(nested_tuple, tuple):
        even_elements = []
        for element in nested_tuple:
            even_elements.extend(extract_even_elements(element))
        return [element for element in even_elements if element % 2 == 0]
    else:
        return [nested_tuple] if nested_tuple % 2 == 0 else []
```"
581,Write a python function to find the surface area of the square pyramid.,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ","```python
import math

def surface_area_square_pyramid(base_length, slant_height):
    base_area = base_length ** 2
    triangle_area = (base_length * slant_height) / 2
    total_surface_area = base_area + (4 * triangle_area)
    return total_surface_area
```"
582,Write a function to check if a dictionary is empty or not.,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True","```python
def is_dict_empty(input_dict):
    return len(input_dict) == 0
```"
583,Write a function for nth catalan number.,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num","```python
def catalan(n):
    if n == 0 or n == 1:
        return 1
    catalan_list = [0]*(n+1)
    catalan_list[0] = catalan_list[1] = 1
    for i in range(2, n+1):
        catalan_list[i] = sum(catalan_list[j]*catalan_list[i-j-1] for j in range(i))
    return catalan_list[n]
```"
584,Write a function to find all adverbs and their positions in a given sentence by using regex.,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))","```python
import re

def find_adverbs(sentence):
    adverb_pattern = r'\b\w+(ly|wise|wards|ways)\b'
    matches = re.finditer(adverb_pattern, sentence)
    result = []
    
    for match in matches:
        adverb = match.group()
        start_position = match.start()
        end_position = match.end()
        
        result.append({
            'adverb': adverb,
            'start_position': start_position,
            'end_position': end_position
        })
    
    return result
```"
585,Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items","```python
import heapq

def find_n_expensive_items(dataset, n):
    prices = [item['price'] for item in dataset]
    expensive_prices = heapq.nlargest(n, prices)
    expensive_items = [item for item in dataset if item['price'] in expensive_prices]
    return expensive_items
```"
586,Write a python function to split the array and add the first part to the end.,"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) ","```python
def split_and_rotate(arr):
    if len(arr) < 2:
        return arr
    n = len(arr)
    d = n // 2
    first_part = arr[:d]
    second_part = arr[d:]
    result = second_part + first_part
    return result
```"
587,Write a function to convert a list to a tuple.,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex","```python
def list_to_tuple(lst):
    return tuple(lst)
```"
588,Write a python function to find the difference between largest and smallest value in a given array.,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff","```python
def find_difference(array):
    if len(array) == 0:
        raise ValueError(""Array cannot be empty"")
    
    largest = max(array)
    smallest = min(array)
    
    return largest - smallest
```"
589,Write a function to find perfect squares between two given numbers.,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists","```python
def find_perfect_squares(start, end):
    perfect_squares = []
    i = 1
    while i * i <= end:
        if start <= i * i <= end:
            perfect_squares.append(i * i)
        i += 1
    return perfect_squares
```"
590,Write a function to convert polar coordinates to rectangular coordinates.,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)","```python
import math

def polar_to_rectangular(r, theta):
    x = r * math.cos(math.radians(theta))
    y = r * math.sin(math.radians(theta))
    return (x, y)
```"
591,Write a python function to interchange the first and last elements in a list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ","```python
def swap_first_last(lst):
    if len(lst) <= 1:
        return lst
    return [lst[-1]] + lst[1:-1] + [lst[0]]
```"
592,Write a python function to find sum of product of binomial co-efficients.,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ","```python
import math

def sum_of_product_of_binomial_coefficients(n):
    total_sum = 0
    for i in range(1, n+1):
        product = 1
        for j in range(i):
            product *= math.comb(j, i-1-j)
        total_sum += product
    return total_sum
```"
593,Write a function to remove leading zeroes from an ip address.,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string
","```python
def remove_leading_zeroes(ip_address):
    parts = ip_address.split('.')
    updated_parts = []
    
    for part in parts:
        if len(part) > 1 and part[0] == '0':
            updated_parts.append(str(int(part)))
        else:
            updated_parts.append(part)
            
    return '.'.join(updated_parts)
```"
594,Write a function to find the difference of first even and odd number of a given list.,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)","```python
def diff_first_even_odd(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    odd_nums = [num for num in nums if num % 2 != 0]

    if not even_nums or not odd_nums:
        return None

    first_even = even_nums[0]
    first_odd = odd_nums[0]

    return abs(first_even - first_odd)
```"
595,Write a python function to count minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ","```python
def min_swaps(s1, s2):
    if len(s1) != len(s2):
        raise ValueError(""Both strings must be of equal length"")

    n = len(s1)
    count = 0
    for i in range(n - 1):
        if s1[i] == '1' and s1[i + 1] == '0':
            j = i + 1
            while j < n and s2[j] != '1':
                j += 1
            if j < n:
                count += 1

    return count
```"
596,Write a function to find the size of the given tuple.,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ","```python
def get_tuple_size(input_tuple):
    return len(input_tuple)
```"
597,Write a function to find kth element from the given two sorted arrays.,"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]","```python
def kth_element(arr1, arr2, k):
    i = j = 0
    while k > 1:
        if i == len(arr1):
            return arr2[j + k - 1]
        elif j == len(arr2):
            return arr1[i + k - 1]
        
        if arr1[i] < arr2[j]:
            i += 1
        else:
            j += 1
        
        k -= 1
    
    return min(arr1[i], arr2[j])
```"
598,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False","```python
def is_armstrong(n):
    num_str = str(n)
    power = len(num_str)
    result = sum(int(digit) ** power for digit in num_str)
    return n == result
```"
599,Write a function to find sum and average of first n natural numbers.,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)","```python
def sum_and_average(n):
    total = n * (n + 1) // 2
    average = total / n
    return total, average
```

Alternatively:

```python
def sum_and_average(n):
    total = sum(range(1, n + 1))
    average = total / n
    return total, average
```"
600,Write a python function to check whether the given number is even or not using bitwise operator.,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ","```python
def is_even(n):
    return (n & 1) == 0
```"
601,Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","```python
def longest_chain(pairs):
    pairs.sort(key=lambda x: x[1])
    chain = [pairs[0]]
    for i in range(1, len(pairs)):
        if pairs[i][0] > chain[-1][1]:
            chain.append(pairs[i])
    return chain
```"
602,Write a python function to find the first repeated character in a given string.,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""","```python
def first_repeated_char(s):
    char_count = {}
    for char in s:
        if char in char_count:
            return char
        else:
            char_count[char] = 1
    return None
```"
603,Write a function to get a lucid number smaller than or equal to n.,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics","```python
def lucid_number(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    def is_lucid(m):
        s = str(m)
        for i in range(len(s)):
            for j in range(i+1, len(s)+1):
                p = int(s[i:j])
                if not (p < m and is_prime(p) and sum(map(int, str(p))) == m % 10**len(str(p))):
                    return False
        return True

    for i in range(n, -1, -1):
        if is_lucid(i):
            return i
```"
604,Write a function to reverse words in a given string.,"def reverse_words(s):
        return ' '.join(reversed(s.split()))","```python
def reverse_words_in_string(s):
    words = s.split()
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)
```"
605,Write a function to check if the given integer is a prime number.,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False","```python
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
```"
606,Write a function to convert degrees to radians.,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian","```python
import math

def degrees_to_radians(degrees):
    return degrees * math.pi / 180
```"
607,Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)","```python
import re

def search_pattern(string, pattern):
    match = re.search(pattern, string)
    if match:
        return (match.group(), match.start())
    else:
        return None
```"
608,Write a python function to find nth bell number.,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ","```python
def bell_number(n):
    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]
    
    # base case: B(0) = 1
    bell[0][0] = 1
    
    # fill up the table using recursion relation
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    
    return bell[n][0]
```"
609,Write a python function to find minimum possible value for the given periodic function.,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B","```python
import math

def min_periodic_func(a, b, c, d):
    if a == 0:
        return c - (d * abs(b)) / (2 * math.pi)
    n = 1
    while True:
        x = (n * math.pi) + (math.acos(-b / (a * math.pi))) 
        min_x = ((n-1) * math.pi) + (math.acos(-b / (a * math.pi)))
        if a * (x**2) + b * x + c - d * math.sin(x) <= a * (min_x**2) + b * min_x + c - d * math.sin(min_x):
            return a * (x**2) + b * x + c - d * math.sin(x)
        n += 1
```"
610,Write a python function to remove the k'th element from a given list.,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]","```python
def remove_kth_element(input_list, k):
    if 1 <= k <= len(input_list):
        return input_list[:k-1] + input_list[k:]
    else:
        raise ValueError(""Invalid value of k"")
```"
611,Write a function to find the maximum of nth column from the given tuple list.,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ","```python
def find_max_nth_column(tuple_list, n):
    return max(row[n] for row in tuple_list)
```

Or if you want to handle potential errors:

```python
def find_max_nth_column(tuple_list, n):
    if not tuple_list:
        raise ValueError(""Input list is empty"")
    if not all(len(row) > n for row in tuple_list):
        raise IndexError(""Column index out of range"")
    return max(row[n] for row in tuple_list)
```"
612,Write a python function to merge the first and last elements separately in a list of lists.,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ","```python
def merge_first_last(list_of_lists):
    merged = []
    for sublist in list_of_lists:
        if len(sublist) > 0:
            first_element = [sublist[0]]
            last_element = [sublist[-1]]
            merged.append(first_element + last_element)
    return merged
```"
613,Write a function to find the maximum value in record list as tuple attribute in the given tuple list.,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ","```python
def find_max_value(tuple_list):
    if not tuple_list:
        return None
    
    max_record = max(tuple_list, key=lambda x: getattr(x[1], 'record'))
    
    return (max_record[0], max_record[1].record)
```"
614,Write a function to find the cumulative sum of all the values that are present in the given tuple list.,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)","```python
def cumulative_sum(tuple_list):
    cumulative_total = 0
    result = []
    for tup in tuple_list:
        temp_sum = sum(tup)
        cumulative_total += temp_sum
        result.append(cumulative_total)
    return result
```"
615,Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","```python
def average_of_tuple(tuples):
    total_sum = sum(num for tup in tuples for num in tup)
    total_count = sum(len(tup) for tup in tuples)
    return total_sum / total_count if total_count != 0 else None
```"
616,Write a function to perfom the modulo of tuple elements in the given two tuples.,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ","```python
def modulo_tuples(t1, t2):
    if len(t1) != len(t2):
        raise ValueError(""Both tuples must have the same length"")
    
    result = []
    for x, y in zip(t1, t2):
        if not isinstance(x, (int, float)) or not isinstance(y, (int, float)):
            raise TypeError(""All elements of both tuples must be numbers"")
        if y == 0:
            raise ZeroDivisionError(""Cannot perform modulo by zero"")
        result.append(x % y)
    
    return tuple(result)
```"
617,"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2","```python
import math

def min_jumps_to_reach_point(d, jump_length):
    jumps = 0
    remaining_distance = d
    
    while remaining_distance > 0:
        if remaining_distance >= jump_length:
            remaining_distance -= jump_length
        else:
            remaining_distance = 0
        
        jumps += 1
    
    return jumps
```"
618,Write a function to divide two lists using map and lambda function.,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)","```python
def divide_lists(list1, list2):
    return list(map(lambda x: x[0] / x[1], zip(list1, list2)))
```"
619,Write a function to move all the numbers in it to the given string.,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ","```python
def move_numbers_to_string(input_list):
    numbers = [str(num) for num in input_list if isinstance(num, (int, float))]
    non_numbers = [item for item in input_list if not isinstance(item, (int, float))]
    result_string = ''.join(numbers)
    return non_numbers + [result_string]
```"
620,Write a function to find the largest subset where each pair is divisible.,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)","```python
def largest_divisible_subset(nums):
    if not nums:
        return []
    
    nums.sort()
    dp = [[num] for num in nums]
    
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0 and len(dp[j]) + 1 > len(dp[i]):
                dp[i] = dp[j] + [nums[i]]
    
    return max(dp, key=len)
```"
621,Write a function to increment the numeric values in the given strings by k.,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ","```python
def increment_strings(lst, k):
    result = []
    for string in lst:
        numeric_values = [int(i) for i in string.split() if i.isdigit()]
        incremented_values = [str(int(value) + k) for value in numeric_values]
        new_string = ' '.join([incremented_values.pop(0) if token.isdigit() else token for token in string.split()])
        result.append(new_string)
    return result
```"
622,Write a function to find the median of two sorted arrays of same size.,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2","```python
def find_median_sorted_arrays(nums1, nums2):
    merged = sorted(nums1 + nums2)
    length = len(merged)
    
    if length % 2 == 0:
        return (merged[length // 2 - 1] + merged[length // 2]) / 2.0
    
    return float(merged[length // 2])
```"
623,Write a function to find the n-th power of individual elements in a list using lambda function.,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums","```python
def nth_power(lst, n):
    return list(map(lambda x: x ** n, lst))
```"
624,Write a python function to convert the given string to upper case.,"def is_upper(string):
  return (string.upper())","```python
def convert_to_upper_case(input_string):
    return input_string.upper()
```"
625,Write a python function to interchange first and last elements in a given list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ","```python
def interchange_first_last(lst):
    if len(lst) > 1:
        lst[0], lst[-1] = lst[-1], lst[0]
    return lst
```"
626,Write a python function to find the largest triangle that can be inscribed in the semicircle.,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ","```python
import math

def largest_triangle_in_semicircle(radius):
    area = (math.sqrt(3) / 4) * radius ** 2
    return area
```"
627,Write a python function to find the smallest missing number from the given array.,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ","```python
def find_smallest_missing_number(nums):
    if not nums:
        return 1
    
    nums = set(nums)
    i = 1
    
    while True:
        if i not in nums:
            return i
        i += 1
```"
628,Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.,"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)","```python
def replace_spaces_with_percentage(s):
    return s.replace(' ', '%20')
```"
629,Write a python function to find even numbers from a mixed list.,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li","```python
def find_even_numbers(mixed_list):
    return [num for num in mixed_list if isinstance(num, int) and num % 2 == 0]
```

This function takes a list as input, iterates over the elements, checks if each element is an integer using `isinstance`, and then checks if it's even by verifying if the remainder when divided by 2 is zero. If both conditions are met, the number is included in the output list."
630,Write a function to extract all the adjacent coordinates of the given coordinate tuple.,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ","```python
def get_adjacent_coordinates(coord):
    x, y = coord
    adjacent_coords = []
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if abs(dx) + abs(dy) == 1:
                adjacent_coord = (x + dx, y + dy)
                adjacent_coords.append(adjacent_coord)
    return adjacent_coords
```"
631,Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)","```python
import re

def replace_whitespace(input_str):
    return re.sub(r'\s', '_', input_str) if '_' not in input_str else re.sub(r'_', ' ', input_str)
```

Alternatively, you can use a more robust approach that handles both replacement directions:

```python
import re

def replace_whitespace(input_str):
    def replacer(match):
        return '_' if match.group() == ' ' else ' '
    
    return re.sub(r'_|\s', replacer, input_str)
```

However, the most efficient and Pythonic way to achieve this is by using the `str.translate()` method along with `str.maketrans()`:

```python
def replace_whitespace(input_str):
    trans_table = str.maketrans({'_': ' ', ' ': '_'})
    return input_str.translate(trans_table)
```

Each of these functions accomplishes the task, but they differ in their approach and complexity."
632,Write a python function to move all zeroes to the end of the given list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)","```python
def move_zeroes_to_end(lst):
    return [i for i in lst if i != 0] + [0] * lst.count(0)
```"
633,Write a python function to find the sum of xor of all pairs of numbers in the given array.,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ","```python
def xor_sum(nums):
    res = 0
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            res += nums[i] ^ nums[j]
    return res
```

Alternatively, you can also write the function using list comprehension and the built-in `sum` function:

```python
def xor_sum(nums):
    return sum(x ^ y for i, x in enumerate(nums) for j, y in enumerate(nums) if i < j)
```"
634,Write a python function to find the sum of fourth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ","```python
def sum_of_fourth_power(n):
    return sum(i**4 for i in range(2, n*2+1, 2))
```"
635,Write a function to push all values into a heap and then pop off the smallest values one at a time.,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]","```python
import heapq

def push_and_pop(heap_values):
    heap = []
    for value in heap_values:
        heapq.heappush(heap, value)
    result = []
    while heap:
        result.append(heapq.heappop(heap))
    return result
```

Alternatively, since Python's built-in `heapq` module automatically turns a list into a valid min-heap when the `heappush` method is used, we can simplify this function as follows:

```python
import heapq

def push_and_pop(heap_values):
    heap = []
    for value in heap_values:
        heapq.heappush(heap, value)
    return [heapq.heappop(heap) for _ in range(len(heap))]
```

Or even further by directly using the `heapify` function:

```python
import heapq

def push_and_pop(heap_values):
    heapq.heapify(heap_values)
    return [heapq.heappop(heap_values) for _ in range(len(heap_values))]
```"
636,Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ","```python
def are_roots_reciprocal(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return False
    root1 = (-b + discriminant**0.5) / (2*a)
    root2 = (-b - discriminant**0.5) / (2*a)
    return abs(root1 * root2 - 1) < 1e-9
```"
637,Write a function to check whether the given amount has no profit and no loss,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False","```python
def check_no_profit_loss(selling_price, cost_price):
    if selling_price == cost_price:
        return True
    return False
```"
638,Write a function to calculate wind chill index.,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))","```python
def calculate_wind_chill_index(temp_fahrenheit, wind_speed):
    if temp_fahrenheit > 50 or wind_speed < 3:
        return ""Wind chill index is not defined for these conditions""
    else:
        wind_chill = 35.74 + (0.6215 * temp_fahrenheit) - (35.75 * (wind_speed ** 0.16)) + ((0.4275 * temp_fahrenheit) * (wind_speed ** 0.16))
        return round(wind_chill, 2)
```"
639,Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))","```python
def sum_length_of_names(names):
    return sum(len(name) for name in names if name and name[0].isupper())
```"
640,Write a function to remove the parenthesis area in a string.,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))","```python
def remove_parenthesis_area(input_string):
    result = ''
    parenthesis_level = 0
    
    for char in input_string:
        if char == '(':
            parenthesis_level += 1
        elif char == ')':
            parenthesis_level -= 1
        else:
            if parenthesis_level == 0:
                result += char
                
    return result
```"
641,Write a function to find the nth nonagonal number.,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ","```python
def nth_nonagonal_number(n):
    return (8 * n**2 - 6 * n + 1)
```"
642,Write a function to remove similar rows from the given tuple matrix.,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ","```python
def remove_similar_rows(matrix):
    result = []
    for row in matrix:
        if tuple(row) not in result:
            result.append(tuple(row))
    return tuple(result)
```"
643,"Write a function that matches a word containing 'z', not at the start or end of the word.","import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```python
import re

def match_word_with_z(word):
    pattern = r'\b\w*z\w*\b'
    if re.search(pattern, word):
        return True
    return False
```"
644,Write a python function to reverse an array upto a given position.,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ","```python
def reverse_array(arr, pos):
    if pos < 0 or pos > len(arr):
        raise ValueError(""Invalid position"")
    
    return arr[pos:][::-1] + arr[:pos]
```"
645,Write a function to find the product of it’s kth index in the given tuples.,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ","```python
def find_product(tuples_list, k):
    if not tuples_list:
        return None
    product = 1
    for tup in tuples_list:
        if len(tup) <= k:
            return None
        product *= tup[k]
    return product
```"
646,Write a python function to count number of cubes of size k in a cube of size n.,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No","```python
def count_cubes(n, k):
    if n < k:
        return 0
    else:
        count = (n - k + 1) ** 3
        return count
```"
647,Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","```python
def split_at_uppercase(s):
    result = []
    current_word = ''
    for char in s:
        if char.isupper() and current_word:
            result.append(current_word)
            current_word = ''
        current_word += char
    if current_word:
        result.append(current_word)
    return result
```"
648,Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))","```python
def swap_nth_values(lst, n):
    for i in range(n-1, len(lst), 2*n):
        if i+n < len(lst):
            lst[i], lst[i+n] = lst[i+n], lst[i]
    return lst
```"
649,Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ","```python
def sum_range_numbers(lst, start, end):
    if not isinstance(start, int) or not isinstance(end, int):
        raise TypeError(""Start and End indices must be integers."")
    if start < 0 or end > len(lst) - 1:
        raise IndexError(""Index out of range."")
    if start >= end:
        return 0
    return sum(lst[start:end])
```"
650,Write a python function to check whether the given two arrays are equal or not.,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True","```python
def are_arrays_equal(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return False
    return True
```"
651,Write a function to check if one tuple is a subset of another tuple.,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ","```python
def is_subset(tuple1, tuple2):
    set1 = set(tuple1)
    set2 = set(tuple2)
    return set1.issubset(set2)
```"
652,Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))","```python
def flatten_tuple_matrix(matrix):
    if matrix:
        column_count = len(matrix[0])
        flat_list = [[] for _ in range(column_count)]
        for row in matrix:
            for i, value in enumerate(row):
                flat_list[i].append(value)
        return tuple(tuple(column) for column in flat_list)
```"
653,Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d","```python
from collections import defaultdict

def group_key_value_pairs(pairs):
    result = defaultdict(list)
    for key, value in pairs:
        result[key].append(value)
    return dict(result)
```"
654,Write a function to find the perimeter of a rectangle.,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter","```python
def rectangle_perimeter(length, width):
    if length <= 0 or width <= 0:
        raise ValueError(""Length and width must be positive numbers."")
    return 2 * (length + width)
```"
655,Write a python function to find the sum of fifth power of n natural numbers.,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ","```python
def sum_of_fifth_power(n):
    return sum(i**5 for i in range(1, n+1))
```

Please note that the upper limit is exclusive in Python's `range()` function by default, hence we use `n+1` to include `n` in the calculation."
656,Write a python function to find the minimum sum of absolute differences of two arrays.,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum","```python
def min_sum_of_abs_diff(arr1, arr2):
    arr1.sort()
    arr2.sort()
    return sum(abs(a - b) for a, b in zip(arr1, arr2))
```

Note: The provided function assumes that both input arrays have the same length. If this is not guaranteed, you may want to add error checking code to handle such cases."
657,Write a python function to find the first digit in factorial of a given number.,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ","```python
def first_digit_factorial(n):
    def factorial(x):
        if x == 0:
            return 1
        else:
            return x * factorial(x-1)

    fact = str(factorial(n))
    for digit in fact:
        if digit != '0':
            return int(digit)
```"
658,Write a function to find the item with maximum occurrences in a given list.,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","```python
from collections import Counter

def find_item_with_max_occurrences(lst):
    counter = Counter(lst)
    max_count = max(counter.values())
    most_common_items = [item for item, count in counter.items() if count == max_count]
    return most_common_items
```"
659,Write a python function to print duplicants from a list of integers.,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ","```python
def print_duplicates(lst):
    seen = set()
    duplicates = set()
    for num in lst:
        if num in seen:
            duplicates.add(num)
        seen.add(num)
    return sorted(list(duplicates))
```"
660,Write a python function to choose points from two ranges such that no point lies in both the ranges.,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)","```python
def choose_points(range1, range2):
    points = []
    for i in range(max(0, range1[0] - 10), min(100, range1[1] + 10)):
        if not (range2[0] <= i <= range2[1]):
            points.append(i)
    return points
```"
661,Write a function to find the maximum sum that can be formed which has no three consecutive elements present.,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]","```python
def max_sum_no_consecutive_elements(arr):
    if len(arr) <= 2:
        return sum(arr)
    
    dp = [0] * len(arr)
    dp[0] = arr[0]
    dp[1] = max(arr[0], arr[1])
    
    for i in range(2, len(arr)):
        dp[i] = max(dp[i-1], dp[i-2] + arr[i])
        
    return dp[-1]
```"
662,Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","```python
def sort_dict_list(input_dict):
    for key in input_dict:
        if isinstance(input_dict[key], list):
            input_dict[key] = sorted(input_dict[key])
    return input_dict
```
or 

```python
def sort_dict_list(input_dict):
    return {key: sorted(value) if isinstance(value, list) else value for key, value in input_dict.items()}
```"
663,Write a function to find the largest possible value of k such that k modulo x is y.,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ","```python
def largest_k(x, y):
    if x == 0:
        raise ValueError(""x cannot be zero"")
    elif y >= x:
        raise ValueError(""y must be less than x"")
    k = (1 << (len(bin(y)) - 2)) * x + y
    return k
```"
664,Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ","```python
def average_of_even_numbers(n):
    if n % 2 != 0:
        raise ValueError(""Input number must be even"")

    total = sum(range(2, n + 1, 2))
    count = (n - 2) // 2 + 1
    return total / count
```"
665,Write a python function to shift first element to the end of given list.,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)","```python
def shift_first_to_end(lst):
    if len(lst) > 1:
        first_element = lst.pop(0)
        lst.append(first_element)
    return lst
```

Alternatively, using list slicing:

```python
def shift_first_to_end(lst):
    return lst[1:] + lst[:1]
```"
666,Write a function to count occurrence of a character in a string.,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count","```python
def count_character(string, char):
    return string.count(char)
```"
667,Write a python function to count number of vowels in the string.,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
","```python
def count_vowels(s):
    vowels = 'aeiouAEIOU'
    return sum(1 for char in s if char in vowels)
```"
668,Write a python function to replace multiple occurence of character by single.,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ","```python
def replace_multiple_occurences(input_str):
    result = ''
    for char in input_str:
        if not result or char != result[-1]:
            result += char
    return result
```"
669,Write a function to check whether the given ip address is valid or not using regex.,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ","```python
import re

def is_valid_ip(ip_address):
    pattern = r""^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$""
    return bool(re.match(pattern, ip_address))
```"
670,Write a python function to check whether a sequence of numbers has a decreasing trend or not.,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","```python
def has_decreasing_trend(sequence):
    if len(sequence) < 2:
        return False
    trend = None
    for i in range(len(sequence) - 1):
        difference = sequence[i] - sequence[i + 1]
        if difference == 0:
            continue
        new_trend = difference > 0
        if trend is not None and new_trend != trend:
            return False
        trend = new_trend
    return trend is True or (trend is None and len(sequence) > 1)
```"
671,Write a python function to set the right most unset bit.,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ","```python
def set_right_most_unset_bit(n):
    if n == 0:
        return 1
    right_shift = 0
    while (n >> right_shift) & 1:
        right_shift += 1
    return n | (1 << right_shift)
```"
672,Write a function to find maximum of three numbers.,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum","```python
def find_max(a, b, c):
    if a >= b and a >= c:
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c
```

Alternatively:

```python
def find_max(a, b, c):
    return max(a, b, c)
```"
673,Write a python function to convert a list of multiple integers into a single integer.,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ","```python
def convert_list_to_integer(lst):
    if not lst:
        return 0
    sign = -1 if lst[0] < 0 else 1
    result = 0
    for num in lst:
        temp = abs(num)
        while temp > 0:
            digit = temp % 10
            result = result * 10 + digit
            temp //= 10
    return sign * result
```"
674,Write a function to remove duplicate words from a given string using collections module.,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result","```python
from collections import OrderedDict

def remove_duplicate_words(input_string):
    words = input_string.split()
    unique_words = list(OrderedDict.fromkeys(words))
    return ' '.join(unique_words)
```"
675,"Write a function to add two integers. however, if the sum is between the given range it will return 20.","def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums","```python
def add_with_special_range(a, b, min_value, max_value):
    sum = a + b
    if min_value < sum < max_value:
        return 20
    return sum
```"
676,Write a function to remove everything except alphanumeric characters from the given string by using regex.,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))","```python
import re

def remove_non_alphanumeric(input_string):
    return re.sub('[^a-zA-Z0-9]', '', input_string)
```"
677,Write a function to check if the triangle is valid or not.,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False","```python
def is_valid_triangle(a, b, c):
    return a + b > c and a + c > b and b + c > a
```

Alternatively, you can also write this as:

```python
def is_valid_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return sides[0] + sides[1] > sides[2]
```"
678,Write a python function to remove spaces from a given string.,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1","```python
def remove_spaces(input_string):
    return input_string.replace("" "", """")
```"
679,Write a function to access dictionary key’s element by index.,"def access_key(ditionary,key):
  return list(ditionary)[key]","```python
def access_dict_key_by_index(dictionary, index):
    if isinstance(index, int) and index < len(dictionary):
        for i, (key, value) in enumerate(dictionary.items()):
            if i == index:
                return key
    elif isinstance(index, slice):
        return list(dictionary.keys())[index]
    else:
        raise ValueError(""Invalid index or dictionary"")
```"
680,Write a python function to check whether a sequence of numbers has an increasing trend or not.,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","```python
def has_increasing_trend(sequence):
    if len(sequence) < 2:
        return True
    
    prev_element = sequence[0]
    
    for element in sequence[1:]:
        if element <= prev_element:
            return False
        prev_element = element
        
    return True
```"
681,Write a python function to find the smallest prime divisor of a number.,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ","```python
def smallest_prime_divisor(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            return i
```"
682,Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","```python
def multiply_lists(list1, list2):
    return list(map(lambda x: x[0] * x[1], zip(list1, list2)))
```"
683,Write a python function to check whether the given number can be represented by sum of two squares or not.,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False","```python
def is_sum_of_two_squares(n):
    if n < 0:
        return False
    for i in range(int(n**0.5) + 1):
        j = (n - i * i)**0.5
        if j == int(j):
            return True
    return False
```"
684,Write a python function to count occurences of a character in a repeated string.,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ","```python
def count_occurrences(repeated_string, char):
    total_chars = len(repeated_string) * repeated_string.count(char)
    remainder = (len(repeated_string) - (repeated_string.index(char) + 1)) % len(repeated_string)
    if remainder != 0:
        total_chars += repeated_string[:remainder].count(char)
    return total_chars
```"
685,Write a python function to find sum of prime numbers between 1 to n.,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum","```python
def sum_of_primes(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    return sum(i for i in range(1, n+1) if is_prime(i))
```"
686,Write a function to find the frequency of each element in the given list.,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ","```python
def find_frequency(lst):
    frequency_dict = {}
    for item in lst:
        if item in frequency_dict:
            frequency_dict[item] += 1
        else:
            frequency_dict[item] = 1
    return frequency_dict
```

Alternatively, you can use the `collections.Counter` class to achieve this in a more concise way:

```python
from collections import Counter

def find_frequency(lst):
    return dict(Counter(lst))
```"
687,Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","```python
def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)
```"
688,Write a function to get the length of a complex number.,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length","```python
import math
def complex_length(z):
    return math.sqrt(z.real**2 + z.imag**2)
```"
689,## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]","```python
def minJumps(arr):
    n = len(arr)
    if n <= 1:
        return 0
    
    max_reach = arr[0]
    step = arr[0]
    jumps = 1
    
    for i in range(1, n):
        if i == n - 1:
            return jumps
        
        max_reach = max(max_reach, i + arr[i])
        step -= 1
        
        if step == 0:
            jumps += 1
            if i >= max_reach:
                return -1
            
            step = max_reach - i
    
    return -1
```"
690,Write a function to multiply consecutive numbers of a given list.,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result","```python
def multiply_consecutive_numbers(lst):
    result = 1
    for num in lst:
        result *= num
    return result
```"
691,Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
","```python
def group_tuples(tuple_list):
    result = {}
    for t in tuple_list:
        key = t[1]
        if key not in result:
            result[key] = []
        result[key].append(t[0])
    return {key: sorted(value) for key, value in result.items()}
```"
692,Write a python function to find the last two digits in factorial of a given number.,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ","```python
def find_last_two_digits_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
        result %= 100
    return result
```

Note: This function uses the property of modular arithmetic that `(a*b) % c == ((a%c) * (b%c)) % c` to avoid overflow and calculate the last two digits efficiently."
693,Write a function to remove multiple spaces in a string by using regex.,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))","```python
import re

def remove_multiple_spaces(input_string):
    return re.sub(r'\s+', ' ', input_string).strip()
```"
694,Write a function to extract unique values from the given dictionary values.,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res","```python
def extract_unique_values(dictionary):
    unique_values = set()
    for value in dictionary.values():
        if isinstance(value, list):
            unique_values.update(set(value))
        elif isinstance(value, dict):
            unique_values.update(extract_unique_values(value))
        else:
            unique_values.add(value)
    return list(unique_values)
```"
695,Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ","```python
def check_tuple_elements(tuple1, tuple2):
    """"""
    This function checks if each element of the second tuple is greater than its corresponding index in the first tuple.

    Args:
        tuple1 (tuple): The first input tuple.
        tuple2 (tuple): The second input tuple.

    Returns:
        bool: True if all elements of tuple2 are greater than their corresponding indices in tuple1, False otherwise.
    """"""
    return all(i < j for i, j in enumerate(tuple2))
```"
696,Write a function to zip two given lists of lists.,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result","```python
def zip_two_lists_of_lists(list1, list2):
    return [list(pair) for pair in zip(list1, list2)]
```

Alternatively, you could use the built-in `zip` function with the `*` operator to unpack the zipped pairs into separate lists:

```python
def zip_two_lists_of_lists(list1, list2):
    return [[*pair] for pair in zip(list1, list2)]
```"
697,Write a function to find number of even elements in the given list using lambda function.,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even","```python
def count_even_elements(lst):
    return len(list(filter(lambda x: x % 2 == 0, lst)))
```"
698,Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
","```python
def sort_dict_by_tuple_product(input_dict):
    return dict(sorted(input_dict.items(), key=lambda x: x[0][0]*x[0][1]))
```"
699,Write a python function to find the minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ","```python
def min_swaps(s1: str, s2: str) -> int:
    if len(s1) != len(s2):
        raise ValueError(""Both strings must be of equal length"")
    
    count = 0
    i = 0
    
    while i < len(s1):
        if s1[i] == s2[i]:
            i += 1
        else:
            j = i + 1
            found = False
            
            while j < len(s2) and not found:
                if (s1[j] == s2[i]) and (s2[j] == s1[i]):
                    count += 1
                    temp = s1[i:j+1]
                    s1 = s1[:i] + ''.join(reversed(temp)) + s1[j+1:]
                    found = True
                j += 1
                
            if not found:
                raise ValueError(""Invalid input. Strings cannot be swapped"")
            
    return count
```"
700,Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","```python
def count_elements_in_range(lst, min_value, max_value):
    return sum(1 for element in lst if min_value <= element <= max_value)
```"
701,Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","```python
def equilibrium_index(arr):
    total_sum = sum(arr)
    left_sum = 0
    for i in range(len(arr)):
        if left_sum == total_sum - arr[i] - left_sum:
            return i
        left_sum += arr[i]
    return -1
```"
702,Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.,"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans","```python
def min_removals(arr, k):
    arr.sort()
    n = len(arr)
    i = 0
    j = 0
    min_count = float('inf')
    
    while j < n:
        diff = arr[j] - arr[i]
        
        if diff <= k:
            if j == n-1:
                min_count = min(min_count, n - (j-i+1))
            j += 1
        else:
            i += 1
            
    return min_count
```"
703,Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","```python
def is_key_present(dictionary, key):
    return key in dictionary
```

Alternatively:

```python
def is_key_present(dictionary, key):
    try:
        _ = dictionary[key]
        return True
    except KeyError:
        return False
```"
704,Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))","```python
def harmonic_sum(n):
    if n <= 0:
        raise ValueError(""n must be a positive integer"")
    sum = 0
    for i in range(1, n):
        sum += 1 / i
    return sum
```"
705,Write a function to sort a list of lists by length and value.,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1","```python
def sort_list_of_lists(lists):
    return sorted(sorted(sublist) or [float('inf')] for sublist in lists), key=lambda x: (len(x), x)
```"
706,Write a function to find whether an array is subset of another array.,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		","```python
def is_subset(arr1, arr2):
    set1 = set(arr1)
    set2 = set(arr2)
    if len(set1) > len(set2):
        return False
    for elem in set1:
        if elem not in set2:
            return False
    return True
```"
707,Write a python function to count the total set bits from 1 to n.,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ","```python
def count_set_bits(n):
    total = 0
    for i in range(1, n+1):
        total += bin(i).count('1')
    return total
```

Alternatively, you can also use a more efficient approach using Brian Kernighan's algorithm to count the number of set bits in each integer:

```python
def count_set_bits(n):
    total = 0
    for i in range(1, n+1):
        while i:
            total += i & 1
            i >>= 1
    return total
```

Or using a mathematical approach based on the properties of binary numbers:

```python
def count_set_bits(n):
    total = 0
    i = 2
    while (n // i) > 0:
        total += ((n // i) * (i // 2)) + max(0, n % i - (i // 2))
        i *= 2
    return total
```"
708,Write a python function to convert a string to a list.,"def Convert(string): 
    li = list(string.split("" "")) 
    return li ","```python
def convert_string_to_list(input_str):
    if not isinstance(input_str, str):
        raise ValueError(""Input must be a string"")
    return list(input_str)
```"
709,Write a function to count unique keys for each value present in the tuple.,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ","```python
def count_unique_keys(tuples):
    result = {}
    for tup in tuples:
        if tup[1] not in result:
            result[tup[1]] = 0
        result[tup[1]] += 1
    return result
```"
710,Write a function to access the initial and last data of the given tuple record.,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ","```python
def access_tuple_data(record):
    if len(record) > 0:
        initial_data = record[0]
        last_data = record[-1]
        return initial_data, last_data
    else:
        return None, None
```"
711,Write a python function to check whether the product of digits of a number at even and odd places is equal or not.,"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False","```python
def check_product(n):
    n = str(n)
    even_product = 1
    odd_product = 1
    
    for i in range(len(n)):
        if i % 2 == 0:
            even_product *= int(n[i])
        else:
            odd_product *= int(n[i])
    
    return even_product == odd_product
```"
712,Write a function to remove duplicates from a list of lists.,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate","```python
def remove_duplicates(lists):
    seen = set()
    result = []
    for lst in lists:
        tuple_lst = tuple(lst)
        if tuple_lst not in seen:
            seen.add(tuple_lst)
            result.append(lst)
    return result
```"
713,Write a function to check if the given tuple contains all valid values or not.,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ","```python
def check_tuple_values(tuple_to_check):
    if not isinstance(tuple_to_check, tuple):
        raise TypeError(""Input is not a tuple."")
    
    valid_values = [1, 2, 3, 'apple', 'banana']
    
    for value in tuple_to_check:
        if value not in valid_values:
            return False
    
    return True
```"
714,Write a python function to count the number of distinct power of prime factor of given number.,"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ","```python
import math

def count_distinct_prime_factors(n):
    factors = set()
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            if is_prime(i):
                factors.add(i)
            n //= i
    if n > 1 and is_prime(n):
        factors.add(n)
    return len(factors)

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True
```"
715,Write a function to convert the given string of integers into a tuple.,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ","```python
def convert_string_to_tuple(s):
    return tuple(map(int, s.split(', ')))
```"
716,Write a function to find the perimeter of a rombus.,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter","```python
def find_perimeter_of_rhombus(d1, d2):
    a = (d1**2 + d2**2)**0.5 / 2
    perimeter = 4 * ((a**2) ** 0.5)
    return perimeter
```"
717,Write a function to calculate the standard deviation.,"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean","```python
import math
from functools import reduce

def calculate_standard_deviation(numbers):
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return math.sqrt(variance)
```

Alternatively, you could use the `statistics` module which provides a function to calculate standard deviation directly:

```python
import statistics

def calculate_standard_deviation(numbers):
    return statistics.pstdev(numbers)
```"
718,Write a function to create a list taking alternate elements from another given list.,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ","```python
def create_alternate_list(input_list):
    return input_list[::2]
```"
719,Write a function that matches a string that has an a followed by zero or more b's.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```
import re

def match_a_followed_by_zero_or_more_bs(s):
    pattern = r'^ab*$'
    return bool(re.match(pattern, s))
```"
720,Write a function to add a dictionary to the tuple.,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ","```python
def add_dict_to_tuple(tuple_obj, dict_obj):
    list_obj = list(tuple_obj)
    list_obj.append(dict_obj)
    tuple_obj = tuple(list_obj)
    return tuple_obj
```"
721,Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)","```python
from typing import List
import itertools

def max_average_path(matrix: List[List[float]]) -> float:
    n = len(matrix)
    all_paths = list(itertools.product(range(n), repeat=n))
    valid_paths = [path for path in all_paths if all(path[i] < path[j] for i, j in zip(range(1, n), range(n)))]
    max_average = 0
    max_sum = 0

    for path in valid_paths:
        current_sum = sum(matrix[path[i]][i] for i in range(n))
        if current_sum > max_sum or (current_sum == max_sum and len(valid_paths) == 1):
            max_average = current_sum / n
            max_sum = current_sum

    return max_average
```"
722,Write a function to filter the height and width of students which are stored in a dictionary.,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ","```python
def filter_students(students, height_threshold, width_threshold):
    filtered_students = {}
    for student_name, dimensions in students.items():
        if 'height' in dimensions and 'width' not in dimensions:
            if dimensions['height'] >= height_threshold:
                filtered_students[student_name] = dimensions
        elif 'width' in dimensions and 'height' not in dimensions:
            if dimensions['width'] >= width_threshold:
                filtered_students[student_name] = dimensions
        else:
            if dimensions['height'] >= height_threshold and dimensions['width'] >= width_threshold:
                filtered_students[student_name] = dimensions
    return filtered_students
```"
723,Write a function to count the same pair in two given lists using map function.,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result","```python
from collections import Counter
from operator import eq

def count_same_pairs(list1, list2):
    counter = Counter(zip(list1, list2))
    return sum(map(eq(1), map(counter.get, filter(lambda x: x[0] == x[1], counter))))
```

or 

```python
def count_same_pairs(list1, list2):
    return sum(map(lambda x: 1 if x[0] == x[1] else 0, zip(list1, list2)))
```
In this code, we use map to create pairs of corresponding elements from the two lists and then map a lambda function that returns 1 for equal elements and 0 otherwise. The sum of these values gives us the count of same pairs in the two lists."
724,Write a function to calculate the sum of all digits of the base to the specified power.,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])","```python
def sum_of_digits(base, power):
    num = base ** power
    return sum(int(digit) for digit in str(num))
```"
725,Write a function to extract values between quotation marks of the given string by using regex.,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))","```python
import re

def extract_quoted_values(s):
    return re.findall(r'""([^""]*)""', s)
```"
726,Write a function to multiply the adjacent elements of the given tuple.,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","```python
def multiply_adjacent_elements(input_tuple):
    result = []
    for i in range(len(input_tuple) - 1):
        result.append(input_tuple[i] * input_tuple[i + 1])
    return tuple(result)
```"
727,Write a function to remove all characters except letters and numbers using regex,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result","```python
import re

def remove_special_characters(input_string):
    return re.sub(r'[^a-zA-Z0-9\s]', '', input_string)
```"
728,Write a function to sum elements in two lists.,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list","```python
def sum_elements(list1, list2):
    if len(list1) != len(list2):
        raise ValueError(""Lists must be of equal length"")
    
    return [a + b for a, b in zip(list1, list2)]
```"
729,Write a function to add two lists using map and lambda function.,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)","```python
def add_two_lists(list1, list2):
    if len(list1) != len(list2):
        raise ValueError(""Both lists must be of equal length"")
    
    result = list(map(lambda x: x[0] + x[1], zip(list1, list2)))
    return result
```"
730,Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","```python
def remove_consecutive_duplicates(input_list):
    output_list = []
    for item in input_list:
        if not output_list or item != output_list[-1]:
            output_list.append(item)
    return output_list
```"
731,Write a function to find the lateral surface area of a cone.,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA","```python
import math

def lateral_surface_area_of_cone(radius, slant_height):
    return math.pi * radius * slant_height
```"
732,"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))
","```python
def replace_with_colon(input_string):
    translation_table = str.maketrans(' ,.', ':::')
    return input_string.translate(translation_table)
```

Alternatively:

```python
def replace_with_colon(input_string):
    for char in [' ', ',', '.']:
        input_string = input_string.replace(char, ':')
    return input_string
```"
733,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result","```python
def find_index(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            if mid == 0 or arr[mid-1] != target:
                return mid
            else:
                high = mid - 1
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1
```"
734,Write a python function to find sum of products of all possible subarrays.,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)","```python
def sum_of_products(arr):
    n = len(arr)
    total_sum = 0
    for i in range(n):
        product = 1
        for j in range(i, n):
            product *= arr[j]
            total_sum += product
    return total_sum
```

This function calculates the sum of products of all possible subarrays by iterating over each element in the array and calculating the product of that element with all elements to its right. The product is then added to a running total, which is returned at the end of the function."
735,Write a python function to toggle bits of the number except the first and the last bit.,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ","```python
def toggle_middle_bits(n):
    bits = len(bin(n)) - 2
    if bits < 3:
        return n
    
    mask = (1 << (bits - 1)) - 1
    middle_bits = ((n >> 1) & (mask ^ (1 << (bits - 2))))
    
    toggled_middle_bits = ~middle_bits & (mask ^ (1 << (bits - 2)))
    
    result = n & ~(mask ^ (1 << (bits - 2)))
    result |= toggled_middle_bits
    
    return result
```"
736,Write a function to locate the left insertion point for a specified value in sorted order.,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i","```python
def left_insertion_point(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left
```"
737,Write a function to check whether the given string is starting with a vowel or not using regex.,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ","```python
import re

def check_vowel_start(string):
    pattern = r'^[aeiouAEIOU]'
    if re.match(pattern, string):
        return True
    return False
```"
738,Write a function to calculate the geometric sum of n-1.,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)","```python
def geometric_sum(a, r, n):
    if r == 1:
        return a * (n - 1)
    else:
        return a * ((r ** (n - 1)) - 1) / (r - 1)
```"
739,Write a python function to find the index of smallest triangular number with n digits.,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ","```python
def smallest_triangular_number_index(n):
    i = 1
    while True:
        triangular_num = (i * (i + 1)) // 2
        if len(str(triangular_num)) == n:
            return i
        i += 1
```"
740,Write a function to convert the given tuple to a key-value dictionary using adjacent elements.,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ","```python
def convert_tuple_to_dict(input_tuple):
    if len(input_tuple) % 2 != 0:
        raise ValueError(""Input tuple must have an even number of elements"")
    output_dict = {}
    for i in range(0, len(input_tuple), 2):
        key = input_tuple[i]
        value = input_tuple[i+1]
        output_dict[key] = value
    return output_dict
```"
741,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True","```python
def check_same_characters(s):
    if len(set(s)) == 1:
        return True
    else:
        return False
```"
742,Write a function to caluclate the area of a tetrahedron.,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area","```python
import math

def tetrahedron_area(a):
    s = (a + a + a) / 2
    area = math.sqrt(s * (s - a) * (s - a) * (s - a))
    return area
```"
743,Write a function to rotate a given list by specified number of items to the right direction.,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result","```python
def rotate_list(input_list, num_positions):
    if len(input_list) == 0:
        return input_list
    num_positions = num_positions % len(input_list)
    return input_list[-num_positions:] + input_list[:-num_positions]
```"
744,Write a function to check if the given tuple has any none value or not.,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ","```python
def has_none_values(given_tuple):
    for element in given_tuple:
        if element is None:
            return True
    return False
```"
745,Write a function to find numbers within a given range where every number is divisible by every digit it contains.,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]","```python
def divisible_by_digits(start, end):
    result = []
    for num in range(start, end + 1):
        digits = [int(digit) for digit in str(num)]
        if all(digit != 0 and num % digit == 0 for digit in digits):
            result.append(num)
    return result
```"
746,Write a function to find area of a sector.,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea","```python
import math

def sector_area(radius, angle):
    return (angle / 360) * math.pi * radius ** 2
```"
747,Write a function to find the longest common subsequence for the given three string sequence.,"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]","```python
def longest_common_subsequence(str1, str2, str3):
    m = len(str1)
    n = len(str2)
    o = len(str3)

    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            for k in range(o+1):
                if (i == 0 or j == 0 or k == 0):
                    L[i][j][k] = 0
                elif (str1[i-1] == str2[j-1] and str1[i-1] == str3[k-1]):
                    L[i][j][k] = L[i-1][j-1][k-1] + 1
                else:
                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])

    index = L[m][n][o]

    lcs = [""""] * (index+1)
    lcs[index] = """"

    i, j, k = m, n, o
    while i > 0 and j > 0 and k > 0:
        if str1[i-1] == str2[j-1] and str1[i-1] == str3[k-1]:
            lcs[index-1] = str1[i-1]
            i -= 1
            j -= 1
            k -= 1
            index -= 1
        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:
            i -= 1
        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:
            j -= 1
        else:
            k -= 1

    return """".join(lcs)
```"
748,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","```python
import re

def add_spaces_to_capitalized_words(input_string):
    return re.sub(r'(?<![A-Z])(?=[A-Z])', ' ', input_string)
```"
749,Write a function to sort a given list of strings of numbers numerically.,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result","```python
def sort_numerical_strings(lst):
    return sorted(lst, key=lambda x: int(''.join(filter(str.isdigit, x))))
```"
750,Write a function to add the given tuple to the given list.,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ","```python
def add_tuple_to_list(given_list, given_tuple):
    if isinstance(given_list, list) and isinstance(given_tuple, tuple):
        return given_list + [given_tuple]
    raise ValueError(""Input must be a list and a tuple"")
```"
751,Write a function to check if the given array represents min heap or not.,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child","```python
def is_min_heap(arr):
    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        left_child = 2 * i + 1
        right_child = 2 * i + 2
        if left_child < n and arr[i] > arr[left_child]:
            return False
        if right_child < n and arr[i] > arr[right_child]:
            return False
    return True
```"
752,Write a function to find the nth jacobsthal number.,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]","```python
def jacobsthal(n):
    if n == 0:
        return 0
    elif n == 1:
        return 2
    else:
        a, b = 0, 2
        for _ in range(2, n + 1):
            a, b = b, 2 * b + a
        return b
```"
753,Write a function to find minimum k records from tuple list.,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ","```python
def min_k_records(tuple_list, k):
    if k >= len(tuple_list):
        return tuple_list
    
    sorted_tuple_list = sorted(tuple_list)
    return sorted_tuple_list[:k]
```

Alternatively, you can use `heapq.nsmallest` function to achieve the same result in a more efficient way:

```python
import heapq

def min_k_records(tuple_list, k):
    if k >= len(tuple_list):
        return tuple_list
    
    return heapq.nsmallest(k, tuple_list)
```"
754,Write a function to find common index elements from three lists.,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result","```python
def find_common_elements(list1, list2, list3):
    common_elements = set()
    for i in range(min(len(list1), len(list2), len(list3))):
        if list1[i] == list2[i] == list3[i]:
            common_elements.add((i, list1[i]))
    return common_elements
```"
755,Write a function to find the second smallest number in a list.,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ","```python
def second_smallest(nums):
    if len(set(nums)) < 2:
        return None
    return sorted(set(nums))[1]
```"
756,Write a function that matches a string that has an a followed by zero or one 'b'.,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```
import re

def match_a_followed_by_zero_or_one_b(s):
    pattern = r'^a(b?)$'
    return bool(re.match(pattern, s))
```"
757,Write a function to count the pairs of reverse strings in the given string list.,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)","```python
def count_reverse_pairs(str_list):
    str_dict = {}
    for s in str_list:
        reverse_s = s[::-1]
        if reverse_s not in str_dict:
            str_dict[reverse_s] = 0
        str_dict[reverse_s] += 1
    
    pairs_count = 0
    for key, value in str_dict.items():
        if key == key[::-1]:
            continue
        elif key in str_dict and key[::-1] in str_dict:
            pairs_count += str_dict[key] * str_dict[key[::-1]]
    
    return pairs_count // 2
```"
758,Write a function to count number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result","```python
def count_unique_lists(lists):
    return len(set(tuple(sorted(sublist)) for sublist in lists))
```"
759,Write a function to check a decimal with a precision of 2.,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)","```python
import re

def check_decimal(num):
    pattern = r'^-?\d+(\.\d{1,2})?$'
    if re.match(pattern, str(num)):
        return True
    else:
        return False
```

You can use this function like `check_decimal(12.34)` or `check_decimal(-56.78)`."
760,Write a python function to check whether an array contains only one distinct element or not.,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')","```python
def check_distinct_element(arr):
    return len(set(arr)) == 1 if arr else True
```

Alternatively, you could also use the following implementation:

```python
def check_distinct_element(arr):
    return all(x == arr[0] for x in arr) if arr else True
```"
761,Write a function to caluclate arc length of an angle.,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength","```python
import math

def calculate_arc_length(radius, angle):
    """"""
    Calculate arc length of an angle.

    Args:
        radius (float): The radius of a circle.
        angle (float): An angle in degrees.

    Returns:
        float: Arc length of the angle.
    """"""
    return 2 * math.pi * radius * (angle / 360)
```"
762,Write a function to check whether the given month number contains 30 days or not.,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False","```python
def check_month_days(month):
    if month in [4, 6, 9, 11]:
        return True
    elif month == 2:
        return False
    else:
        return None
```"
763,Write a python function to find the minimum difference between any two elements in a given array.,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ","```python
def min_diff(arr):
    arr.sort()
    return min(b - a for a, b in zip(arr, arr[1:]))
```"
764,Write a python function to count numeric values in a given string.,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr","```python
import re

def count_numeric_values(input_string):
    return len(re.findall(r'\d', input_string))
```"
765,Write a function to find nth polite number.,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ","```python
def find_nth_polite_number(n):
    if n < 1:
        raise ValueError(""Input must be a positive integer."")
    
    count = 0
    num = 0
    
    while True:
        num += 1
        
        if bin(num).count('1') % 2 == 0 and (num + 1) % 4 != 0:
            count += 1
            
            if count == n:
                return num
```"
766,Write a function to iterate over all pairs of consecutive items in a given list.,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp","```python
def iterate_consecutive_pairs(input_list):
    for i in range(len(input_list) - 1):
        yield (input_list[i], input_list[i + 1])
```"
767,Write a python function to count the number of pairs whose sum is equal to ‘sum’.,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","```python
def count_pairs_with_sum(arr, n, sum):
    unordered_map = {}
    
    for i in range(n):
        if arr[i] not in unordered_map:
            unordered_map[arr[i]] = 1
        else:
            unordered_map[arr[i]] += 1
    
    twice_count = 0
    
    for i in range(n):
        if (sum - arr[i]) in unordered_map:
            twice_count += unordered_map[sum - arr[i]]
        
        if sum - arr[i] == arr[i]:
            twice_count -= 1
    
    return twice_count // 2
```"
768,Write a python function to check for odd parity of a given number.,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False","```python
def check_odd_parity(n):
    parity = 0
    while n:
        parity ^= n & 1
        n >>= 1
    return parity != 0
```"
769,Write a python function to get the difference between two lists.,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ","```python
def get_list_difference(list1, list2):
    """"""
    This function calculates the difference between two lists.
    
    Args:
        list1 (list): The first list.
        list2 (list): The second list.
        
    Returns:
        list: A list of elements that are in list1 but not in list2, 
             and a list of elements that are in list2 but not in list1.
    """"""
    return [element for element in list1 if element not in list2], \
           [element for element in list2 if element not in list1]
```"
770,Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ","```python
def sum_of_fourth_powers(n):
    return sum((2*i - 1)**4 for i in range(1, n + 1))
```"
771,Write a function to check if the given expression is balanced or not.,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack","```python
def is_balanced(s):
    stack = []
    bracket_map = {')': '(', '}': '{', ']': '['}
    
    for c in s:
        if c in ['(', '{', '[']:
            stack.append(c)
        elif c in [')', '}', ']']:
            if not stack or stack.pop() != bracket_map[c]:
                return False
                
    return not stack
```"
772,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","```python
def remove_words_with_k_length(s, k):
    words = s.split()
    filtered_words = [word for word in words if len(word) != k]
    return ' '.join(filtered_words)
```"
773,Write a function to find the occurrence and position of the substrings within a string.,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)","```python
def find_substring(string, substring):
    positions = [i for i in range(len(string)) if string.startswith(substring, i)]
    occurrences = len(positions)
    return occurrences, positions
```"
774,Write a function to check if the string is a valid email address or not using regex.,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ","```python
import re

def is_valid_email(email):
    pattern = r""^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$""
    return bool(re.match(pattern, email))
```"
775,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","```python
def check_odd_index_numbers(lst):
    return all(isinstance(x, int) and x % 2 != 0 for i, x in enumerate(lst) if i % 2 != 0)
```
This function uses the `all()` function to check that every odd-indexed element is an integer and is odd."
776,Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","```python
def count_chars_with_vowel_neighbors(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for i in range(1, len(s) - 1):
        if s[i-1] in vowels and s[i+1] in vowels:
            count += 1
    return count
```"
777,Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum","```python
def sum_of_non_repeated_elements(array):
    frequency_map = {}
    for num in array:
        if num in frequency_map:
            frequency_map[num] += 1
        else:
            frequency_map[num] = 1
    
    non_repeated_sum = sum(key for key, value in frequency_map.items() if value == 1)
    
    return non_repeated_sum
```"
778,Write a function to pack consecutive duplicates of a given list elements into sublists.,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]","```python
def pack_consecutive_duplicates(lst):
    if not lst:
        return []
    
    result = [[lst[0]]]
    
    for i in range(1, len(lst)):
        if lst[i] == lst[i - 1]:
            result[-1].append(lst[i])
        else:
            result.append([lst[i]])
            
    return result
```"
779,Write a function to count the number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result","```python
def count_unique_lists(lists):
    seen = set()
    unique_count = 0
    for lst in lists:
        tuple_lst = tuple(lst)
        if tuple_lst not in seen:
            seen.add(tuple_lst)
            unique_count += 1
    return unique_count
```"
780,Write a function to find the combinations of sums with tuples in the given tuple list.,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ","```python
def find_combinations(tuple_list):
    result = set()
    for i in range(1 << len(tuple_list)):
        combination = [tuple_list[j] for j in range(len(tuple_list)) if (i & (1 << j))]
        total_sum = sum(sum(tup) for tup in combination)
        result.add((total_sum, tuple(combination)))
    return list(result)
```"
781,Write a python function to check whether the count of divisors is even or odd.,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") ","```python
def divisor_count(n):
    count = 0
    for i in range(1, n + 1):
        if n % i == 0:
            count += 1
    return ""even"" if count % 2 == 0 else ""odd""
```

Alternatively, you can use the following more efficient function:

```python
def divisor_count(n):
    count = sum(1 for i in range(1, int(n ** 0.5) + 1) if n % i == 0)
    if n ** 0.5 == int(n ** 0.5):
        return ""even"" if count * 2 - 1 % 2 == 0 else ""odd""
    else:
        return ""even"" if count * 2 % 2 == 0 else ""odd""
```"
782,Write a python function to find the sum of all odd length subarrays.,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum","```python
def sum_of_odd_length_subarrays(arr):
    n = len(arr)
    total_sum = 0
    
    for length in range(1, n + 1):
        if length % 2 != 0:
            for i in range(n - length + 1):
                subarray_sum = sum(arr[i:i + length])
                total_sum += subarray_sum
                
    return total_sum
```"
783,Write a function to convert rgb color to hsv color.,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","```python
import numpy as np

def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    else:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = df/mx
    v = mx
    return round(h, 2), round(s, 2), round(v, 2)
```"
784,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)","```python
def product_first_even_odd(lst):
    if len(lst) < 2:
        raise ValueError(""List must have at least two elements"")

    even_numbers = [num for num in lst if num % 2 == 0]
    odd_numbers = [num for num in lst if num % 2 != 0]

    if not even_numbers or not odd_numbers:
        raise ValueError(""List must contain both even and odd numbers"")

    first_even = next((x for x in lst if x % 2 == 0), None)
    first_odd = next((x for x in lst if x % 2 != 0), None)

    return first_even * first_odd
```"
785,Write a function to convert tuple string to integer tuple.,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ","```python
def convert_to_int_tuple(tuple_str):
    if isinstance(tuple_str, str):
        tuple_str = tuple_str.strip('()')
        elements = tuple_str.split(', ')
        try:
            int_tuple = tuple(int(element) for element in elements)
            return int_tuple
        except ValueError:
            raise ValueError(""The string does not represent a valid integer tuple."")
    else:
        raise TypeError(""Input must be a string."")
```"
786,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i","```python
def locate_right_insertion_point(sorted_list, target):
    left, right = 0, len(sorted_list)
    while left < right:
        mid = (left + right) // 2
        if sorted_list[mid] <= target:
            left = mid + 1
        else:
            right = mid
    return left
```"
787,Write a function that matches a string that has an a followed by three 'b'.,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```
import re

def match_string(s):
    pattern = r'ab{3}'
    match = re.search(pattern, s)
    return bool(match)
```"
788,Write a function to create a new tuple from the given string and list.,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ","```python
def create_tuple(input_string, input_list):
    new_tuple = tuple([input_string] + input_list)
    return new_tuple
```"
789,Write a function to calculate the perimeter of a regular polygon.,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter","```python
def calculate_polygon_perimeter(side_length, number_of_sides):
    """"""
    Calculate the perimeter of a regular polygon.

    Args:
        side_length (float): The length of each side of the polygon.
        number_of_sides (int): The number of sides in the polygon.

    Returns:
        float: The perimeter of the polygon.
    """"""
    return side_length * number_of_sides
```"
790,Write a python function to check whether every even index contains even numbers of a given list.,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","```python
def check_even_index(lst):
    for i in range(0, len(lst), 2):
        if lst[i] % 2 != 0:
            return False
    return True
```"
791,Write a function to remove the nested record from the given tuple.,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ","```python
def remove_nested_record(tup):
    new_tup = []
    for item in tup:
        if isinstance(item, tuple):
            new_item = [i for i in item if not isinstance(i, tuple)]
            new_tup.append(tuple(new_item))
        else:
            new_tup.append(item)
    return tuple(new_tup)
```"
792,Write a python function to count the number of lists in a given number of lists.,"def count_list(input_list): 
    return len(input_list)","```python
def count_lists_in_list(lists):
    count = 0
    for item in lists:
        if isinstance(item, list):
            count += 1
            count += count_lists_in_list(item)
    return count
```
This function takes a list as input and returns the total number of lists (including sublists) it contains."
793,Write a python function to find the last position of an element in a sorted array.,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res","```python
def last_position(arr, target):
    left, right = 0, len(arr) - 1
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            result = mid
            left = mid + 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return result
```"
794,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","```
import re

def match_string(s):
    pattern = r'a.*b'
    if re.fullmatch(pattern, s):
        return True
    return False
```"
795,Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items","```python
import heapq

def find_n_cheapest(items, n):
    return heapq.nsmallest(n, items)
```
This function takes a list of items with their prices (e.g., tuples like `(item_name, price)`) and an integer `n` as input, then returns the `n` cheapest items using the heap queue algorithm."
796,Write function to find the sum of all items in the given dictionary.,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum","```python
def sum_dict_items(dictionary):
    return sum(val for val in dictionary.values() if isinstance(val, (int, float)))
```

If you want to handle nested dictionaries:

```python
def sum_dict_items(dictionary):
    total = 0
    for key, value in dictionary.items():
        if isinstance(value, dict):
            total += sum_dict_items(value)
        elif isinstance(value, (int, float)):
            total += value
    return total
```"
797,Write a python function to find the sum of all odd natural numbers within the range l and r.,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)","```python
def sum_odd_numbers(l, r):
    return sum(i for i in range(l, r+1) if i % 2 != 0)
```"
798,Write a python function to find the sum of an array.,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ","```python
def sum_of_array(arr):
    return sum(arr)
```"
799,Write a python function to left rotate the bits of a given number.,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ","```python
def left_rotate_bits(n, k):
    num_bits = n.bit_length()
    k %= num_bits
    mask = (1 << num_bits) - 1
    shifted_n = ((n << k) & mask)
    rotated_n = shifted_n | (n >> (num_bits - k))
    return rotated_n
```"
800,Write a function to remove all whitespaces from a string.,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))","```python
def remove_whitespaces(input_string):
    return input_string.replace("" "", """")
```"
801,Write a python function to count the number of equal numbers from three given integers.,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))","```python
def count_equal(a, b, c):
    numbers = [a, b, c]
    unique_numbers = list(set(numbers))
    equal_counts = {}
    
    for num in unique_numbers:
        equal_counts[num] = numbers.count(num)
        
    return max(equal_counts.values())
```"
802,Write a python function to count the number of rotations required to generate a sorted array.,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0","```python
def count_rotations(arr):
    rotations = 0
    sorted_arr = sorted(arr)
    
    while arr != sorted_arr:
        if len(set(arr)) == 1:
            break
        
        last_element = arr.pop()
        arr.insert(0, last_element)
        
        rotations += 1
    
    return rotations
```"
803,Write a python function to check whether the given number is a perfect square or not.,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False","```python
import math

def is_perfect_square(n):
    root = math.sqrt(n)
    return root == int(root)
```"
804,Write a python function to check whether the product of numbers is even or not.,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False","```python
def is_product_even(*numbers):
    product = 1
    for num in numbers:
        product *= num
    return product % 2 == 0
```"
805,Write a function to find the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
 return max(lists, key=sum)","```python
def find_highest_sum_list(lists):
    return max(lists, key=sum)
```"
806,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","```python
def max_uppercase_run(s):
    if not s:
        return 0
    
    max_run = current_run = 1 if s[0].isupper() else 0
    
    for char in s[1:]:
        if char.isupper():
            current_run += 1
            max_run = max(max_run, current_run)
        else:
            current_run = 0
            
    return max_run
```"
807,Write a python function to find the first odd number in a given list of numbers.,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd","```python
def find_first_odd(numbers):
    for num in numbers:
        if isinstance(num, (int, float)) and num % 2 != 0:
            return num
    return None
```"
808,Write a function to check if the given tuples contain the k or not.,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ","```python
def check_tuple(tuples_list, k):
    return any(k in tup for tup in tuples_list)
```

Alternatively, you can use a generator expression with the `in` operator to achieve the same result:

```python
def check_tuple(tuples_list, k):
    return k in (item for tup in tuples_list for item in tup)
```"
809,Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ","```python
def check_tuple_elements(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""Both tuples must be of the same length"")
    
    for i in range(len(tuple1)):
        if not (i < tuple1[i] and tuple2[i] <= i):
            return False
    return True
```"
810,Write a function to iterate over elements repeating each as many times as its count.,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())","```python
def repeat_elements(lst):
    result = []
    for i in lst:
        if isinstance(i, (list, tuple)):
            count, value = i
            result.extend([value] * count)
        elif isinstance(i, dict) and 'count' in i and 'value' in i:
            result.extend([i['value']] * i['count'])
    return result
```"
811,Write a function to check if two lists of tuples are identical or not.,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ","```python
def are_lists_of_tuples_identical(list1, list2):
    if len(list1) != len(list2):
        return False
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    return True
```

Alternatively:

```python
def are_lists_of_tuples_identical(list1, list2):
    return sorted(map(tuple, list1)) == sorted(map(tuple, list2))
```
or 

```python
def are_lists_of_tuples_identical(list1, list2):
    return set(list1) == set(list2)
```"
812,Write a function to abbreviate 'road' as 'rd.' in a given string.,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))","```python
def abbreviate_road(input_string):
    words = input_string.split()
    abbreviated_words = [word.replace('road', 'rd.') for word in words]
    abbreviated_string = ' '.join(abbreviated_words)
    return abbreviated_string
```"
813,Write a function to find length of the string.,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count","```python
def find_length(s):
    try:
        return len(str(s))
    except Exception as e:
        raise ValueError(""Invalid input"") from e
```"
814,Write a function to find the area of a rombus.,"def rombus_area(p,q):
  area=(p*q)/2
  return area","```python
import math

def calculate_rombus_area(d1, d2):
    if d1 <= 0 or d2 <= 0:
        raise ValueError(""Diagonal lengths must be positive numbers"")
    area = (d1 * d2) / 2
    return area
```"
815,"Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr","```python
def sort_012(arr):
    low = 0
    mid = 0
    high = len(arr) - 1
    
    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1
    
    return arr
```"
816,Write a function to clear the values of the given tuples.,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ","```python
def clear_tuples(*args):
    return tuple(None for _ in args)
```"
817,Write a function to find numbers divisible by m or n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result","```python
def find_divisible_numbers(numbers, m, n):
    return list(filter(lambda x: x % m == 0 or x % n == 0, numbers))
```"
818,Write a python function to count lower case letters in a given string.,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr","```python
def count_lower_case_letters(s):
    return sum(1 for c in s if c.islower())
```"
819,Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","```python
def count_consecutive_duplicates(lst):
    if len(lst) == 0:
        return {}
    
    freq_dict = {}
    current_num = lst[0]
    current_count = 1
    
    for num in lst[1:]:
        if num == current_num:
            current_count += 1
        else:
            freq_dict[current_num] = max(freq_dict.get(current_num, 0), current_count)
            current_num = num
            current_count = 1
            
    freq_dict[current_num] = max(freq_dict.get(current_num, 0), current_count)
    
    return freq_dict
```"
820,Write a function to check whether the given month number contains 28 days or not.,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False","```python
def check_days_in_month(month_number):
    if 1 <= month_number <= 12:
        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        return days[month_number - 1] == 28
    else:
        raise ValueError(""Invalid month number. Month must be between 1 and 12."")
```"
821,Write a function to merge two dictionaries into a single expression.,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict","```python
def merge_dictionaries(dict1, dict2):
    return {**dict1, **dict2}
```"
822,Write a function to return true if the password is valid.,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","```python
def validate_password(password):
    has_upper = False
    has_lower = False
    has_digit = False
    
    if len(password) < 8:
        return False
        
    for char in password:
        if not has_upper and char.isupper():
            has_upper = True
        elif not has_lower and char.islower():
            has_lower = True
        elif not has_digit and char.isdigit():
            has_digit = True
            
    return has_upper and has_lower and has_digit
```"
823,Write a function to check if the given string starts with a substring using regex.,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")","```python
import re

def check_start_with_regex(input_str, substring):
    pattern = '^' + re.escape(substring)
    return bool(re.match(pattern, input_str))
```"
824,Write a python function to remove even numbers from a given list.,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l","```python
def remove_even_numbers(num_list):
    return [num for num in num_list if num % 2 != 0]
```"
825,Write a python function to access multiple elements of specified index from a given list.,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result","```python
def access_multiple_elements(input_list, *indices):
    """"""
    Access multiple elements of specified index from a given list.

    Args:
        input_list (list): The list to retrieve elements from.
        indices: Variable number of indices to access.

    Returns:
        tuple: A tuple containing the accessed elements in the order of their respective indices.
    """"""
    return tuple(input_list[i] for i in indices)
```"
826,Write a python function to find the type of triangle from the given sides.,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") ","```python
def find_triangle_type(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        sides = sorted([a, b, c])
        if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:
            return 'Right Triangle'
        elif sides[0] == sides[1] == sides[2]:
            return 'Equilateral Triangle'
        elif sides[0] == sides[1] or sides[1] == sides[2] or sides[0] == sides[2]:
            return 'Isosceles Triangle'
        else:
            return 'Scalene Triangle'
    else:
        return 'Not a Triangle'
```"
827,Write a function to sum a specific column of a list in a given list of lists.,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result","```python
def sum_column(lists, column_index):
    return sum(row[column_index] for row in lists if len(row) > column_index)
```"
828,"Write a function to count alphabets,digits and special charactes in a given string.","def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ","```python
def count_characters(input_string):
    alphabet_count = sum(1 for char in input_string if char.isalpha())
    digit_count = sum(1 for char in input_string if char.isdigit())
    special_char_count = sum(1 for char in input_string if not char.isalnum() and not char.isspace())
    return alphabet_count, digit_count, special_char_count
```"
829,Write a function to find out the second most repeated (or frequent) string in the given sequence.,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ","```python
def second_most_repeated(strings):
    frequency = {}
    for string in strings:
        if string in frequency:
            frequency[string] += 1
        else:
            frequency[string] = 1
    sorted_frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)
    if len(sorted_frequency) < 2:
        return None
    second_most_frequent_string, _ = sorted_frequency[1]
    return second_most_frequent_string
```"
830,Write a function to round up a number to specific digits.,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)","```python
import math

def round_up(num, digits):
    multiplier = 10 ** digits
    return math.ceil(num * multiplier) / multiplier
```"
831,Write a python function to count equal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ","```python
def count_equal_pairs(arr):
    freq = {}
    for num in arr:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    pairs_count = sum([freq[num] // 2 for num in freq])
    return pairs_count
```"
832,Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","```python
import re

def extract_max_numeric_value(input_string):
    numeric_values = [int(value) for value in re.findall(r'\d+', input_string)]
    if numeric_values:
        return max(numeric_values)
    else:
        return None
```"
833,Write a function to get dictionary keys as a list.,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list","```python
def get_dict_keys_as_list(input_dict):
    return list(input_dict.keys())
```"
834,Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"def generate_matrix(n):
        if n<=0:
            return [] 
        matrix=[row[:] for row in [[0]*n]*n]        
        row_st=0
        row_ed=n-1        
        col_st=0
        col_ed=n-1
        current=1        
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix","```python
def generate_square_matrix(n):
    matrix = [[0]*n for _ in range(n)]
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    direction_index = 0
    row, col = 0, 0

    for i in range(1, n*n+1):
        matrix[row][col] = i ** 2
        dr, dc = directions[direction_index]
        nr, nc = row + dr, col + dc
        if 0 <= nr < n and 0 <= nc < n and matrix[nr][nc] == 0:
            row, col = nr, nc
        else:
            direction_index = (direction_index + 1) % 4
            dr, dc = directions[direction_index]
            row, col = row + dr, col + dc

    return matrix
```"
835,Write a python function to find the slope of a line.,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ","```python
def find_slope(x1, y1, x2, y2):
    if x2 - x1 == 0:
        return float('inf')
    slope = (y2 - y1) / (x2 - x1)
    return slope
```"
836,Write a function to find length of the subarray having maximum sum.,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)","```python
def max_subarray_length(arr):
    if not arr:
        return 0

    max_sum = float('-inf')
    max_len = 0
    current_sum = 0
    start = 0
    end = 0
    temp_start = 0

    for i in range(len(arr)):
        if current_sum <= 0:
            current_sum = arr[i]
            temp_start = i
        else:
            current_sum += arr[i]

        if current_sum > max_sum:
            max_sum = current_sum
            start = temp_start
            end = i

    for j in range(start, end + 1):
        max_len += 1

    return max_len
```"
837,Write a python function to find the cube sum of first n odd natural numbers.,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum","```python
def cube_sum_of_first_n_odd_numbers(n):
    cube_sum = 0
    for i in range(1, n+1):
        odd_number = 2 * i - 1
        cube_sum += odd_number ** 3
    return cube_sum
```"
838,Write a python function to find minimum number swaps required to make two binary strings equal.,"def min_Swaps(s1,s2) :  
    c0 = 0; c1 = 0;  
    for i in range(len(s1)) :  
        if (s1[i] == '0' and s2[i] == '1') : 
            c0 += 1;    
        elif (s1[i] == '1' and s2[i] == '0') : 
            c1 += 1;  
    result = c0 // 2 + c1 // 2;  
    if (c0 % 2 == 0 and c1 % 2 == 0) : 
        return result;  
    elif ((c0 + c1) % 2 == 0) : 
        return result + 2;  
    else : 
        return -1;  ","```python
def min_swaps(s1, s2):
    if len(s1) != len(s2):
        raise ValueError(""Both strings must be of equal length"")

    swaps = 0
    i = 0
    while i < len(s1):
        if s1[i] == s2[i]:
            i += 1
        else:
            j = i + 1
            while j < len(s1) and (s1[j] != s2[i] or s2[j] != s1[i]):
                j += 1
            if j == len(s1):
                raise ValueError(""No swaps possible to make strings equal"")
            swaps += 1
            i = j + 1

    return swaps
```"
839,Write a function to sort the tuples alphabetically by the first item of each tuple.,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup","```python
def sort_tuples(tuples_list):
    return sorted(tuples_list, key=lambda x: x[0].lower())
```"
840,Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ","```python
def check_quadratic_roots(a, b, c):
    determinant = (b**2) - (4*a*c)
    if determinant < 0:
        return False
    root1 = (-b + determinant**(1/2)) / (2 * a)
    root2 = (-b - determinant**(1/2)) / (2 * a)
    return abs(root1 - (-root2)) < 1e-9 or abs(root2 - (-root1)) < 1e-9
```"
841,Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ","```python
def count_inversions(arr):
    if len(arr) <= 1:
        return arr, 0
    mid = len(arr) // 2
    left, inv_left = count_inversions(arr[:mid])
    right, inv_right = count_inversions(arr[mid:])
    merged, inv_merge = merge_and_count(left, right)
    return merged, inv_left + inv_right + inv_merge

def merge_and_count(left, right):
    result = []
    i, j = 0, 0
    inversions = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            inversions += len(left) - i
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result, inversions

def count_inversions_wrapper(arr):
    _, inversions = count_inversions(arr)
    return inversions
```"
842,Write a function to find the number which occurs for odd number of times in the given array.,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1","```python
def find_odd_occurrence(nums):
    count_dict = {}
    for num in nums:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    for key, value in count_dict.items():
        if value % 2 != 0:
            return key
```"
843,Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]","```python
import heapq

def nthSuperUglyNumber(n, primes):
    heap = [1]
    seen = set([1])
    ugly = []
    
    for _ in range(n):
        val = heapq.heappop(heap)
        ugly.append(val)
        
        for p in primes:
            if p * val not in seen:
                seen.add(p * val)
                heapq.heappush(heap, p * val)
                
    return ugly[-1]
```"
844,Write a python function to find the kth element in an array containing odd elements first and then even elements.,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; ","```python
def kth_element(arr, k):
    odd = [x for x in arr if x % 2 != 0]
    even = [x for x in arr if x % 2 == 0]
    merged = odd + even
    return merged[k-1] if k <= len(merged) else None
```"
845,Write a python function to count the number of digits in factorial of a given number.,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ","```python
import math

def count_digits_in_factorial(n):
    if n < 0:
        raise ValueError(""Input must be a non-negative integer."")
    elif n == 0 or n == 1:
        return 1
    else:
        factorial = math.factorial(n)
        return len(str(factorial))
```"
846,Write a function to find the minimum number of platforms required for a railway/bus station.,"def find_platform(arr, dep, n): 
    arr.sort() 
    dep.sort() 
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n): 
        if (arr[i] <= dep[j]):           
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):           
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):  
            result = plat_needed           
    return result","```python
def min_platforms(arrival, departure):
    arrival.sort()
    departure.sort()
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    
    while i < len(arrival) and j < len(departure):
        if arrival[i] <= departure[j]:
            plat_needed += 1
            i += 1
            
            if plat_needed > result:
                result = plat_needed
        else:
            plat_needed -= 1
            j += 1
            
    return result
```"
847,Write a python function to copy a list from a singleton tuple.,"def lcopy(xs):
  return xs[:]
","```python
def copy_list_from_singleton_tuple(tuple):
    if len(tuple) == 1:
        return list(tuple[0])
    else:
        raise ValueError(""Input tuple is not a singleton"")
```"
848,Write a function to find the area of a trapezium.,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area","```python
def trapezium_area(base1, base2, height):
    if base1 <= 0 or base2 <= 0 or height <= 0:
        raise ValueError(""All inputs must be positive"")
    return (base1 + base2) / 2 * height
```"
849,Write a python function to find sum of all prime divisors of a given number.,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ","```python
def sum_of_prime_divisors(n):
    def is_prime(x):
        if x < 2:
            return False
        for i in range(2, int(x**0.5) + 1):
            if x % i == 0:
                return False
        return True

    divisors = set()
    for i in range(2, n + 1):
        while n % i == 0:
            divisors.add(i)
            n //= i
    return sum(filter(is_prime, divisors))
```"
850,Write a function to check if a triangle of positive area is possible with the given angles.,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False","```python
def is_triangle_possible(angle1: float, angle2: float) -> bool:
    """"""
    Checks if a triangle of positive area is possible with the given angles.

    Args:
        angle1 (float): The first angle.
        angle2 (float): The second angle.

    Returns:
        bool: True if a triangle of positive area is possible, False otherwise.
    """"""

def is_triangle_possible(angle1: float, angle2: float) -> bool:
    return 0 < angle1 + angle2 < 180
```"
851,Write a python function to find sum of inverse of divisors.,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ","```python
def sum_of_inverse_divisors(n):
    def get_divisors(num):
        divisors = set()
        for i in range(1, int(num**0.5) + 1):
            if num % i == 0:
                divisors.add(i)
                divisors.add(num // i)
        return divisors

    sum_of_inverses = sum(1 / divisor for divisor in get_divisors(n))
    return sum_of_inverses
```"
852,Write a python function to remove negative numbers from a list.,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list","```python
def remove_negative_numbers(num_list):
    return [num for num in num_list if num >= 0]
```

Or using filter() function:

```python
def remove_negative_numbers(num_list):
    return list(filter(lambda x: x >= 0, num_list))
```"
853,Write a python function to find sum of odd factors of a number.,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ","```python
def sum_of_odd_factors(n):
    def get_factors(num):
        factors = set()
        for i in range(1, int(num**0.5) + 1):
            if num % i == 0:
                factors.add(i)
                factors.add(num // i)
        return factors

    odd_factors = [factor for factor in get_factors(n) if factor % 2 != 0]
    return sum(odd_factors)
```"
854,Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap","```python
import heapq

def convert_to_heap(input_list):
    input_list[:] = [heapq.heapify(input_list) for _ in range(1)][0]
    return input_list
```"
855,Write a python function to check for even parity of a given number.,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False","```python
def check_parity(num):
    count = bin(num).count('1')
    if count % 2 == 0:
        return 'even'
    else:
        return 'odd'
```"
856,Write a python function to find minimum adjacent swaps required to sort binary array.,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ","```python
def min_swaps_to_sort(arr):
    n = len(arr)
    arr_pos = [*enumerate(arr)]
    
    arr_pos.sort(key=lambda it:it[1])
    
    vis = {k:False for k in range(n)}
    ans = 0
    
    for i in range(n):
        if vis[i] or arr_pos[i][0] == i:
            continue
        
        cycle_size = 0
        j = i
        
        while not vis[j]:
            vis[j] = True
            
            j = arr_pos[j][0]
            cycle_size += 1
        
        if cycle_size > 0:
            ans += (cycle_size - 1)
    
    return ans
```"
857,Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","```python
def list_strings_individually(strings):
    def process_string(s):
        return [char for char in s]
    
    return list(map(process_string, strings))
```"
858,Write a function to count number of lists in a given list of lists and square the count.,"def count_list(input_list): 
    return (len(input_list))**2","```python
def count_and_square(lst):
    count = 0
    for item in lst:
        if isinstance(item, list):
            count += 1
    return count ** 2
```"
859,Write a function to generate all sublists of a given list.,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs","```python
def generate_sublists(input_list):
    sublists = [[]]
    for element in input_list:
        sublists.extend([current + [element] for current in sublists])
    return sublists
```"
860,Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ","```python
import re

def check_alphanumeric_end(string):
    pattern = r'^\w*\W*[a-zA-Z0-9]+$'
    if re.match(pattern, string):
        return True
    else:
        return False
```

or

```python
import re

def check_alphanumeric_end(string):
    pattern = r'\w$'
    if re.search(pattern, string):
        return True
    else:
        return False
```"
861,Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result","```python
from functools import reduce

def find_anagrams(target_string, string_list):
    target_sorted = sorted(target_string)
    anagram_filter = lambda string: sorted(string) == target_sorted
    return list(filter(anagram_filter, string_list))
```"
862,Write a function to find the occurrences of n most common words in a given text.,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)","```python
from collections import Counter
import re
from nltk.corpus import stopwords
from string import punctuation

def most_common_words(text, n):
    stop_words = set(stopwords.words('english') + list(punctuation))
    words = re.findall(r'\b\w+\b', text.lower())
    words = [word for word in words if word not in stop_words]
    return Counter(words).most_common(n)
```"
863,Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ","```python
def findLongestConsecutiveSubsequence(arr):
    arr_set = set(arr)
    longest_subseq_len = 0
    
    for num in arr_set:
        if num - 1 not in arr_set:
            current_num = num
            current_subseq_len = 1
            
            while current_num + 1 in arr_set:
                current_num += 1
                current_subseq_len += 1
                
            longest_subseq_len = max(longest_subseq_len, current_subseq_len)
            
    return longest_subseq_len
```"
864,Write a function to find palindromes in a given list of strings using lambda function.,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result","```python
palindrome_finder = lambda strings: list(filter(lambda string: string == string[::-1], strings))
```"
865,Write a function to print n-times a list using map function.,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)","```python
def print_list_n_times(lst, n):
    def repeat_list(x):
        return [x] * n
    
    list(map(repeat_list, lst))
```"
866,Write a function to check whether the given month name contains 31 days or not.,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False","```python
def has_31_days(month_name):
    month_name = month_name.lower()
    months_with_31_days = ['january', 'march', 'may', 'july', 'august', 'october', 'december']
    return month_name in months_with_31_days
```"
867,Write a python function to add a minimum number such that the sum of array becomes even.,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2","```python
def add_min_num(arr):
    total = sum(arr)
    if total % 2 != 0:
        arr.append(1)
    return arr
```"
868,Write a python function to find the length of the last word in a given string.,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ","```python
def length_of_last_word(s: str) -> int:
    words = s.split()
    if len(words) == 0:
        return 0
    else:
        return len(words[-1])
```"
869,"Write a function to remove sublists from a given list of lists, which are outside a given range.","def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result","```python
def remove_sublists_outside_range(list_of_lists, min_value, max_value):
    return [sublist for sublist in list_of_lists if all(min_value <= value <= max_value for value in sublist)]
```

This function uses a list comprehension to filter out the sublists that contain values outside of the specified range."
870,Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)","```python
sum_positive_numbers = lambda numbers: sum(num for num in numbers if num > 0)
```"
871,Write a python function to check whether the given strings are rotations of each other or not.,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False","```python
def are_rotations(str1, str2):
    if len(str1) != len(str2):
        return False
    return str2 in str1 + str1
```"
872,Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ","```python
def is_nested_subset(nested_list1, nested_list2):
    def flatten(nested_list):
        flat_list = []
        for element in nested_list:
            if isinstance(element, list):
                flat_list.extend(flatten(element))
            else:
                flat_list.append(element)
        return set(flat_list)

    return flatten(nested_list1).issubset(flatten(nested_list2))
```"
873,Write a function to solve the fibonacci sequence using recursion.,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))","```python
def fibonacci(n):
    if n <= 0:
        return ""Input should be a positive integer""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
```

Alternatively, to improve the performance of this function by avoiding redundant calculations, you can use memoization:

```python
def fibonacci(n, memo={}):
    if n <= 0:
        return ""Input should be a positive integer""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    elif n not in memo:
        memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]
```"
874,Write a python function to check if the string is a concatenation of another string.,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True","```python
def is_concatenation(s1, s2):
    if len(s1) != len(s2):
        return False
    for i in range(len(s1)):
        if s1[i:] + s1[:i] == s2:
            return True
    return False
```"
875,Write a function to find the minimum difference in the tuple pairs of given tuples.,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ","```python
def min_difference(tuple_pairs):
    return min(abs(x - y) for x, y in tuple_pairs)
```"
876,Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","```python
def find_lcm(num1, num2):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    lcm = (num1 * num2) // gcd(num1, num2)
    return lcm
```

Note: I have followed your exact instructions and written the code as specified. However, for the sake of clarity and good coding practices, it's worth noting that the above function can be simplified using the `math.gcd()` function from Python's standard library, which would make the code even more concise."
877,Write a python function to sort the given string.,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) ","```python
def sort_string(s):
    return ''.join(sorted(s))
```"
878,Write a function to check if the given tuple contains only k elements.,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ","```python
def check_tuple_elements(tup, k):
    if len(tup) == k:
        return True
    else:
        return False
```"
879,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.","import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","```python
import re

def match_string(s):
    pattern = r'a.*b'
    if re.match(pattern, s):
        return True
    else:
        return False
```"
880,Write a python function to find number of solutions in quadratic equation.,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") ","```python
def count_solutions(a, b, c):
    d = (b**2) - (4*a*c)
    if d > 0:
        return 2
    elif d == 0:
        return 1
    else:
        return 0
```"
881,Write a function to find the sum of first even and odd number of a given list.,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)","```python
def sum_of_first_even_odd(numbers):
    even_numbers = [num for num in numbers if num % 2 == 0]
    odd_numbers = [num for num in numbers if num % 2 != 0]

    sum_even = sum(even_numbers[:len(odd_numbers)])
    sum_odd = sum(odd_numbers)

    return sum_even + sum_odd
```"
882,Write a function to caluclate perimeter of a parallelogram.,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter","```python
def calculate_parallelogram_perimeter(a, b):
    if a <= 0 or b <= 0:
        raise ValueError(""Both sides of parallelogram must be greater than zero"")
    return 2 * (a + b)
```"
883,Write a function to find numbers divisible by m and n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result","```python
def find_divisible_numbers(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))
```"
884,Write a python function to check whether all the bits are within a given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False","```python
def check_bits_in_range(n, lower, upper):
    num_str = bin(n)[2:]
    for i in range(len(num_str)):
        if int(num_str[i]) < lower or int(num_str[i]) > upper:
            return False
    return True
```

Alternatively, you can use the following code to achieve the same result:

```python
def check_bits_in_range(n, lower, upper):
    while n:
        bit = n & 1
        if bit < lower or bit > upper:
            return False
        n >>= 1
    return True
```

Both functions take three parameters: `n` (the number to be checked), `lower` (the lower bound of the range), and `upper` (the upper bound of the range). They return a boolean value indicating whether all bits in `n` are within the given range."
885,Write a python function to check whether the two given strings are isomorphic to each other or not.,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False","```python
def is_isomorphic(s1, s2):
    if len(s1) != len(s2):
        return False
    
    mapping_s1_to_s2 = {}
    mapping_s2_to_s1 = {}
    
    for char1, char2 in zip(s1, s2):
        if (char1 not in mapping_s1_to_s2 and char2 not in mapping_s2_to_s1) or \
           (mapping_s1_to_s2.get(char1) == char2 and mapping_s2_to_s1.get(char2) == char1):
            mapping_s1_to_s2[char1] = char2
            mapping_s2_to_s1[char2] = char1
        else:
            return False
    
    return True
```"
886,Write a function to add all the numbers in a list and divide it with the length of the list.,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ","```python
def calculate_average(numbers):
    if len(numbers) == 0:
        return 0
    total_sum = sum(numbers)
    average = total_sum / len(numbers)
    return average
```"
887,Write a python function to check whether the given number is odd or not using bitwise operator.,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ","```python
def is_odd(n):
    return n & 1 == 1
```"
888,Write a function to substract the elements of the given nested tuples.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","```python
def subtract_nested_tuples(tuples):
    if len(tuples) < 2:
        raise ValueError(""At least two tuples are required"")
    
    result = list(tuples[0])
    
    for i in range(1, len(tuples)):
        tuple_length = min(len(result), len(tuples[i]))
        
        for j in range(tuple_length):
            if isinstance(result[j], (tuple, list)) and isinstance(tuples[i][j], (tuple, list)):
                result[j] = subtract_nested_tuples([result[j], tuples[i][j]])
            elif isinstance(result[j], (int, float)) and isinstance(tuples[i][j], (int, float)):
                result[j] -= tuples[i][j]
        
        if len(result) < len(tuples[i]):
            result += list(tuples[i])[tuple_length:]
    
    return tuple(result)
```"
889,Write a function to reverse each list in a given list of lists.,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ","```python
def reverse_lists(list_of_lists):
    return [list(reversed(sublist)) for sublist in list_of_lists]
```"
890,Write a python function to find the index of an extra element present in one sorted array.,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ","```python
def find_extra_element(arr1, arr2):
    i = j = 0
    while i < len(arr1) and j < len(arr2):
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
        elif arr1[i] < arr2[j]:
            return arr1[i]
        else:
            return arr2[j]
    if i < len(arr1):
        return arr1[i]
    return arr2[j]
```"
891,Write a python function to check whether the given two numbers have same number of digits or not.,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ","```python
def check_digit_count(num1, num2):
    return len(str(abs(num1))) == len(str(abs(num2)))
```"
892,Write a function to remove multiple spaces in a string.,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))","```python
import re

def remove_multiple_spaces(input_string):
    return re.sub(' +', ' ', input_string).strip()
```"
893,Write a python function to get the last element of each sublist.,"def Extract(lst): 
    return [item[-1] for item in lst] ","```python
def get_last_elements(sublists):
    return [sublist[-1] for sublist in sublists]
```"
894,Write a function to convert the given string of float type into tuple.,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ","```python
def string_to_tuple(input_string):
    try:
        float_value = tuple(map(float, input_string.split(',')))
        if len(float_value) > 1:
            return float_value
        else:
            raise ValueError
    except ValueError as e:
        return f""Error: {e}""
`` except Exception as e:
        return f""An error occurred: {e}""
```"
895,Write a function to find the maximum sum of subsequences of given array with no adjacent elements.,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]","```python
def max_sum_no_adjacent(arr):
    if len(arr) <= 2:
        return max(0, max(arr))
    dp = [0]*len(arr)
    dp[0] = arr[0]
    dp[1] = max(dp[0], arr[1])
    for i in range(2, len(arr)):
        dp[i] = max(dp[i-1], dp[i-2] + arr[i])
    return dp[-1]
```"
896,Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)","```python
def sort_by_last_element(tuple_list):
    return sorted(tuple_list, key=lambda x: x[-1])
```"
897,Write a python function to check whether the word is present in a given sentence or not.,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False","```python
def check_word_in_sentence(sentence, word):
    words = sentence.split()
    return word.lower() in [w.lower() for w in words]
```"
898,"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result","```python
def extract_continuous_elements(input_list, num_elements):
    if len(input_list) < num_elements:
        raise ValueError(""Input list is too short"")
    
    result = []
    current_sequence = [input_list[0]]
    
    for i in range(1, len(input_list)):
        if input_list[i] - input_list[i-1] == 1:
            current_sequence.append(input_list[i])
        else:
            if len(current_sequence) >= num_elements:
                result.extend(current_sequence[:num_elements])
            current_sequence = [input_list[i]]
    
    if len(current_sequence) >= num_elements and (not result or current_sequence[0] > result[-1]):
        result.extend(current_sequence[:num_elements])
    
    return result
```"
899,Write a python function to check whether an array can be sorted or not by picking only the corner elements.,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True","```python
def can_sort_corner_elements(arr):
    n = len(arr)
    i = 0
    while i < n - 1:
        if arr[i] > arr[n - i - 1]:
            arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]
            return False
        elif arr[i] == arr[n - i - 1]:
            if all(arr[j] <= arr[j + 1] for j in range(i, n // 2)):
                return True
            else:
                return False
        i += 1
    return True
```"
900,Write a function where a string will start with a specific number.,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False","```python
def start_with_number(n, s):
    if isinstance(n, int) and n > 0:
        return str(n) + s
    raise ValueError(""Input number must be a positive integer"")
```"
901,Write a function to find the smallest multiple of the first n numbers.,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i","```python
import math

def smallest_multiple(n):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    def lcm(a, b):
        return a * b // gcd(a, b)

    result = 1
    for i in range(2, n + 1):
        result = lcm(result, i)
    return result
```"
902,Write a function to combine two dictionaries by adding values for common keys.,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict","```python
def combine_dicts(dict1, dict2):
    combined_dict = {}
    for key in set(list(dict1.keys()) + list(dict2.keys())):
        if key in dict1 and key in dict2:
            combined_dict[key] = dict1[key] + dict2[key]
        elif key in dict1:
            combined_dict[key] = dict1[key]
        else:
            combined_dict[key] = dict2[key]
    return combined_dict
```"
903,Write a python function to count the total unset bits from 1 to n.,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ","```python
def count_unset_bits(n):
    def count_set_bits(num):
        count = 0
        while num:
            count += num & 1
            num >>= 1
        return count

    total_set_bits = sum(count_set_bits(i) for i in range(1, n + 1))
    max_possible_set_bits = n * len(bin(n)) - 2*n
    return max_possible_set_bits - total_set_bits
```"
904,Write a function to return true if the given number is even else return false.,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False","```python
def is_even(n):
    return n % 2 == 0
```"
905,Write a python function to find the sum of squares of binomial co-efficients.,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ","```python
import math

def sum_of_squares_binomial_coefficients(n):
    total_sum = 0
    for k in range(1, n + 1):
        binom_coef = math.comb(n, k)
        square = binom_coef ** 2
        total_sum += square
    return total_sum
```"
906,"Write a function to extract year, month and date from a url by using regex.","import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)","```python
import re
from datetime import datetime

def extract_date_from_url(url):
    pattern = r'\b\d{4}/\d{1,2}/\d{1,2}\b'
    match = re.search(pattern, url)
    if match:
        return datetime.strptime(match.group(), '%Y/%m/%d')
    else:
        raise ValueError('No date found in the URL')

def extract_year_month_date(url):
    date = extract_date_from_url(url)
    return date.year, date.month, date.day
```"
907,Write a function to print the first n lucky numbers.,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]","```python
def generate_lucky_numbers(n):
    lucky_numbers = []
    i = 1
    while len(lucky_numbers) < n:
        if all(i % x != 0 for x in range(2, int(i**0.5) + 1)):
            lucky_numbers.append(i)
        i += 1
    return lucky_numbers
```"
908,Write a function to find the fixed point in the given array.,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1","```python
def find_fixed_point(arr):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        
        if arr[mid] == mid:
            return mid
        elif arr[mid] < mid:
            low = mid + 1
        else:
            high = mid - 1
            
    return None
```"
909,Write a function to find the previous palindrome of a specified number.,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x","```python
def is_palindrome(n):
    return str(n) == str(n)[::-1]

def previous_palindrome(n):
    n -= 1
    while not is_palindrome(n):
        n -= 1
    return n
```"
910,Write a function to validate a gregorian date.,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False","```python
def is_gregorian_date(year: int, month: int, day: int) -> bool:
    if year < 1:
        return False
    if not (1 <= month <= 12):
        return False
    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        days_in_month[2] = 29
    return 1 <= day <= days_in_month[month]
```"
911,Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])","```python
import heapq

def max_product_of_three(nums):
    three_largest = heapq.nlargest(3, nums)
    two_smallest = heapq.nsmallest(2, nums)
    
    return max(three_largest[0] * three_largest[1] * three_largest[2],
               three_largest[0] * two_smallest[0] * two_smallest[1])
```"
912,"Write a function to find ln, m lobb number.","def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))","```python
import math

def lobachevsky(n):
    if n < 0:
        raise ValueError(""Input must be a non-negative integer"")
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                while n % i == 0:
                    n //= i
                result *= (i - 1)
        if n > 1:
            result *= (n - 1)
        return result

def prime_factors(n):
    factors = {}
    for p in range(2, int(math.sqrt(n)) + 1):
        while n % p == 0:
            factors[p] = factors.get(p, 0) + 1
            n //= p
    if n > 1:
        factors[n] = factors.get(n, 0) + 1
    return factors

def mobius(n):
    factors = prime_factors(n)
    result = 1
    for count in factors.values():
        if count > 1:
            return 0
        else:
            result *= -1
    return result
```"
913,Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","```python
import re

def check_number_at_end(input_string):
    pattern = r'\d$'
    if re.search(pattern, input_string):
        return True
    else:
        return False
```"
914,Write a python function to check whether the given string is made up of two alternating characters or not.,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True","```python
def has_alternating_characters(s):
    if len(set(s)) != 2:
        return False
    
    for i in range(len(s) - 3):
        if s[i] == s[i+1] or s[i] == s[i+2]:
            return False
            
    return True
```"
915,Write a function to rearrange positive and negative numbers in a given array using lambda function.,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ","```python
def rearrange_numbers(arr):
    pos = list(filter(lambda x: x > 0, arr))
    neg = list(filter(lambda x: x < 0, arr))
    return neg + pos
```"
916,Write a function to find if there is a triplet in the array whose sum is equal to a given value.,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False","```python
def find_triplet(arr, target_sum):
    arr.sort()
    for i in range(len(arr) - 2):
        left = i + 1
        right = len(arr) - 1
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == target_sum:
                return True
            elif current_sum < target_sum:
                left += 1
            else:
                right -= 1
    return False
```"
917,Write a function to find the sequences of one upper case letter followed by lower case letters.,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')","```python
import re

def find_sequences(text):
    pattern = r'[A-Z][a-z]+'
    matches = re.findall(pattern, text)
    return matches
```"
918,Write a function to count coin change.,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] ","```python
def count_change(coins, amount):
    dp = [0] * (amount + 1)
    dp[0] = 1
    
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] += dp[i - coin]
    
    return dp[amount]
```"
919,Write a python function to multiply all items in the list.,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot","```python
def multiply_all_items(lst):
    result = 1
    for item in lst:
        if isinstance(item, (int, float)):
            result *= item
    return result
```"
920,Write a function to remove all tuples with all none values in the given tuple list.,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ","```python
def remove_none_tuples(tuple_list):
    return [t for t in tuple_list if any(t)]
```"
921,Write a function to perform chunking of tuples each of size n.,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ","```python
def chunk_tuples(tuples_list, n):
    return [tuples_list[i:i+n] for i in range(0, len(tuples_list), n)]
```

You can use this function by passing a list of tuples and the desired chunk size as arguments, like `chunk_tuples([(1, 2), (3, 4), (5, 6)], 2)`."
922,Write a function to find a pair with the highest product from a given array of integers.,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ","```python
def max_product_pair(arr):
    if len(arr) < 2:
        raise ValueError(""Array must have at least two elements"")
    
    arr.sort(reverse=True)
    
    max1 = arr[0] * arr[1]
    max2 = arr[-1] * arr[-2]
    
    return max(max1, max2)
```"
923,Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))","```python
def shortest_common_supersequence(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    return m + n - dp[m][n]
```"
924,Write a function to find maximum of two numbers.,"def max_of_two( x, y ):
    if x > y:
        return x
    return y","```python
def find_max(a, b):
    if a >= b:
        return a
    else:
        return b
```"
925,Write a python function to calculate the product of all the numbers of a given tuple.,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product","```python
def calculate_product(tuple_numbers):
    product = 1
    for number in tuple_numbers:
        product *= number
    return product
```"
926,Write a function to find n-th rencontres number.,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))","```python
def find_nth_rencontres_number(n):
    if n < 1:
        raise ValueError(""Input must be a positive integer"")
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        result = [0, 1]
        for i in range(2, n + 1):
            new_value = (i - 1) * (result[i - 1] + result[i - 2])
            result.append(new_value)
        return result[n]
```"
927,Write a function to calculate the height of the given binary tree.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1","```python
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def calculate_height(node):
    if node is None:
        return 0
    else:
        left_height = calculate_height(node.left)
        right_height = calculate_height(node.right)
        return max(left_height, right_height) + 1
```"
928,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)","```python
def convert_date_format(date_str):
    year, month, day = date_str.split('-')
    return f'{day}-{month}-{year}'
```"
929,Write a function to count repeated items of a tuple.,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count","```python
def count_repeated_items(tup):
    repeated_count = 0
    unique_set = set()
    for item in tup:
        if item not in unique_set:
            if tup.count(item) > 1:
                repeated_count += 1
            unique_set.add(item)
    return repeated_count
```"
930,Write a function that matches a string that has an a followed by zero or more b's by using regex.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')","```python
import re

def match_string(s):
    pattern = r'a(b*)'
    match = re.fullmatch(pattern, s)
    if match:
        return True
    return False
```"
931,Write a function to calculate the sum of series 1³+2³+3³+….+n³.,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total","```python
def sum_of_cubes(n):
    return sum(i**3 for i in range(1, n+1))
```"
932,Write a function to remove duplicate words from a given list of strings.,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp","```python
def remove_duplicate_words(word_list):
    seen = set()
    return [word for word in word_list if not (word.lower() in seen or seen.add(word.lower()))]
```"
933,Write a function to convert camel case string to snake case string by using regex.,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","```python
import re

def camel_to_snake(camel_case_str):
    snake_case_str = re.sub(r'([A-Z])', r'_\1', camel_case_str).lower()
    return snake_case_str
```"
934,Write a function to find the nth delannoy number.,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)","```python
def delannoy(n):
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    
    if n == 0:
        return 1
    
    d = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    d[0][0] = 1
    d[1][0] = 1
    d[0][1] = 1

    for i in range(2, n + 1):
        d[i][0] = 1
        for j in range(1, i + 1):
            d[i][j] = d[i - 1][j] + d[i][j - 1] + d[i - 1][j - 1]
    
    return d[n][n]
```"
935,Write a function to calculate the sum of series 1²+2²+3²+….+n².,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total","```python
def sum_of_squares(n):
    return n*(n+1)*(2*n+1)//6
```"
936,Write a function to re-arrange the given tuples based on the given ordered list.,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ","```python
def reorder_tuples(tuples_list, ordered_list):
    result = [None] * len(ordered_list)
    for i, element in enumerate(ordered_list):
        for t in tuples_list:
            if t[1] == element:
                result[i] = t
                break
    return tuple(result)
```"
937,Write a function to count the most common character in a given string.,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char","```python
def most_common_char_count(s):
    if not s:
        return 0
    
    char_freq = {}
    
    for char in s.lower():
        if char.isalnum():
            char_freq[char] = char_freq.get(char, 0) + 1
            
    max_count = max(char_freq.values())
    
    return max_count
```"
938,Write a function to find three closest elements from three sorted arrays.,"import sys 

def find_closet(A, B, C, p, q, r): 
	diff = sys.maxsize 
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r): 
		minimum = min(A[i], min(B[j], C[k])) 
		maximum = max(A[i], max(B[j], C[k])); 
		if maximum-minimum < diff: 
			res_i = i 
			res_j = j 
			res_k = k 
			diff = maximum - minimum; 
		if diff == 0: 
			break
		if A[i] == minimum: 
			i = i+1
		elif B[j] == minimum: 
			j = j+1
		else: 
			k = k+1
	return A[res_i],B[res_j],C[res_k]","```python
import heapq

def find_three_closest_elements(arr1, arr2, arr3):
    min_heap = []
    push_to_heap(min_heap, 0, 0, arr1)
    push_to_heap(min_heap, 0, 0, arr2)
    push_to_heap(min_heap, 0, 0, arr3)

    closest_elements = set()
    while len(closest_elements) < 3:
        diff, i, j, array = heapq.heappop(min_heap)
        if array is arr1:
            closest_elements.add(arr1[i])
            if i + 1 < len(arr1):
                push_to_heap(min_heap, abs(arr1[i+1] - arr2[j]), i+1, j, arr1)
        elif array is arr2:
            closest_elements.add(arr2[j])
            if j + 1 < len(arr2):
                push_to_heap(min_heap, abs(arr2[j+1] - arr3[i]), i, j+1, arr2)
        else:
            closest_elements.add(arr3[i])
            if i + 1 < len(arr3):
                push_to_heap(min_heap, abs(arr3[i+1] - arr1[j]), i+1, j, arr3)

    return list(closest_elements)


def push_to_heap(heap, diff, i, j, array):
    heapq.heappush(heap, (diff, i, j, array))
```"
939,Write a function to sort a list of dictionaries using lambda function.,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models","```python
def sort_dict_list(dict_list, key):
    return sorted(dict_list, key=lambda x: x[key])
```"
940,Write a function to sort the given array by using heap sort.,"def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
","```python
def heap_sort(arr):
    def heapify(arr, n, i):
        largest = i
        left = 2 * i + 1
        right = 2 * i + 2

        if left < n and arr[i] < arr[left]:
            largest = left

        if right < n and arr[largest] < arr[right]:
            largest = right

        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)

    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    return arr
```"
941,Write a function to count the elements in a list until an element is a tuple.,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim","```python
def count_until_tuple(lst):
    count = 0
    for elem in lst:
        if isinstance(elem, tuple):
            break
        count += 1
    return count
```"
942,Write a function to check if any list element is present in the given list.,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ","```python
def check_element(lst, target):
    return target in lst
```

Alternatively, here is a more general function that allows for partial matching:

```python
def check_partial_match(lst, target, match_func=None):
    if match_func is None:
        match_func = lambda x, y: x == y
    return any(match_func(target, elem) for elem in lst)
```

However, the original problem statement asked only for exact matches."
943,Write a function to combine two given sorted lists using heapq module.,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists","```python
import heapq

def combine_sorted_lists(list1, list2):
    return list(heapq.merge(list1, list2))
```

This function will merge two sorted lists into a single sorted list using a heap queue algorithm provided by the `heapq` module. It takes advantage of Python's built-in generator expressions to create an iterator that yields values from both input iterables in ascending order without requiring extra storage space for intermediate results."
944,Write a function to separate and print the numbers and their position of a given string.,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()","```python
def separate_and_print_numbers(s):
    numbers = [(int(digit), index) for index, char in enumerate(s) if (digit := char.isdigit())]
    return {digit: pos for digit, pos in sorted(numbers)}
```"
945,Write a function to convert the given tuples into set.,"def tuple_to_set(t):
  s = set(t)
  return (s) ","```python
def convert_tuple_to_set(tuples):
    result = set()
    for tup in tuples:
        result.update(tup)
    return result
```"
946,Write a function to find the most common elements and their counts of a specified text.,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem","```python
from collections import Counter
import re

def most_common_elements(text):
    words = re.findall(r'\b\w+\b', text.lower())
    common_words = Counter(words).most_common()
    return dict(common_words)
```"
947,Write a python function to find the length of the shortest word.,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min","```python
def find_short(s):
    words = s.split()
    if len(words) == 0:
        return 0
    shortest_length = min(len(word) for word in words)
    return shortest_length
```"
948,Write a function to get an item of a tuple.,"def get_item(tup1,index):
  item = tup1[index]
  return item","```python
def get_tuple_item(tup, index):
    if isinstance(tup, tuple) and isinstance(index, int):
        if 0 <= index < len(tup):
            return tup[index]
    raise ValueError(""Invalid input"")
```"
949,Write a function to sort the given tuple list basis the total digits in tuple.,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))","```python
def sort_tuple_list(tuple_list):
    return sorted(tuple_list, key=lambda x: sum(len(str(i)) for i in x))
```"
950,Write a function to display sign of the chinese zodiac for given year.,"def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign","```python
def chinese_zodiac_sign(year):
    signs = [""Monkey"", ""Rooster"", ""Dog"", ""Pig"", ""Rat"", ""Ox"", ""Tiger"", ""Rabbit"", ""Dragon"", ""Snake"", ""Horse"", ""Sheep""]
    return signs[year % 12]
```"
951,Write a function to find the maximum of similar indices in two lists of tuples.,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ","```python
def max_similar_indices(list1, list2):
    if len(list1) != len(list2):
        raise ValueError(""Lists must be of equal length"")
    
    result = []
    for i in range(len(list1)):
        max_value = float('-inf')
        for j in range(len(list1[i])):
            try:
                max_value = max(max_value, list1[i][j], list2[i][j])
            except IndexError:
                pass
        result.append(max_value)
    
    return tuple(result)
```"
952,Write a function to compute the value of ncr mod p.,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ","```python
def power(x, y, p):
    res = 1
    x = x % p
    while y > 0:
        if y & 1:
            res = (res * x) % p
        y = y >> 1
        x = (x * x) % p
    return res

def modInverse(n, p):
    return power(n, p - 2, p)

def nCrModPFermat(n, r, p):
    if n < r:
        return 0
    if r == 0:
        return 1
    fac = [1] * (n + 1)
    for i in range(1, n + 1):
        fac[i] = (fac[i - 1] * i) % p
    return ((fac[n] * modInverse(fac[r], p)) % p * modInverse(fac[n - r], p)) % p

def compute_ncr_mod_p(n, r, p):
    return nCrModPFermat(n, r, p)
```"
953,Write a python function to find the minimun number of subsets with distinct elements.,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ","```python
def min_subsets_with_distinct_elements(arr):
    arr.sort()
    count = 1
    curr_min = arr[0]
    for num in arr:
        if num > curr_min:
            count += 1
            curr_min = num
    return count
```"
954,Write a function that gives profit amount if the given amount has profit else return none.,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None","```python
def calculate_profit(amount, cost_price):
    if amount > cost_price:
        return amount - cost_price
    else:
        return None
```"
955,"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","```python
def is_abundant(n):
    if n < 1:
        return False
    sum_divisors = sum(i for i in range(1, n) if n % i == 0)
    return sum_divisors > n
```"
956,Write a function to split the given string at uppercase letters by using regex.,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))","```python
import re

def split_at_uppercase(input_string):
    return re.sub('([A-Z])', r' \1', input_string).split()
```"
957,Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","```python
def get_rightmost_set_bit(n):
    if n == 0:
        return -1
    pos = 0
    while (n & 1) == 0:
        pos += 1
        n >>= 1
    return pos + 1
```"
958,Write a function to convert an integer into a roman numeral.,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num","```python
def int_to_roman(num):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    syb = [
        ""M"", ""CM"", ""D"", ""CD"",
        ""C"", ""XC"", ""L"", ""XL"",
        ""X"", ""IX"", ""V"", ""IV"",
        ""I""
        ]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1
    return roman_num
```"
959,Write a python function to find the average of a list.,"def Average(lst): 
    return sum(lst) / len(lst) ","```python
def find_average(lst):
    if not lst:
        raise ValueError(""Input list is empty"")
    try:
        return sum(lst) / len(lst)
    except TypeError:
        raise ValueError(""Input list contains non-numeric values"")
```"
960,Write a function to solve tiling problem.,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);","```python
def solve_tiling(n, m):
    if n % 2 == 0:
        return (n * m) // 2
    elif m % 2 == 0:
        return (m * n) // 2
    else:
        return ((n * m) - 1) // 2 + 1

def tiling(n, m):
    dp = [[-1]*(m+1) for _ in range(n+1)]
    
    def solve(i, j):
        if i < 0 or j < 0:
            return 0
        elif j == 0 and i >= 2:
            return 1 << (i - 2)
        elif dp[i][j] != -1:
            return dp[i][j]
        
        ans = 0
        if i > 0:
            ans += solve(i-1, j)
        if j > 0:
            ans += solve(i, j-1)
        if i >= 2 and j >= 1:
            ans += solve(i-2, j-1)
        
        dp[i][j] = ans
        return ans
    
    return solve(n, m)

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def is_perfect_square(x):
    s = int(x ** 0.5)
    return s * s == x

def solve_tiling_problem():
    n, m = map(int, input().split())
    count1 = solve_tiling(n, m)
    
    total_count = tiling(n, m)
    count2 = is_prime(total_count - count1) and 1 or 0
    
    if is_perfect_square(count1 + count2):
        return ""Impossible""
    else:
        return ""Possible""
```"
961,Write a function to convert a roman numeral to an integer.,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val","```python
def roman_to_int(s):
    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    int_val = 0
    for i in range(len(s)):
        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
        else:
            int_val += rom_val[s[i]]
    return int_val
```"
962,Write a python function to find the sum of all even natural numbers within the range l and r.,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ","```python
def sum_even_numbers(l, r):
    return sum(range(l + (l % 2), r + 1, 2))
```"
963,Write a function to calculate the discriminant value.,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)","```python
def calculate_discriminant(a, b, c):
    return b**2 - 4*a*c
```

or 

```python
import math
def calculate_discriminant(a, b, c):
    return pow(b, 2) - 4 * a * c
```"
964,Write a python function to check whether the length of the word is even or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False","```python
def check_word_length(word):
    if len(word) % 2 == 0:
        return True
    else:
        return False
```

Alternatively, you can simplify the above function as follows:

```python
def check_word_length(word):
    return len(word) % 2 == 0
```"
965,Write a function to convert camel case string to snake case string.,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","```python
def camel_to_snake(camel_case_str):
    snake_case_str = ''
    for char in camel_case_str:
        if char.isupper():
            snake_case_str += '_' + char.lower()
        else:
            snake_case_str += char
    return snake_case_str
```"
966,Write a function to remove an empty tuple from a list of tuples.,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1","```python
def remove_empty_tuples(tuples_list):
    """"""
    Removes empty tuples from a given list of tuples.

    Args:
        tuples_list (list): A list containing tuples.

    Returns:
        list: The input list with empty tuples removed.
    """"""
    return [t for t in tuples_list if len(t) > 0]
```"
967,Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ","```python
def check_string_for_vowels(input_str):
    vowels = 'aeiou'
    for vowel in vowels:
        if vowel not in input_str.lower():
            return False
    return True
```"
968,Write a python function to find maximum possible value for the given periodic function.,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B","```python
import numpy as np

def find_max_value(periodic_function, interval, num_points=1000):
    x_values = np.linspace(interval[0], interval[1], num_points)
    y_values = periodic_function(x_values)
    return np.max(y_values)

# Define your periodic function here (for example)
def my_periodic_function(x):
    return np.sin(2 * np.pi * x) + 0.5 * np.cos(4 * np.pi * x)

max_value = find_max_value(my_periodic_function, [0, 1])
```"
969,Write a function to join the tuples if they have similar initial elements.,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ","```python
def join_tuples(tuples_list):
    joined = {}
    for t in tuples_list:
        key = t[0]
        if key in joined:
            joined[key] += (t[1:],)
        else:
            joined[key] = (t[1:],)
    return [(key, *t) for key, values in joined.items() for t in values]
```"
970,Write a function to find minimum of two numbers.,"def min_of_two( x, y ):
    if x < y:
        return x
    return y","```python
def find_minimum(num1, num2):
    return min(num1, num2)
```"
971,"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]","```python
def max_segments(n, a, b, c):
    dp = [0] * (n + 1)
    for i in range(1, n + 1):
        if i >= a:
            dp[i] = max(dp[i], 1 + dp[i - a])
        if i >= b:
            dp[i] = max(dp[i], 1 + dp[i - b])
        if i >= c:
            dp[i] = max(dp[i], 1 + dp[i - c])
    return dp[n]
```"
972,Write a function to concatenate the given two tuples to a nested tuple.,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ","```python
def concatenate_tuples(tuple1, tuple2):
    return (tuple1,) + (tuple2,)
```"
973,Write a python function to left rotate the string.,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ","```python
def left_rotate_string(s, n):
    if len(s) == 0:
        return s
    n = n % len(s)
    return s[n:] + s[:n]
```"
974,Write a function to find the minimum total path sum in the given triangle.,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]","```python
def minimumTotal(triangle):
    if not triangle:
        return 0
    
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1])
    
    return triangle[0][0]
```"
